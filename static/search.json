[{"idAnchor":"Cat.Instances.Karoubi.html#3952","idDesc":null,"idIdent":"spl","idType":"(C : Precategory o h) (A : Ob C) (e : Hom C A A)\n(i : is-idempotent C e) (f : Hom C A A) (p : (C ∘ f) e ≡ f)\n(q : (C ∘ e) f ≡ f)\n(idem : is-idempotent (Karoubi C) (f , p , q)) →\nis-split (Karoubi C) (f , p , q)"},{"idAnchor":"Cat.Instances.Karoubi.html#2616","idDesc":null,"idIdent":"Embed","idType":"(C : Precategory o h) → Functor C (Karoubi C)"},{"idAnchor":"Cat.Instances.Karoubi.html#1323","idDesc":null,"idIdent":"KHom","idType":"(C : Precategory o h) → KOb C → KOb C → Type h"},{"idAnchor":"Cat.Instances.Karoubi.html#1849","idDesc":null,"idIdent":"Karoubi","idType":"(C : Precategory o h) → Precategory (o ⊔ h) h"},{"idAnchor":"Cat.Instances.Karoubi.html#3903","idDesc":null,"idIdent":"f-idem","idType":"(C : Precategory o h) (A : Ob C) (e : Hom C A A)\n(i : is-idempotent C e) (f : Hom C A A) (p : (C ∘ f) e ≡ f)\n(q : (C ∘ e) f ≡ f)\n(idem : is-idempotent (Karoubi C) (f , p , q)) →\n(C ∘ f) f ≡ f"},{"idAnchor":"Cat.Instances.Karoubi.html#3738","idDesc":null,"idIdent":"is-idempotent-complete-Karoubi","idType":"(C : Precategory o h) → is-idempotent-complete (Karoubi C)"},{"idAnchor":"Cat.Instances.Karoubi.html#3039","idDesc":null,"idIdent":"Embed-is-fully-faithful","idType":"(C : Precategory o h) → is-fully-faithful (Embed C)"},{"idAnchor":"Cat.Instances.Karoubi.html#1242","idDesc":null,"idIdent":"KOb","idType":"Precategory o h → Type (o ⊔ h)"},{"idAnchor":"Cat.Instances.Karoubi.html#1436","idDesc":null,"idIdent":"KH≡","idType":"(C : Precategory o h) → fst f ≡ fst g → f ≡ g"},{"idAnchor":"Cat.Displayed.Instances.Pullback.html#1040","idDesc":null,"idIdent":"Change-of-base","idType":"(F : Functor X B₁) (E : Displayed B₁ o′′ ℓ′′) → Displayed X o′′ ℓ′′"},{"idAnchor":"Algebra.Group.Subgroup.html#16654","idDesc":null,"idIdent":"p","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (x y : Grp .fst) →\n(Grp .snd — x) y ∈ H →\n(Grp .snd — inverse (Grp .snd) x) (inverse (Grp .snd) y) ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#4289","idDesc":null,"idIdent":"Tset","idType":"(f : Hom A B₁) → is-set (image (f .fst))"},{"idAnchor":"Algebra.Group.Subgroup.html#9184","idDesc":null,"idIdent":"aux","idType":"(f : Hom A B₁) (e' : A .fst → F .fst) (gh : Group-hom A F e')\n(p\n : (e' , gh) ∘ zero→ ∅ᴳ ≡\n   (e' , gh) ∘ Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel)\n(y : A .fst) (q : f .fst y ≡ x) (z : A .fst) (r : f .fst z ≡ x) →\nf .fst ((A .snd — y) z) ≡ unit (B₁ .snd)"},{"idAnchor":"Algebra.Group.Subgroup.html#9926","idDesc":null,"idIdent":"coeq","idType":"(f : Hom A B₁) →\nis-coequaliser\n((λ _ → has-is-group (A .snd) .unit) , zero→ ∅ᴳ .snd)\n(fst , Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel .snd) (A→im f)"},{"idAnchor":"Algebra.Group.Subgroup.html#16590","idDesc":null,"idIdent":".extendedlambda0","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H)\n(x : tot (rel Grp N₁)) →\ninc (has-is-group (Grp .snd) .inverse (/-left x)) ≡\ninc (has-is-group (Grp .snd) .inverse (/-right x))"},{"idAnchor":"Algebra.Group.Subgroup.html#18299","idDesc":null,"idIdent":"p","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (h : rel Grp N₁ x y)\n(g : rel Grp N₁ y z) →\nGrp .snd ._⋆_ ((has-is-group (Grp .snd) — x) y)\n((has-is-group (Grp .snd) — y) z)\n≡ (has-is-group (Grp .snd) — x) z"},{"idAnchor":"Algebra.Group.Subgroup.html#18061","idDesc":null,"idIdent":"rel-sym","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nrel Grp N₁ x y → rel Grp N₁ y x"},{"idAnchor":"Algebra.Group.Subgroup.html#1777","idDesc":null,"idIdent":".extendedlambda1","idType":"(H : ℙ (G .fst)) →\nrepresents-subgroup G H → Σ (λ x → x ∈ H) → Σ (λ x → x ∈ H)"},{"idAnchor":"Algebra.Group.Subgroup.html#5672","idDesc":null,"idIdent":"A→im","idType":"(f : Hom A B₁) → Hom A A/ker[ f ]"},{"idAnchor":"Algebra.Group.Subgroup.html#19867","idDesc":null,"idIdent":"ir","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\n(Groups ℓ ∘ from Grp N₁) (to Grp N₁) ≡\n((λ z →\n    F₁ Forget ((Groups ℓ ∘ from Grp N₁) (to Grp N₁)) z .fst , z .snd)\n , id (c ℓ) .snd)"},{"idAnchor":"Algebra.Group.Subgroup.html#5803","idDesc":null,"idIdent":"im→B","idType":"(f : Hom A B₁) → Hom A/ker[ f ] B₁"},{"idAnchor":"Algebra.Group.Subgroup.html#17007","idDesc":null,"idIdent":"Group-on-G/H","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nGroup-on (G/H Grp N₁)"},{"idAnchor":"Algebra.Group.Subgroup.html#6998","idDesc":null,"idIdent":"1st-iso-theorem","idType":"(f : Hom A B₁) →\nis-coequaliser (zero→ ∅ᴳ)\n(Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel) (A→im f)"},{"idAnchor":"Algebra.Group.Subgroup.html#5993","idDesc":null,"idIdent":"Im[_]","idType":"(f : Hom A B₁) → Subgroup B₁"},{"idAnchor":"Algebra.Group.Subgroup.html#4906","idDesc":null,"idIdent":"inv","idType":"(f : Hom A B₁) → T f → T f"},{"idAnchor":"Algebra.Group.Subgroup.html#16245","idDesc":null,"idIdent":"rem₃","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (w x y z : G0 Grp N₁)\n(w-x∈ : Grp .snd ._⋆_ w (inverse (Grp .snd) x) ∈ H)\n(y-z∈ : Grp .snd ._⋆_ y (inverse (Grp .snd) z) ∈ H) →\n(Grp .snd — Grp .snd ._⋆_ y w) (Grp .snd ._⋆_ z x) ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#16514","idDesc":null,"idIdent":"inverse","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nG/H Grp N₁ → G/H Grp N₁"},{"idAnchor":"Algebra.Group.Subgroup.html#14309","idDesc":null,"idIdent":"has-comm","idType":"(r : normal-subgroup G H) →\nG .snd ._⋆_ x y ∈ H → G .snd ._⋆_ y x ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#18812","idDesc":null,"idIdent":"H-g","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Ob (Groups ℓ)"},{"idAnchor":"Algebra.Group.Subgroup.html#3191","idDesc":null,"idIdent":"Ker-subgroup","idType":"Hom A B₁ → Subgroup A"},{"idAnchor":"Algebra.Group.Subgroup.html#780","idDesc":null,"idIdent":"Subgroup","idType":"Group ℓ → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Group.Subgroup.html#19500","idDesc":null,"idIdent":"x-0∈H","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H)\n(x : ∣ underlying-set (has-is-group (Grp .snd)) ∣)\n(p : fst (incl Grp N₁) x ≡ fst (zero→ ∅ᴳ) x) →\nrel Grp N₁ x (has-is-group (Grp .snd) .unit)"},{"idAnchor":"Algebra.Group.Subgroup.html#18509","idDesc":null,"idIdent":"/ᴳ-effective","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nPath (G/H Grp N₁) (inc x) (inc y) → rel Grp N₁ x y"},{"idAnchor":"Algebra.Group.Subgroup.html#14126","idDesc":null,"idIdent":"has-conjugate","idType":"normal-subgroup G H →\nx ∈ H → G .snd ._⋆_ y (G .snd ._⋆_ x ((G .snd ⁻¹) y)) ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#8667","idDesc":null,"idIdent":"const′","idType":"(f : Hom A B₁) (e' : A .fst → F .fst) (gh : Group-hom A F e')\n(p\n : (e' , gh) ∘ zero→ ∅ᴳ ≡\n   (e' , gh) ∘ Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel)\n(x y : fibre (f .fst) x₁) →\n(F .snd — e' (x .fst)) (e' (y .fst)) ≡ unit (F .snd)"},{"idAnchor":"Algebra.Group.Subgroup.html#4847","idDesc":null,"idIdent":"unit","idType":"(f : Hom A B₁) → T f"},{"idAnchor":"Algebra.Group.Subgroup.html#18741","idDesc":null,"idIdent":"Ker-sg","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Subgroup Grp"},{"idAnchor":"Algebra.Group.Subgroup.html#9437","idDesc":null,"idIdent":"const","idType":"(f : Hom A B₁) (e' : A .fst → F .fst) (gh : Group-hom A F e') →\n(e' , gh) ∘ zero→ ∅ᴳ ≡\n(e' , gh) ∘ Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel →\n(x y : fibre (f .fst) x₁) → e' (x .fst) ≡ e' (y .fst)"},{"idAnchor":"Algebra.Group.Subgroup.html#19600","idDesc":null,"idIdent":"from","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nHom (∑ (Grp .fst) (∣_∣ ⊙ H) , rep-subgroup→group-on H (has-rep N₁))\n(∑ ∣ underlying-set (has-is-group (Grp .snd)) ∣\n (λ x → fst (incl Grp N₁) x ≡ fst (zero→ ∅ᴳ) x)\n , equ-group (incl Grp N₁) (zero→ ∅ᴳ))"},{"idAnchor":"Algebra.Group.Subgroup.html#10022","idDesc":null,"idIdent":"path","idType":"(f : Hom A B₁)\n(x : Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .ker .fst) →\nA→im f .fst (unit (A .snd)) ≡ A→im f .fst (x .fst)"},{"idAnchor":"Algebra.Group.Subgroup.html#18176","idDesc":null,"idIdent":"rel-trans","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nrel Grp N₁ x y → rel Grp N₁ y z → rel Grp N₁ x z"},{"idAnchor":"Algebra.Group.Subgroup.html#5017","idDesc":null,"idIdent":"mul","idType":"(f : Hom A B₁) → T f → T f → T f"},{"idAnchor":"Algebra.Group.Subgroup.html#17424","idDesc":null,"idIdent":"_/ᴳ_","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Group ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#10270","idDesc":null,"idIdent":"gh","idType":"(f : Hom A B₁)\n(p\n : (Groups ℓ ∘ e')\n   ((λ _ → has-is-group (A .snd) .unit) , zero→ ∅ᴳ .snd)\n   ≡\n   (Groups ℓ ∘ e')\n   (fst , Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel .snd)) →\nHom (∑ (B₁ .fst) (λ b → ∃ (A .fst) (λ a → f .fst a ≡ b)) , grp f) F"},{"idAnchor":"Algebra.Group.Subgroup.html#20360","idDesc":null,"idIdent":"ker≤H","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\n(SubG Grp N₁ ≤ Ker-sg Grp N₁) (H-sg Grp N₁)"},{"idAnchor":"Algebra.Group.Subgroup.html#2354","idDesc":null,"idIdent":"ism","idType":"(H : ℙ (G .fst)) (p : represents-subgroup G H) → is-monic (map H p)"},{"idAnchor":"Algebra.Group.Subgroup.html#1206","idDesc":null,"idIdent":"has-⋆","idType":"represents-subgroup G H → x ∈ H → y ∈ H → G .snd ._⋆_ x y ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#13989","idDesc":null,"idIdent":"normal-subgroup","idType":"(G : Group ℓ) (H : ℙ (G .fst)) → Type ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#1721","idDesc":null,"idIdent":".extendedlambda0","idType":"(H : ℙ (G .fst)) →\nrepresents-subgroup G H →\nΣ (λ x → x ∈ H) → Σ (λ x → x ∈ H) → Σ (λ x → x ∈ H)"},{"idAnchor":"Algebra.Group.Subgroup.html#20167","idDesc":null,"idIdent":"Ker[incl]≡H↪G","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nKer-sg Grp N₁ ≡ H-sg Grp N₁"},{"idAnchor":"Algebra.Group.Subgroup.html#2101","idDesc":null,"idIdent":"predicate→subgroup","idType":"(H : ℙ (G .fst)) → represents-subgroup G H → Subgroup G"},{"idAnchor":"Algebra.Group.Subgroup.html#4161","idDesc":null,"idIdent":"Tpath","idType":"(f : Hom A B₁) → x .fst ≡ y .fst → x ≡ y"},{"idAnchor":"Algebra.Group.Subgroup.html#1182","idDesc":null,"idIdent":"has-unit","idType":"represents-subgroup G H → unit (G .snd) ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#1475","idDesc":null,"idIdent":"rep-subgroup→group-on","idType":"(H : ℙ (G .fst)) →\nrepresents-subgroup G H → Group-on (Σ (λ x → x ∈ H))"},{"idAnchor":"Algebra.Group.Subgroup.html#15260","idDesc":null,"idIdent":"rel-refl","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (x : G0 Grp N₁) →\nrel Grp N₁ x x"},{"idAnchor":"Algebra.Group.Subgroup.html#18772","idDesc":null,"idIdent":"H-sg","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Subgroup Grp"},{"idAnchor":"Algebra.Group.Subgroup.html#5221","idDesc":null,"idIdent":"grp","idType":"(f : Hom A B₁) → Group-on (T f)"},{"idAnchor":"Algebra.Group.Subgroup.html#14182","idDesc":null,"idIdent":"has-conjugatel","idType":"(r : normal-subgroup G H) →\ny ∈ H → G .snd ._⋆_ (G .snd ._⋆_ x y) ((G .snd ⁻¹) x) ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#15397","idDesc":null,"idIdent":"op","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nG/H Grp N₁ → G/H Grp N₁ → G/H Grp N₁"},{"idAnchor":"Algebra.Group.Subgroup.html#15360","idDesc":null,"idIdent":"G/H","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Type ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#5113","idDesc":null,"idIdent":".extendedlambda1","idType":"(f : Hom A B₁) (x : B₁ .fst) (xp : ∃ (A .fst) (λ a → f .fst a ≡ x))\n(y : B₁ .fst) (yp : ∃ (A .fst) (λ a → f .fst a ≡ y))\n(x₁ : Σ (λ a → f .fst a ≡ x)) (y₁ : Σ (λ a → f .fst a ≡ y)) →\n∥ Σ (λ a → f .fst a ≡ B₁ .snd ._⋆_ x y) ∥"},{"idAnchor":"Algebra.Group.Subgroup.html#16038","idDesc":null,"idIdent":"rem₁","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (w x y z : G0 Grp N₁)\n(w-x∈ : Grp .snd ._⋆_ w (inverse (Grp .snd) x) ∈ H)\n(y-z∈ : Grp .snd ._⋆_ y (inverse (Grp .snd) z) ∈ H) →\nGrp .snd ._⋆_ ((Grp .snd — w) x)\n(Grp .snd ._⋆_ (inverse (Grp .snd) z) y)\n∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#19396","idDesc":null,"idIdent":"to","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nHom\n(∑ ∣ underlying-set (has-is-group (Grp .snd)) ∣\n (λ x → fst (incl Grp N₁) x ≡ fst (zero→ ∅ᴳ) x)\n , equ-group (incl Grp N₁) (zero→ ∅ᴳ))\n(∑ (Grp .fst) (∣_∣ ⊙ H) , rep-subgroup→group-on H (has-rep N₁))"},{"idAnchor":"Algebra.Group.Subgroup.html#4960","idDesc":null,"idIdent":".extendedlambda0","idType":"(f : Hom A B₁) (x : B₁ .fst) →\n∃ (A .fst) (λ a → f .fst a ≡ x) →\nΣ (λ a → f .fst a ≡ x) → Σ (λ a → f .fst a ≡ (B₁ .snd ⁻¹) x)"},{"idAnchor":"Algebra.Group.Subgroup.html#10939","idDesc":null,"idIdent":".extendedlambda0","idType":"(f : Hom A B₁) →\ne′ ≡ (Groups ℓ ∘ colim) (A→im f) →\n(x : B₁ .fst) →\n∃ (A .fst) (λ a → f .fst a ≡ x) →\n(x₁ : Σ (λ a → f .fst a ≡ x)) →\ncolim .fst (x , inc x₁) ≡ elim f p (inc x₁)"},{"idAnchor":"Algebra.Group.Subgroup.html#4760","idDesc":null,"idIdent":"T","idType":"Hom A B₁ → Type ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#4797","idDesc":null,"idIdent":"A/ker[_]","idType":"(f : Hom A B₁) → Group ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#17470","idDesc":null,"idIdent":"incl","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Hom Grp (Grp /ᴳ N₁)"},{"idAnchor":"Algebra.Group.Subgroup.html#20465","idDesc":null,"idIdent":"H≤ker","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\n(SubG Grp N₁ ≤ H-sg Grp N₁) (Ker-sg Grp N₁)"},{"idAnchor":"Algebra.Group.Subgroup.html#14426","idDesc":null,"idIdent":"p","idType":"(r : normal-subgroup G H) (∈ : G .snd ._⋆_ x y ∈ H) →\nG .snd ._⋆_ ((G .snd ⁻¹) x)\n(G .snd ._⋆_ (G .snd ._⋆_ x y) ((G .snd ⁻¹) ((G .snd ⁻¹) x)))\n≡ G .snd ._⋆_ y x"},{"idAnchor":"Algebra.Group.Subgroup.html#14088","idDesc":null,"idIdent":"has-rep","idType":"normal-subgroup G H → represents-subgroup G H"},{"idAnchor":"Algebra.Group.Subgroup.html#6048","idDesc":null,"idIdent":"im↪B","idType":"(f : Hom A B₁) → is-monic (im→B f)"},{"idAnchor":"Algebra.Group.Subgroup.html#15185","idDesc":null,"idIdent":"G0","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Type ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#1259","idDesc":null,"idIdent":"has-inv","idType":"represents-subgroup G H → x ∈ H → (G .snd ⁻¹) x ∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#16124","idDesc":null,"idIdent":"rem₂","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) (w x y z : G0 Grp N₁)\n(w-x∈ : Grp .snd ._⋆_ w (inverse (Grp .snd) x) ∈ H)\n(y-z∈ : Grp .snd ._⋆_ y (inverse (Grp .snd) z) ∈ H) →\nGrp .snd ._⋆_\n(Grp .snd ._⋆_ w ((Grp .snd — inverse (Grp .snd) x) z)) y\n∈ H"},{"idAnchor":"Algebra.Group.Subgroup.html#10749","idDesc":null,"idIdent":"path","idType":"(f : Hom A B₁) →\ne′ ≡ (Groups ℓ ∘ colim) (A→im f) →\n(x : ∑ (B₁ .fst) (λ b → ∃ (A .fst) (λ a → f .fst a ≡ b))) →\ncolim .fst x ≡ elim f p (x .snd)"},{"idAnchor":"Algebra.Group.Subgroup.html#20245","idDesc":null,"idIdent":"SubG","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) → Poset (lsuc ℓ ⊔ ℓ) ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#1078","idDesc":null,"idIdent":"represents-subgroup","idType":"(G : Group ℓ) (H : ℙ (G .fst)) → Type ℓ"},{"idAnchor":"Algebra.Group.Subgroup.html#7977","idDesc":null,"idIdent":"elim","idType":"(f : Hom A B₁)\n(p\n : e' ∘ zero→ ∅ᴳ ≡\n   e' ∘ Ker (Groups ℓ) ∅ᴳ Groups-equalisers f .kernel) →\n∥ fibre (f .fst) x ∥ → F .fst"},{"idAnchor":"Algebra.Group.Subgroup.html#19788","idDesc":null,"idIdent":"il","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\n(Groups ℓ ∘ to Grp N₁) (from Grp N₁) ≡\n((λ z →\n    F₁ Forget ((Groups ℓ ∘ to Grp N₁) (from Grp N₁)) z .fst , z .snd)\n , id (c ℓ) .snd)"},{"idAnchor":"Algebra.Group.Subgroup.html#2233","idDesc":null,"idIdent":"map","idType":"(H : ℙ (G .fst)) (p : represents-subgroup G H) →\nHom (Σ (∣_∣ ⊙ H) , rep-subgroup→group-on H p) G"},{"idAnchor":"Algebra.Group.Subgroup.html#19287","idDesc":null,"idIdent":"Ker[incl]≅H-group","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nKer (Groups ℓ) ∅ᴳ Groups-equalisers (incl Grp N₁) .ker ≅ H-g Grp N₁"},{"idAnchor":"Algebra.Group.Subgroup.html#15203","idDesc":null,"idIdent":"rel","idType":"(Grp : Group ℓ) (N₁ : normal-subgroup Grp H) →\nG0 Grp N₁ → G0 Grp N₁ → Type ℓ"},{"idAnchor":"1Lab.Univalence.SIP.Auto.html#650","idDesc":null,"idIdent":"tryBin","idType":"(n : Nat) (t : Term) → Name → TC ⊤"},{"idAnchor":"1Lab.Univalence.SIP.Auto.html#597","idDesc":null,"idIdent":"tryPoint","idType":"(n : Nat) (t : Term) → TC ⊤"},{"idAnchor":"1Lab.Univalence.SIP.Auto.html#358","idDesc":null,"idIdent":"makeAutoStr-term","idType":"Nat → Term → TC ⊤"},{"idAnchor":"1Lab.Univalence.SIP.Auto.html#861","idDesc":null,"idIdent":"useConst","idType":"(n : Nat) (t : Term) → TC ⊤"},{"idAnchor":"1Lab.Univalence.SIP.Auto.html#936","idDesc":null,"idIdent":"auto-str-term","idType":"Term → TC ⊤"},{"idAnchor":"Algebra.Magma.html#848","idDesc":null,"idIdent":"∞MagmaStr-univ","idType":"is-univalent {ℓ} {ℓ} {ℓ} {is∞Magma {ℓ}} (∞MagmaStr {ℓ})"},{"idAnchor":"Algebra.Magma.html#1754","idDesc":null,"idIdent":"magma-hlevel","idType":"is-magma {ℓ} {A} _⋆₁_ → H-Level {ℓ} A (2 ⦃ tt ⦄ + n)"},{"idAnchor":"Algebra.Magma.html#1445","idDesc":null,"idIdent":"is-magma","idType":"(_⋆₁_ : A → A → A) → Type ℓ"},{"idAnchor":"Algebra.Magma.html#2655","idDesc":null,"idIdent":"has-is-magma","idType":"(r : Magma-on {ℓ} A) → is-magma {ℓ} {A} (r ._⋆_)"},{"idAnchor":"Algebra.Magma.html#3834","idDesc":null,"idIdent":"Magma≡","idType":"_≃_ {ℓ} {lsuc ℓ}\n(_≃[_]_ {ℓ} {ℓ} {Magma-on {ℓ}} {ℓ} A (HomT→Str (Magma≃ {ℓ})) B₁)\n(_≡_ {lsuc ℓ} {∑ {lsuc ℓ} {ℓ} (Type ℓ) (Magma-on {ℓ})} A B₁)"},{"idAnchor":"Algebra.Magma.html#1681","idDesc":null,"idIdent":"underlying-set","idType":"(r : is-magma {ℓ} {A} _⋆₁_) → Set ℓ"},{"idAnchor":"Algebra.Magma.html#2634","idDesc":null,"idIdent":"_⋆_","idType":"Magma-on {ℓ} A → A → A → A"},{"idAnchor":"Algebra.Magma.html#2585","idDesc":null,"idIdent":"Magma-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Magma.html#2203","idDesc":null,"idIdent":"is-magma-is-prop","idType":"is-prop {A.ℓ} (is-magma {A.ℓ} {A} _⋆₁_)"},{"idAnchor":"Algebra.Magma.html#2721","idDesc":null,"idIdent":"Magma","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Magma.html#2971","idDesc":null,"idIdent":"Magma≃","idType":"(A B₁ : Magma ℓ) (e : _≃_ {ℓ} {ℓ} (A .fst) (B₁ .fst)) → Type ℓ"},{"idAnchor":"Algebra.Magma.html#768","idDesc":null,"idIdent":"∞MagmaStr","idType":"Structure {ℓ} {ℓ} ℓ (is∞Magma {ℓ})"},{"idAnchor":"Algebra.Magma.html#1656","idDesc":null,"idIdent":"has-is-set","idType":"is-magma {ℓ} {A} _⋆₁_ → is-set {ℓ} A"},{"idAnchor":"Algebra.Magma.html#432","idDesc":null,"idIdent":"is∞Magma","idType":"Type ℓ → Type ℓ"},{"idAnchor":"Algebra.Magma.html#3120","idDesc":null,"idIdent":"pres-⋆","idType":"Magma≃ {ℓ} A B₁ e →\n(x y : A .fst) →\n_≡_ {ℓ} {B₁ .fst} (e .fst (A .snd ._⋆_ x y))\n(B₁ .snd ._⋆_ (e .fst x) (e .fst y))"},{"idAnchor":"Algebra.Magma.html#3573","idDesc":null,"idIdent":"Magma-univalent","idType":"is-univalent {ℓ} {ℓ} {ℓ} {Magma-on {ℓ}} (HomT→Str (Magma≃ {ℓ}))"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#1534","idDesc":null,"idIdent":"x-is-x","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z)\n(ob ob′ : Ob (F ↓ G)) (isom : ((F ↓ G) ≅ ob) ob′) →\n(Y ≅ ob .x) (ob′ .x)"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#1562","idDesc":null,"idIdent":"y-is-y","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z)\n(ob ob′ : Ob (F ↓ G)) (isom : ((F ↓ G) ≅ ob) ob′) →\n(Z ≅ ob .y) (ob′ .y)"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#3379","idDesc":null,"idIdent":"maps","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z)\n(ob ob′ : Ob (F ↓ G)) (isom : ((F ↓ G) ≅ ob) ob′) →\nPathP\n(λ i → ((F ↓ G) ≅ ob) (objs F G xuniv yuniv zuniv ob ob′ isom i))\n(make-iso (F ↓ G) (id (F ↓ G)) (id (F ↓ G))\n (idl (F ↓ G) (id (F ↓ G))) (idl (F ↓ G) (id (F ↓ G))))\nisom"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#2721","idDesc":null,"idIdent":"lemma′","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z)\n(ob ob′ : Ob (F ↓ G)) (isom : ((F ↓ G) ≅ ob) ob′) (i : I) →\nPathP\n(λ i₁ →\n   X .Hom (₀ F (objs F G xuniv yuniv zuniv ob ob′ isom i₁ .x))\n   (₀ G (objs F G xuniv yuniv zuniv ob ob′ isom i₁ .y)))\n(ob .map) (ob′ .map)"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#2590","idDesc":null,"idIdent":"objs","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z)\n(ob ob′ : Ob (F ↓ G)) (isom : ((F ↓ G) ≅ ob) ob′) →\nob ≡ ob′"},{"idAnchor":"Cat.Instances.Comma.Univalent.html#1348","idDesc":null,"idIdent":"Comma-is-category","idType":"(F : Functor Y X) (G : Functor Z X) (xuniv : is-category X)\n(yuniv : is-category Y) (zuniv : is-category Z) →\nis-category (F ↓ G)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#1971","idDesc":null,"idIdent":"Finitely-complete","idType":"(C : Precategory ℓ ℓ') → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#14425","idDesc":null,"idIdent":"equalise","idType":"(C : Precategory ℓ ℓ') (thin : is-thin C) (top : Terminal C)\n(meets : (A B₁ : Ob C) → Product C A B₁) (f g : Hom C A B₁) →\nEqualiser C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2057","idDesc":null,"idIdent":"products","idType":"Finitely-complete C → (A B₁ : Ob C) → Product C A B₁"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#10148","idDesc":null,"idIdent":"eq","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁) →\nEqualiser C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2232","idDesc":null,"idIdent":"Eq","idType":"Finitely-complete C → Hom C A B₁ → Hom C A B₁ → Ob C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#15554","idDesc":null,"idIdent":"is-complete→finitely","idType":"(C : Precategory ℓ ℓ') → is-complete a b C → Finitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2315","idDesc":null,"idIdent":"Pb","idType":"Finitely-complete C → Hom C A C → Hom C B₁ C → Ob C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#15168","idDesc":null,"idIdent":"pb","idType":"(C : Precategory ℓ ℓ') (thin : is-thin C) (top : Terminal C)\n(meets : (A B₁ : Ob C) → Product C A B₁) (f : Hom C A X)\n(g : Hom C B₁ X) →\nPullback C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#18085","idDesc":null,"idIdent":"F∘-is-lex","idType":"is-lex F → is-lex G → is-lex (F F∘ G)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16457","idDesc":null,"idIdent":"h′","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) (x x₁ : C .Ob) →\nCone (F C compl)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16428","idDesc":null,"idIdent":".extendedlambda2","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) (x : C .Ob)\n(h : C .Hom (apex (h′ C compl x x)) (apex (limF C compl .top)))\n(o : idx C compl .Ob) →\nC ._∘_ (ψ (limF C compl .top) o) h ≡ ψ (h′ C compl x x) o"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16522","idDesc":null,"idIdent":".extendedlambda0","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C)\n(x : C .Ob) (x₁ : C .Ob)\n(x₂ : liftc a b (Disc ⊥ (λ x₃ → absurd x₃)) .Ob) →\nC .Hom x₁ (₀ (F C compl) x₂)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#13049","idDesc":null,"idIdent":"product→terminal-pullback","idType":"(C : Precategory ℓ ℓ') →\nis-terminal C T → is-product C p1 p2 → is-pullback C p1 f p2 g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#4337","idDesc":null,"idIdent":"pb","idType":"(C : Precategory ℓ ℓ') (prod : is-product C p1 p2)\n(eq₁ : is-equaliser C ((C ∘ f) p1) ((C ∘ g) p2) e) →\nis-pullback C (C ._∘_ p1 e) f (C ._∘_ p2 e) g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#3937","idDesc":null,"idIdent":"product-equaliser→pullback","idType":"(C : Precategory ℓ ℓ') →\nis-product C p1 p2 →\nis-equaliser C ((C ∘ f) p1) ((C ∘ g) p2) e →\nis-pullback C ((C ∘ p1) e) f ((C ∘ p2) e) g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#8161","idDesc":null,"idIdent":"mkprod","idType":"(C : Precategory ℓ ℓ') →\nTerminal C →\n((f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g) →\n(A B₁ : Ob C) → Product C A B₁"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#17641","idDesc":null,"idIdent":"pres-product","idType":"(r : is-lex F) →\nis-terminal C T →\nis-product C p1 p2 → is-product D (₁ F p1) (₁ F p2)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#17140","idDesc":null,"idIdent":"pres-⊤","idType":"is-lex F → is-terminal C T → is-terminal D (₀ F T)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16150","idDesc":null,"idIdent":"term′","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) → Terminal C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16051","idDesc":null,"idIdent":"limF","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) →\nLimit (F C compl)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#7683","idDesc":null,"idIdent":"prod","idType":"(C : Precategory ℓ ℓ') (term : is-terminal C T)\n(pb : is-pullback C p1 f p2 g) →\nis-product C p1 p2"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#17034","idDesc":null,"idIdent":"is-lex","idType":"(F : Functor C D) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#8364","idDesc":null,"idIdent":"mkeq","idType":"(C : Precategory ℓ ℓ') →\nTerminal C →\n((f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g) →\n(f g : Hom C A B₁) → Equaliser C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#11705","idDesc":null,"idIdent":"p1","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁) (p : (C ∘ f) e′ ≡ (C ∘ g) e′) →\n(C ∘ mkprod C top pb B₁ B₁ .π₁)\n((C ∘ ⟨id,id⟩ C top pb f g) ((C ∘ f) e′))\n≡ (C ∘ mkprod C top pb B₁ B₁ .π₁) ((C ∘ ⟨f,g⟩ C top pb f g) e′)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#13811","idDesc":null,"idIdent":"with-top-and-meets","idType":"(C : Precategory ℓ ℓ') →\nis-thin C →\nTerminal C → ((A B₁ : Ob C) → Product C A B₁) → Finitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#9383","idDesc":null,"idIdent":"⟨f,g⟩","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁) →\nHom C A (mkprod C top pb B₁ B₁ .apex)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#17203","idDesc":null,"idIdent":"pres-pullback","idType":"is-lex F →\nis-pullback C p1 f p2 g →\nis-pullback D (₁ F p1) (₁ F f) (₁ F p2) (₁ F g)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#5699","idDesc":null,"idIdent":"with-equalisers","idType":"(C : Precategory ℓ ℓ') →\nTerminal C →\n((A B₁ : Ob C) → Product C A B₁) →\n((f g : Hom C A B₁) → Equaliser C f g) → Finitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#6638","idDesc":null,"idIdent":"terminal-pullback→product","idType":"(C : Precategory ℓ ℓ') →\nis-terminal C T → is-pullback C p1 f p2 g → is-product C p1 p2"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#12410","idDesc":null,"idIdent":"path","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁)\n(e′=p₂∘l : e′ ≡ (C ∘ eq C top pb f g .equ) lim') →\n(C ∘ pb (⟨id,id⟩ C top pb f g) (⟨f,g⟩ C top pb f g) .p₁) lim' ≡\n(C ∘ f) e′"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#11952","idDesc":null,"idIdent":"p2","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁) (p : (C ∘ f) e′ ≡ (C ∘ g) e′) →\n(C ∘ mkprod C top pb B₁ B₁ .π₂)\n((C ∘ ⟨id,id⟩ C top pb f g) ((C ∘ f) e′))\n≡ (C ∘ mkprod C top pb B₁ B₁ .π₂) ((C ∘ ⟨f,g⟩ C top pb f g) e′)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#15708","idDesc":null,"idIdent":"pb","idType":"(C : Precategory ℓ ℓ') →\nis-complete a b C →\n(f : Hom C x z) (g : Hom C y z) → Pullback C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#14018","idDesc":null,"idIdent":"fc","idType":"(C : Precategory ℓ ℓ') (thin : is-thin C) (top : Terminal C)\n(meets : (A B₁ : Ob C) → Product C A B₁) →\nFinitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2027","idDesc":null,"idIdent":"terminal","idType":"Finitely-complete C → Terminal C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2159","idDesc":null,"idIdent":"pullbacks","idType":"Finitely-complete C →\n(f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16248","idDesc":null,"idIdent":"limiting","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) (x : C .Ob) →\nis-contr\n(C .Hom (apex (h′ C compl x x)) (apex (limF C compl .top)))"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#8288","idDesc":null,"idIdent":"pb′","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(A B₁ : Ob C) →\nis-pullback C (pb (top .has⊤ A .centre) (top .has⊤ B₁ .centre) .p₁)\n(top .has⊤ A .centre)\n(pb (top .has⊤ A .centre) (top .has⊤ B₁ .centre) .p₂)\n(top .has⊤ B₁ .centre)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#7973","idDesc":null,"idIdent":"with-pullbacks","idType":"(C : Precategory ℓ ℓ') →\nTerminal C →\n((f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g) →\nFinitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#12908","idDesc":null,"idIdent":"fc","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g) →\nFinitely-complete C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#15925","idDesc":null,"idIdent":"F","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) →\nFunctor (idx C compl) C"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#16544","idDesc":null,"idIdent":".extendedlambda1","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C)\n(x : C .Ob) (x₁ : C .Ob)\n(f : liftc a b (Disc ⊥ (λ x₂ → absurd x₂)) .Hom x₂ y) →\nC ._∘_ (₁ (F C compl) f) ((λ { () }) x₂) ≡ (λ { () }) y"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#9321","idDesc":null,"idIdent":"⟨id,id⟩","idType":"(C : Precategory ℓ ℓ') (top : Terminal C)\n(pb : (f : Hom C A X) (g : Hom C B₁ X) → Pullback C f g)\n(f g : Hom C A B₁) →\nHom C B₁ (mkprod C top pb B₁ B₁ .apex)"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#15847","idDesc":null,"idIdent":"idx","idType":"(C : Precategory ℓ ℓ') (compl : is-complete a b C) →\nPrecategory a b"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#13288","idDesc":null,"idIdent":"pb","idType":"(C : Precategory ℓ ℓ') (t : is-terminal C T)\n(r : is-product C p1 p2) →\nis-pullback C p1 f p2 g"},{"idAnchor":"Cat.Diagram.Limit.Finite.html#2098","idDesc":null,"idIdent":"equalisers","idType":"Finitely-complete C → (f g : Hom C A B₁) → Equaliser C f g"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1442","idDesc":null,"idIdent":"cong","idType":"(f : (a : A) → B₁ a) (p : x ≡ y) →\nPathP (λ i → B₁ (p i)) (f x) (f y)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1316","idDesc":null,"idIdent":"refl","idType":"x ≡ x"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#3063","idDesc":null,"idIdent":"f","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) →\ne (~ i1)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2221","idDesc":null,"idIdent":"transpProof","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) →\nfiber (transp e i0) (outS b)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2191","idDesc":null,"idIdent":"primFaceForall","idType":"(I → I) → I"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2898","idDesc":null,"idIdent":".extendedlambda0","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) (k i : I) →\n.(IsOne (φ ∨ ~ φ)) → e (~ i)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#622","idDesc":null,"idIdent":"hfill","idType":"(u : I → Partial φ A) → Sub A φ (u i0) → I → A"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1611","idDesc":null,"idIdent":"isContr","idType":"Type ℓ → Type ℓ"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2836","idDesc":null,"idIdent":"g","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0)) →\nSub (e i1) φ (λ .o → transp e i0 (a _)) → (k : I) → e (~ k)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#788","idDesc":null,"idIdent":".extendedlambda0","idType":"(u : I → Partial φ A) (u0 : Sub A φ (u i0)) (i : I) →\nI → .(IsOne (φ ∨ ~ i)) → A"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2776","idDesc":null,"idIdent":"b'","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) →\ne i1"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2496","idDesc":null,"idIdent":".extendedlambda0","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) (j i : I) →\n.(IsOne (φ ∨ ~ j ∨ j)) → e i"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#2008","idDesc":null,"idIdent":"prim^unglueU","idType":"hcomp T (outS A) → outS A"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#937","idDesc":null,"idIdent":"fill","idType":"(A : (i : I) → Type (ℓ i)) (u : (i : I) → Partial φ (A i)) →\nSub (A i0) φ (u i0) → (i : I) → A i"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1835","idDesc":null,"idIdent":"prim^glueU","idType":"PartialP φ (T i1) → outS A → hcomp T (outS A)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1688","idDesc":null,"idIdent":"fiber","idType":"(A → B₁) → B₁ → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#3095","idDesc":null,"idIdent":".extendedlambda0","idType":"(e : I → Type l) (φ : I) (a : Partial φ (e i0))\n(b : Sub (e i1) φ (λ .o → transp e i0 (a _))) (i : I) →\n.(IsOne (φ ∨ ~ φ)) → e (~ i)"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1375","idDesc":null,"idIdent":"sym","idType":"x ≡ y → y ≡ x"},{"idAnchor":"Agda.Builtin.Cubical.HCompU.html#1172","idDesc":null,"idIdent":".extendedlambda0","idType":"(A : (i : I) → Type (ℓ i)) (u : (i : I) → Partial φ (A i))\n(u0 : Sub (A i0) φ (u i0)) (i j : I) →\n.(IsOne (φ ∨ ~ i)) → A (i ∧ j)"},{"idAnchor":"Cat.Functor.Adjoint.Hom.html#2660","idDesc":null,"idIdent":"adj′","idType":"(f : C .Hom (₀ L x) y → D .Hom x (₀ R₁ y)) (f-equiv : is-equiv f)\n(natural\n : (g : C .Hom a b) (h : D .Hom c d) (x : C .Hom (F₀ L d) a) →\n   f (C ._∘_ g (C ._∘_ x (₁ L h))) ≡\n   D ._∘_ (₁ R₁ g) (D ._∘_ (f x) h)) →\nL ⊣ R₁"},{"idAnchor":"Cat.Functor.Adjoint.Hom.html#1927","idDesc":null,"idIdent":"inv-natural","idType":"(f : C .Hom (₀ L x) y → D .Hom x (₀ R₁ y)) (f-equiv : is-equiv f)\n(natural\n : (g : C .Hom a b) (h : D .Hom c d) (x : C .Hom (F₀ L d) a) →\n   f (C ._∘_ g (C ._∘_ x (₁ L h))) ≡ D ._∘_ (₁ R₁ g) (D ._∘_ (f x) h))\n(g : C .Hom a b) (h : D .Hom c d) (x : D .Hom d (F₀ R₁ a)) →\nf⁻¹ f f-equiv natural (D ._∘_ (₁ R₁ g) (D ._∘_ x h)) ≡\nC ._∘_ g (C ._∘_ (f⁻¹ f f-equiv natural x) (₁ L h))"},{"idAnchor":"Cat.Functor.Adjoint.Hom.html#1567","idDesc":null,"idIdent":"hom-iso→adjoints","idType":"(f : C .Hom (₀ L x) y → D .Hom x (₀ R₁ y)) →\nis-equiv f →\n((g : C .Hom a b) (h : D .Hom c d) (x : C .Hom (F₀ L d) a) →\n f (C ._∘_ g (C ._∘_ x (₁ L h))) ≡\n D ._∘_ (₁ R₁ g) (D ._∘_ (f x) h)) →\nL ⊣ R₁"},{"idAnchor":"Cat.Functor.Adjoint.Hom.html#1844","idDesc":null,"idIdent":"f⁻¹","idType":"(f : C .Hom (₀ L x) y → D .Hom x (₀ R₁ y)) →\nis-equiv f →\n((g : C .Hom a b) (h : D .Hom c d) (x : C .Hom (F₀ L d) a) →\n f (C ._∘_ g (C ._∘_ x (₁ L h))) ≡\n D ._∘_ (₁ R₁ g) (D ._∘_ (f x) h)) →\nD .Hom x (₀ R₁ y) → C .Hom (₀ L x) y"},{"idAnchor":"Cat.Instances.Shape.Terminal.html#558","idDesc":null,"idIdent":"const!","idType":"Ob A → Functor ⊤Cat A"},{"idAnchor":"Cat.Instances.Shape.Terminal.html#244","idDesc":null,"idIdent":"⊤Cat","idType":"Precategory lzero lzero"},{"idAnchor":"Cat.Functor.Equivalence.Complete.html#1060","idDesc":null,"idIdent":"equivalence→complete","idType":"is-equivalence F → is-complete co cℓ C → is-complete co cℓ D"},{"idAnchor":"Algebra.Group.html#7011","idDesc":null,"idIdent":"pres-inv","idType":"(r : Group-hom A B₁ e) →\ne (inverse (A .snd) x) ≡ inverse (B₁ .snd) (e x)"},{"idAnchor":"Algebra.Group.html#1961","idDesc":null,"idIdent":"p","idType":"(r : is-group _*₁_) → ((x *₁ y) *₁ (r — inverse r y) x) ≡ unit r"},{"idAnchor":"Algebra.Group.html#2225","idDesc":null,"idIdent":"zero-diff","idType":"(r : is-group _*₁_) → (r — x) y ≡ unit r → x ≡ y"},{"idAnchor":"Algebra.Group.html#6661","idDesc":null,"idIdent":"pres-id","idType":"(r : Group-hom A B₁ e) → e (1A r) ≡ 1B r"},{"idAnchor":"Algebra.Group.html#1544","idDesc":null,"idIdent":"inv-unit","idType":"(r : is-group _*₁_) → inverse r (unit r) ≡ unit r"},{"idAnchor":"Algebra.Group.html#5853","idDesc":null,"idIdent":"Group-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Group.html#5926","idDesc":null,"idIdent":"has-is-group","idType":"(r : Group-on A) → is-group (r ._⋆_)"},{"idAnchor":"Algebra.Group.html#5990","idDesc":null,"idIdent":"_⁻¹","idType":"(r : Group-on A) → A → A"},{"idAnchor":"Algebra.Group.html#1073","idDesc":null,"idIdent":"has-is-monoid","idType":"(r : is-group _*₁_) → is-monoid (r .unit) _*₁_"},{"idAnchor":"Algebra.Group.html#1387","idDesc":null,"idIdent":"inverser","idType":"(r : is-group _*₁_) → (x *₁ r .inverse x) ≡ r .unit"},{"idAnchor":"Algebra.Group.html#1675","idDesc":null,"idIdent":"inv-inv","idType":"(r : is-group _*₁_) → inverse r (inverse r x) ≡ x"},{"idAnchor":"Algebra.Group.html#9972","idDesc":null,"idIdent":"group-str","idType":"(X : Set ℓ) → Group-on (∣ X ∣ ≃ ∣ X ∣)"},{"idAnchor":"Algebra.Group.html#1060","idDesc":null,"idIdent":"unit","idType":"is-group _*₁_ → A"},{"idAnchor":"Algebra.Group.html#6472","idDesc":null,"idIdent":"pres-⋆","idType":"Group-hom A B₁ e →\n(x y : A .fst) → e (A .snd ._⋆_ x y) ≡ B₁ .snd ._⋆_ (e x) (e y)"},{"idAnchor":"Algebra.Group.html#1341","idDesc":null,"idIdent":"inversel","idType":"(r : is-group _*₁_) → (r .inverse x *₁ x) ≡ r .unit"},{"idAnchor":"Algebra.Group.html#971","idDesc":null,"idIdent":"is-group","idType":"(_*₁_ : A → A → A) → Type ℓ"},{"idAnchor":"Algebra.Group.html#5297","idDesc":null,"idIdent":"H-Level-is-group","idType":"H-Level (is-group _+₁_) (suc n)"},{"idAnchor":"Algebra.Group.html#6087","idDesc":null,"idIdent":"Group","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Group.html#2902","idDesc":null,"idIdent":"is-group-is-prop","idType":"is-prop (is-group _*₁_)"},{"idAnchor":"Algebra.Group.html#3306","idDesc":null,"idIdent":"same-unit","idType":"(x y : is-group _*₁_) → x .unit ≡ y .unit"},{"idAnchor":"Algebra.Group.html#4791","idDesc":null,"idIdent":"same-invr","idType":"(x y : is-group _*₁_) (e : A) →\nSquare (λ i → ap₂ _*₁_ refl (same-inverses x y e) i) (x .inverser)\n(y .inverser) (λ i → same-unit x y i)"},{"idAnchor":"Algebra.Group.html#1802","idDesc":null,"idIdent":"inv-comm","idType":"(r : is-group _*₁_) → inverse r (x *₁ y) ≡ (r — inverse r y) x"},{"idAnchor":"Algebra.Group.html#7941","idDesc":null,"idIdent":"Group≃","idType":"(A B₁ : Group ℓ) → A .fst ≃ B₁ .fst → Type ℓ"},{"idAnchor":"Algebra.Group.html#11356","idDesc":null,"idIdent":"is-abelian-group","idType":"Group ℓ → Type ℓ"},{"idAnchor":"Algebra.Group.html#8041","idDesc":null,"idIdent":"Group[_⇒_]","idType":"Group ℓ → Group ℓ → Type ℓ"},{"idAnchor":"Algebra.Group.html#5906","idDesc":null,"idIdent":"_⋆_","idType":"Group-on A → A → A → A"},{"idAnchor":"Algebra.Group.html#6646","idDesc":null,"idIdent":"1B","idType":"(r : Group-hom A B₁ e) → B₁ .fst"},{"idAnchor":"Algebra.Group.html#3675","idDesc":null,"idIdent":"same-monoid","idType":"(x y : is-group _*₁_) →\nPathP (λ i → is-monoid (same-unit x y i) _*₁_) (x .has-is-monoid)\n(y .has-is-monoid)"},{"idAnchor":"Algebra.Group.html#5073","idDesc":null,"idIdent":"path","idType":"(x y : is-group _*₁_) → x ≡ y"},{"idAnchor":"Algebra.Group.html#7652","idDesc":null,"idIdent":"H-Level-group-hom","idType":"H-Level (Group-hom G H f) (suc n)"},{"idAnchor":"Algebra.Group.html#6293","idDesc":null,"idIdent":"Group-hom","idType":"(A : Group ℓ) (B₁ : Group ℓ′) (e : A .fst → B₁ .fst) →\nType (ℓ ⊔ ℓ′)"},{"idAnchor":"Algebra.Group.html#6630","idDesc":null,"idIdent":"1A","idType":"(r : Group-hom A B₁ e) → A .fst"},{"idAnchor":"Algebra.Group.html#4158","idDesc":null,"idIdent":"same-inverses","idType":"(x y : is-group _*₁_) (e : A) → x .inverse e ≡ y .inverse e"},{"idAnchor":"Algebra.Group.html#8995","idDesc":null,"idIdent":"r","idType":"(gset : is-set G) (id₁ : G) (star : G → G → G) (inv₁ : G → G)\n(assoc₁ : (x y z : G) → star (star x y) z ≡ star x (star y z))\n(invl₁ : (x : G) → star (inv₁ x) x ≡ id₁)\n(invr₁ : (x : G) → star x (inv₁ x) ≡ id₁)\n(g-idl : (x : G) → star id₁ x ≡ x) →\nGroup-on G"},{"idAnchor":"Algebra.Group.html#7208","idDesc":null,"idIdent":"pres-diff","idType":"(r : Group-hom A B₁ e) → e ((A .snd — x) y) ≡ (B₁ .snd — e x) (e y)"},{"idAnchor":"Algebra.Group.html#8240","idDesc":null,"idIdent":"Group-univalent","idType":"is-univalent (HomT→Str Group≃)"},{"idAnchor":"Algebra.Group.html#2364","idDesc":null,"idIdent":"underlying-monoid","idType":"(r : is-group _*₁_) → Monoid ℓ"},{"idAnchor":"Algebra.Group.html#1320","idDesc":null,"idIdent":"inverse","idType":"is-group _*₁_ → A → A"},{"idAnchor":"Algebra.Group.html#9845","idDesc":null,"idIdent":"Sym","idType":"Set ℓ → Group ℓ"},{"idAnchor":"Algebra.Group.html#7424","idDesc":null,"idIdent":"Group-hom-is-prop","idType":"is-prop (Group-hom G H f)"},{"idAnchor":"Algebra.Group.html#1488","idDesc":null,"idIdent":"_—_","idType":"(r : is-group _*₁_) → A → A → A"},{"idAnchor":"Algebra.Group.html#8684","idDesc":null,"idIdent":"make-group","idType":"is-set G →\n(unit : G) (_⋆₁_ : G → G → G) (inv₁ : G → G) →\n((x y z : G) → ((x ⋆₁ y) ⋆₁ z) ≡ (x ⋆₁ (y ⋆₁ z))) →\n((x : G) → (inv₁ x ⋆₁ x) ≡ unit) →\n((x : G) → (x ⋆₁ inv₁ x) ≡ unit) →\n((x : G) → (unit ⋆₁ x) ≡ x) → Group-on G"},{"idAnchor":"Algebra.Group.html#4600","idDesc":null,"idIdent":"same-invl","idType":"(x y : is-group _*₁_) (e : A) →\nSquare (λ i → ap₂ _*₁_ (same-inverses x y e) refl i) (x .inversel)\n(y .inversel) (λ i → same-unit x y i)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#3632","idDesc":null,"idIdent":"is-reflective→counit-iso","idType":"(adj : F ⊣ G) → is-reflective adj → (Cat[ D , D ] ≅ (F F∘ G)) Id"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#6200","idDesc":null,"idIdent":"Fo→o","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) (ob : Ob C)\n(alg : Algebra-on C (L∘R adj) ob) →\nAlgebra-hom C (L∘R adj) (₀ (Comp adj g-ff) (₀ F ob)) (ob , alg)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#6121","idDesc":null,"idIdent":"comp-seso","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nis-split-eso (Comp adj g-ff)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#6670","idDesc":null,"idIdent":"isom","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) (ob : Ob C)\n(alg : Algebra-on C (L∘R adj) ob) →\n(Eilenberg-Moore C (L∘R adj) ≅ ₀ (Comp adj g-ff) (₀ F ob))\n(ob , alg)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#2280","idDesc":null,"idIdent":"is-reflective→counit-is-iso","idType":"(adj : F ⊣ G) → is-reflective adj → (D ≅ F₀ F (F₀ G o)) o"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#5254","idDesc":null,"idIdent":"Tunit≡unitT","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nη adj (₀ G (₀ F x)) ≡ ₁ G (₁ F (η adj x))"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#2672","idDesc":null,"idIdent":"morp","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) → (D ≅ ₀ F (₀ G o)) o"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#1855","idDesc":null,"idIdent":"is-reflective","idType":"F ⊣ G → Type (G.h₂ ⊔ G.o₁ ⊔ G.h₁)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#6332","idDesc":null,"idIdent":"o→Fo","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) (ob : Ob C)\n(alg : Algebra-on C (L∘R adj) ob) →\nAlgebra-hom C (L∘R adj) (ob , alg) (₀ (Comp adj g-ff) (₀ F ob))"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#3207","idDesc":null,"idIdent":"invr","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nD ._∘_ (equiv→inverse g-ff (η adj (₀ G o))) (ε adj o) ≡ D .id"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#7001","idDesc":null,"idIdent":"eqv","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nis-equivalence (Comp adj g-ff)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#4976","idDesc":null,"idIdent":"comp-ff","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nis-fully-faithful (Comp adj g-ff)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#5076","idDesc":null,"idIdent":"isom","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nis-iso (F₁ (Comp adj g-ff))"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#3997","idDesc":null,"idIdent":"invs","idType":"(adj : F ⊣ G) (ff : is-reflective adj) →\nis-invertible Cat[ D , D ] (adj .counit)"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#4630","idDesc":null,"idIdent":"Comp","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nFunctor D (Eilenberg-Moore C (L∘R adj))"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#4199","idDesc":null,"idIdent":"is-reflective→is-monadic","idType":"(adj : F ⊣ G) → is-reflective adj → is-monadic adj"},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#2795","idDesc":null,"idIdent":"invl","idType":"(adj : F ⊣ G) (g-ff : is-reflective adj) →\nD ._∘_ (ε adj o) (equiv→inverse g-ff (η adj (₀ G o))) ≡ D .id"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3926","idDesc":null,"idIdent":"p","idType":"is-product (Groups ℓ) proj₁ proj₂"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#7283","idDesc":null,"idIdent":"Groups-equalisers","idType":"(f g : Hom G H) → Equaliser (Groups ℓ) f g"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#8428","idDesc":null,"idIdent":"top","idType":"Terminal (Groups ℓ)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6173","idDesc":null,"idIdent":"r","idType":"(f g : Hom G H) (a : ∣ underlying-set (has-is-group (G .snd)) ∣)\n(p : fst f a ≡ fst g a)\n(b : ∣ underlying-set (has-is-group (G .snd)) ∣)\n(q : fst f b ≡ fst g b) →\nf .fst (G .snd ._⋆_ a b) ≡ g .fst (G .snd ._⋆_ a b)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2726","idDesc":null,"idIdent":"Direct-product","idType":"Group ℓ → Group ℓ → Group ℓ"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3803","idDesc":null,"idIdent":"Direct-product-is-product","idType":"is-product (Groups ℓ) proj₁ proj₂"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6388","idDesc":null,"idIdent":"q","idType":"(f g : Hom G H) (x : ∣ underlying-set (has-is-group (G .snd)) ∣)\n(p : fst f x ≡ fst g x) →\nf .fst (inverse (G .snd) x) ≡ g .fst (inverse (G .snd) x)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3099","idDesc":null,"idIdent":".extendedlambda1","idType":"(G : Type ℓ) →\nGroup-on G → (H : Type ℓ) → Group-on H → G × H → G × H"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6296","idDesc":null,"idIdent":"equ-inv","idType":"(f g : Hom G H) →\n∣ Sets-equalisers (fst f) (fst g) .apex ∣ →\n∣ Sets-equalisers (fst f) (fst g) .apex ∣"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2416","idDesc":null,"idIdent":"∅ᴳ","idType":"Zero (Groups ℓ)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3515","idDesc":null,"idIdent":"proj₂","idType":"Hom (Direct-product G H) H"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#7653","idDesc":null,"idIdent":"lim-gh","idType":"(f g : Hom G H) (p : (Groups ℓ ∘ f) e′ ≡ (Groups ℓ ∘ g) e′) →\nGroup-hom F (Equaliser-group f g) (map f g p)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3051","idDesc":null,"idIdent":".extendedlambda0","idType":"(G : Type ℓ) →\nGroup-on G → (H : Type ℓ) → Group-on H → G × H → G × H → G × H"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#1494","idDesc":null,"idIdent":"Zero-group","idType":"Group ℓ"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3605","idDesc":null,"idIdent":"factor","idType":"Hom G H → Hom G K → Hom G (Direct-product H K)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2893","idDesc":null,"idIdent":"gh-set","idType":"(G : Type ℓ) (Gg : Group-on G) (H : Type ℓ) (Hg : Group-on H) →\nis-set (G × H)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3137","idDesc":null,"idIdent":".extendedlambda2","idType":"(G : Type ℓ) (Gg : Group-on G) (H : Type ℓ) (Hg : Group-on H)\n(x y z : G × H) →\n(λ { (a , b) (x , y) → Gg ._⋆_ a x , (Hg ⋆ b) y })\n(.extendedlambda0 G Gg H Hg x y) z\n≡\n(λ { (a , b) (x , y) → Gg ._⋆_ a x , (Hg ⋆ b) y }) x\n(.extendedlambda0 G Gg H Hg y z)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#8279","idDesc":null,"idIdent":"Groups-finitely-complete","idType":"Finitely-complete (Groups ℓ)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#7588","idDesc":null,"idIdent":"map","idType":"(f g : Hom G H) (p : (Groups ℓ ∘ f) e′ ≡ (Groups ℓ ∘ g) e′) →\nHom (Sets ℓ)\n(underlying-set (has-is-monoid (has-is-group (F .snd))))\n(Sets-equalisers (fst f) (fst g) .apex)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#1829","idDesc":null,"idIdent":"gh","idType":"(fst₁ : Type ℓ) (G : Group-on fst₁) →\nGroup-hom Zero-group (fst₁ , G) (λ x → unit G)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6509","idDesc":null,"idIdent":"invs","idType":"(f g : Hom G H) → f .fst (unit (G .snd)) ≡ g .fst (unit (G .snd))"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6670","idDesc":null,"idIdent":"equ-group","idType":"(f g : Hom G H) →\nGroup-on ∣ Sets-equalisers (fst f) (fst g) .apex ∣"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#1691","idDesc":null,"idIdent":"Zero-group-is-initial","idType":"is-initial (Groups ℓ) Zero-group"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#5989","idDesc":null,"idIdent":"Equaliser-group","idType":"(f g : Hom G H) → Group ℓ"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#4706","idDesc":null,"idIdent":"inj₂","idType":"H ↪ Direct-product G H"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2051","idDesc":null,"idIdent":"Zero-group-is-terminal","idType":"is-terminal (Groups ℓ) Zero-group"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#6059","idDesc":null,"idIdent":"equ-⋆","idType":"(f g : Hom G H) →\n∣ Sets-equalisers (fst f) (fst g) .apex ∣ →\n∣ Sets-equalisers (fst f) (fst g) .apex ∣ →\n∣ Sets-equalisers (fst f) (fst g) .apex ∣"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#8531","idDesc":null,"idIdent":"prod","idType":"(A B₁ : Ob (Groups ℓ)) → Product (Groups ℓ) A B₁"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2973","idDesc":null,"idIdent":"G×Hg","idType":"(G : Type ℓ) (Gg : Group-on G) (H : Type ℓ) (Hg : Group-on H) →\nGroup-on (G × H)"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#3425","idDesc":null,"idIdent":"proj₁","idType":"Hom (Direct-product G H) G"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#4477","idDesc":null,"idIdent":"inj₁","idType":"G ↪ Direct-product G H"},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#2255","idDesc":null,"idIdent":"Zero-group-is-zero","idType":"is-zero (Groups ℓ) Zero-group"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#5183","idDesc":null,"idIdent":"adj","idType":"(cocompl : is-cocomplete κ κ C) (F : Functor D C) →\nRealisation cocompl F ⊣ Nerve F"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#3659","idDesc":null,"idIdent":"Realisation⊣Nerve","idType":"(cocompl : is-cocomplete κ κ C) (F : Functor D C) →\nRealisation cocompl F ⊣ Nerve F"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#6771","idDesc":null,"idIdent":"cocone₂","idType":"(cocompl : is-cocomplete κ κ C) (F : Functor D C) (x y : C .Ob)\n(f : C .Hom x y) →\nCocone (F F∘ Dom (よ D) (const! (Nerve F .F₀ x)))"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#5665","idDesc":null,"idIdent":"obj′","idType":"(cocompl : is-cocomplete κ κ C) (F : Functor D C) (P : PSh κ D .Ob)\n(x y : (D ^op) .Ob) (f : (D ^op) .Hom x y) (arg₁ : ∣ P .F₀ x ∣) →\n↓Obj (よ D) (const! P)"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#4504","idDesc":null,"idIdent":"cocone′","idType":"is-cocomplete κ κ C →\n(F : Functor D C) (ob : C .Ob) →\nCocone (F F∘ Dom (よ D) (const! (Nerve F .F₀ ob)))"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#4226","idDesc":null,"idIdent":"hom′","idType":"(cocompl : is-cocomplete κ κ C) (F : Functor D C)\n(P : Functor (D ^op) (Sets κ)) (i : D .Ob) (arg₁ : ∣ P .F₀ i ∣) →\n↓Obj (よ D) (const! P)"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#3522","idDesc":null,"idIdent":"Realisation","idType":"is-cocomplete κ κ C → Functor D C → Functor (PSh κ D) C"},{"idAnchor":"Cat.Functor.Kan.Nerve.html#2735","idDesc":null,"idIdent":"Nerve","idType":"Functor D C → Functor C (PSh κ D)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#9929","idDesc":null,"idIdent":"functor-colimit","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nColimit F"},{"idAnchor":"Cat.Instances.Functor.Limits.html#2188","idDesc":null,"idIdent":"!-for-unique","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ])\n(h\n : Cone-hom (Left (F-uncurried has-D-lims F) x) K\n   (has-D-lims (Left (F-uncurried has-D-lims F) x) .top)) →\n!-for has-D-lims F K ≡ h"},{"idAnchor":"Cat.Instances.Functor.Limits.html#9052","idDesc":null,"idIdent":"hom'","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ])\n(h : Cone-hom F K (functor-cone has-D-lims F)) →\nCone-hom (Left (F-uncurried has-D-lims F) x)\n(Lift-cone has-D-lims F K (E .id))\n(has-D-lims (Left (F-uncurried has-D-lims F) x) .top)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#10503","idDesc":null,"idIdent":"colim","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nColimit F"},{"idAnchor":"Cat.Instances.Functor.Limits.html#6691","idDesc":null,"idIdent":"map","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (K : Cone F) (x : E .Ob) →\nCone-hom (Left (F-uncurried has-D-lims F) x)\n(Lift-cone has-D-lims F K (E .id)) (lim-for has-D-lims F x)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#2039","idDesc":null,"idIdent":"lim-for","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (x : E .Ob) →\nCone (Left (F-uncurried has-D-lims F) x)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#3353","idDesc":null,"idIdent":"map-cone","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nE .Hom x y → Cone (Left (F-uncurried has-D-lims F) y)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#4640","idDesc":null,"idIdent":"map","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nCone-hom (Left (F-uncurried has-D-lims F) x)\n(map-cone has-D-lims F (E .id))\n(has-D-lims (Left (F-uncurried has-D-lims F) x) .top)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#6618","idDesc":null,"idIdent":"functor-!","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (K : Cone F) →\nCone-hom F K (functor-cone has-D-lims F)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#10223","idDesc":null,"idIdent":"LF′′","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nLimit (op-functor← F∘ op-functor→ F∘ op F)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#1671","idDesc":null,"idIdent":"F-uncurried","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nFunctor (D ×ᶜ E) C"},{"idAnchor":"Cat.Instances.Functor.Limits.html#4262","idDesc":null,"idIdent":"functor-cone","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nCone F"},{"idAnchor":"Cat.Instances.Functor.Limits.html#8075","idDesc":null,"idIdent":"h2","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (K : Cone F) (x y : E .Ob)\n(f : E .Hom x y) →\nCone-hom (Left (F-uncurried has-D-lims F) y)\n(Lift-cone has-D-lims F K f) (lim-for has-D-lims F y)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#4821","idDesc":null,"idIdent":"map","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (f : E .Hom y z) (g : E .Hom x y) →\nCone-hom (Left (F-uncurried has-D-lims F) z)\n(map-cone has-D-lims F (E ._∘_ f g))\n(has-D-lims (Left (F-uncurried has-D-lims F) z) .top)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#2683","idDesc":null,"idIdent":"Lift-cone","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nCone F → E .Hom x y → Cone (Left (F-uncurried has-D-lims F) y)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#10077","idDesc":null,"idIdent":"F′-lim","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nLimit (F′ has-D-colims F)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#9993","idDesc":null,"idIdent":"F′","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nFunctor (D ^op) Cat[ E ^op , C ^op ]"},{"idAnchor":"Cat.Instances.Functor.Limits.html#2106","idDesc":null,"idIdent":"!-for","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ])\n(K : Cones (Left (F-uncurried has-D-lims F) x) .Ob) →\nCone-hom (Left (F-uncurried has-D-lims F) x) K\n(has-D-lims (Left (F-uncurried has-D-lims F) x) .top)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#9492","idDesc":null,"idIdent":"Functor-cat-is-complete","idType":"is-complete o ℓ D → is-complete o ℓ Cat[ C , D ]"},{"idAnchor":"Cat.Instances.Functor.Limits.html#10385","idDesc":null,"idIdent":"LFop","idType":"(has-D-colims : (F : Functor D C) → Colimit F)\n(F : Functor D Cat[ E , C ]) →\nLimit (op F)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#9216","idDesc":null,"idIdent":"functor-limit","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nLimit F"},{"idAnchor":"Cat.Instances.Functor.Limits.html#8878","idDesc":null,"idIdent":"functor-!-unique","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ])\n(h : Cone-hom F K (functor-cone has-D-lims F)) →\nfunctor-! has-D-lims F K ≡ h"},{"idAnchor":"Cat.Instances.Functor.Limits.html#6797","idDesc":null,"idIdent":"ch","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (K : Cone F) →\nCone-hom F K (functor-cone has-D-lims F)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#7549","idDesc":null,"idIdent":"h1","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) (K : Cone F) (x y : E .Ob)\n(f : E .Hom x y) →\nCone-hom (Left (F-uncurried has-D-lims F) y)\n(Lift-cone has-D-lims F K f) (lim-for has-D-lims F y)"},{"idAnchor":"Cat.Instances.Functor.Limits.html#4327","idDesc":null,"idIdent":"the-apex","idType":"(has-D-lims : (F : Functor D C) → Limit F)\n(F : Functor D Cat[ E , C ]) →\nFunctor E C"},{"idAnchor":"Cat.Instances.Functor.Limits.html#10558","idDesc":null,"idIdent":"Functor-cat-is-cocomplete","idType":"is-cocomplete o ℓ D → is-cocomplete o ℓ Cat[ C , D ]"},{"idAnchor":"1Lab.Equiv.Embedding.html#4172","idDesc":null,"idIdent":"is-embedding","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Equiv.Embedding.html#2117","idDesc":null,"idIdent":"between-sets-injective≃has-prop-fibres","idType":"is-set A →\nis-set B₁ →\n(f : A → B₁) → injective f ≃ ((x : B₁) → is-prop (fibre f x))"},{"idAnchor":"1Lab.Equiv.Embedding.html#1491","idDesc":null,"idIdent":"injective-between-sets→has-prop-fibres","idType":"is-set B₁ →\n(f : A → B₁) → injective f → (x : B₁) → is-prop (fibre f x)"},{"idAnchor":"1Lab.Equiv.Embedding.html#1419","idDesc":null,"idIdent":"injective","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Equiv.Embedding.html#1956","idDesc":null,"idIdent":"has-prop-fibres→injective","idType":"(f : A → B₁) → ((x : B₁) → is-prop (fibre f x)) → injective f"},{"idAnchor":"1Lab.Equiv.Embedding.html#4527","idDesc":null,"idIdent":"subtype-classifier","idType":"Σ (λ A → A ↣ B₁) ≃ (B₁ → Σ is-prop)"},{"idAnchor":"1Lab.Equiv.Embedding.html#4248","idDesc":null,"idIdent":"_↪_","idType":"Type ℓ → Type ℓ₁ → Type (ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Equiv.Embedding.html#5508","idDesc":null,"idIdent":"monic-between-sets→is-embedding","idType":"is-set B₁ →\n((g h : ∣ C ∣ → A) → f ⊙ g ≡ f ⊙ h → g ≡ h) → is-embedding f"},{"idAnchor":"1Lab.Equiv.Embedding.html#5253","idDesc":null,"idIdent":"embedding→monic","idType":"is-embedding f → (g h : C → A) → f ⊙ g ≡ f ⊙ h → g ≡ h"},{"idAnchor":"1Lab.Equiv.Embedding.html#5051","idDesc":null,"idIdent":"Subset-proj-embedding","idType":"((x : A) → is-prop (B₁ x)) → is-embedding fst"},{"idAnchor":"Cat.Instances.Shape.Join.html#1192","idDesc":null,"idIdent":"iss","idType":"(C : Precategory o ℓ) (D : Precategory o′ ℓ′) →\n(C ⋆ D) .Ob → (C ⋆ D) .Ob → (x y : ⋆Ob C D) → is-set (⋆Hom C D x y)"},{"idAnchor":"Cat.Instances.Shape.Join.html#559","idDesc":null,"idIdent":"⋆Hom","idType":"(C : Precategory o ℓ) (D : Precategory o′ ℓ′) →\n⋆Ob C D → ⋆Ob C D → Type (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Instances.Shape.Join.html#516","idDesc":null,"idIdent":"⋆Ob","idType":"(C : Precategory o ℓ) → Precategory o′ ℓ′ → Type (o ⊔ o′)"},{"idAnchor":"Cat.Instances.Shape.Join.html#768","idDesc":null,"idIdent":"⋆compose","idType":"(C : Precategory o ℓ) (D : Precategory o′ ℓ′) →\n⋆Hom C D B₁ C₁ → ⋆Hom C D A B₁ → ⋆Hom C D A C₁"},{"idAnchor":"Cat.Instances.Shape.Join.html#1097","idDesc":null,"idIdent":"_⋆_","idType":"(C : Precategory o ℓ) (D : Precategory o′ ℓ′) →\nPrecategory (o ⊔ o′) (ℓ ⊔ ℓ′)"},{"idAnchor":"Data.Fin.Base.html#5548","idDesc":null,"idIdent":"skip","idType":"Fin (suc n) → Fin n → Fin (suc n)"},{"idAnchor":"Data.Fin.Base.html#523","idDesc":null,"idIdent":"fzero","idType":"Fin (suc n)"},{"idAnchor":"Data.Fin.Base.html#3105","idDesc":null,"idIdent":"distinguish","idType":"(path₁ : fzero ≡ fsuc i) → Fin (suc n) → Type"},{"idAnchor":"Data.Fin.Base.html#7189","idDesc":null,"idIdent":"fshift","idType":"(m : Nat) → Fin n → Fin (m + n)"},{"idAnchor":"Data.Fin.Base.html#7036","idDesc":null,"idIdent":"weaken-≤","idType":"m ≤ n → Fin m → Fin n"},{"idAnchor":"Data.Fin.Base.html#2435","idDesc":null,"idIdent":"weaken","idType":"Fin n → Fin (suc n)"},{"idAnchor":"Data.Fin.Base.html#3415","idDesc":null,"idIdent":"fsuc-inj","idType":"fsuc i ≡ fsuc j → i ≡ j"},{"idAnchor":"Data.Fin.Base.html#1186","idDesc":null,"idIdent":"cast","idType":"m ≡ n → Fin m → Fin n"},{"idAnchor":"Data.Fin.Base.html#4940","idDesc":null,"idIdent":"_<_","idType":"Fin n → Fin n → Type"},{"idAnchor":"Data.Fin.Base.html#2588","idDesc":null,"idIdent":"inject","idType":"m ≤ n → Fin m → Fin n"},{"idAnchor":"Data.Fin.Base.html#4856","idDesc":null,"idIdent":"_≤_","idType":"Fin n → Fin n → Type"},{"idAnchor":"Data.Fin.Base.html#6774","idDesc":null,"idIdent":"from-to-ℕ<","idType":"(x : Fin n) → from-ℕ< (to-ℕ< x) ≡ x"},{"idAnchor":"Data.Fin.Base.html#2077","idDesc":null,"idIdent":"strengthen","idType":"Fin (suc n) → Fin (suc n) ⊎ Fin n"},{"idAnchor":"Data.Fin.Base.html#1786","idDesc":null,"idIdent":"cast-refl-is-equiv","idType":"is-equiv (cast (λ i → n))"},{"idAnchor":"Data.Fin.Base.html#836","idDesc":null,"idIdent":"to-nat","idType":"Fin n → Nat"},{"idAnchor":"Data.Fin.Base.html#6329","idDesc":null,"idIdent":"p","idType":"Fin n → (x : Fin n) → suc (to-nat x) ≤ n"},{"idAnchor":"Data.Fin.Base.html#6442","idDesc":null,"idIdent":"to-from-ℕ<","idType":"(x : ℕ< n) → to-ℕ< (from-ℕ< x) ≡ x"},{"idAnchor":"Data.Fin.Base.html#6267","idDesc":null,"idIdent":"to-ℕ<","idType":"Fin n → ℕ< n"},{"idAnchor":"Data.Fin.Base.html#6139","idDesc":null,"idIdent":"from-ℕ<","idType":"ℕ< n → Fin n"},{"idAnchor":"Data.Fin.Base.html#5374","idDesc":null,"idIdent":"squish","idType":"Fin n → Fin (suc n) → Fin n"},{"idAnchor":"Data.Fin.Base.html#4458","idDesc":null,"idIdent":"H-Level-Fin","idType":"H-Level (Fin n) (2 + k)"},{"idAnchor":"Data.Fin.Base.html#498","idDesc":null,"idIdent":"Fin","idType":"Nat → Type"},{"idAnchor":"Data.Fin.Base.html#6899","idDesc":null,"idIdent":"Fin≃ℕ<","idType":"Fin n ≃ ℕ< n"},{"idAnchor":"Data.Fin.Base.html#4368","idDesc":null,"idIdent":"Fin-is-set","idType":"is-set (Fin n)"},{"idAnchor":"Data.Fin.Base.html#1467","idDesc":null,"idIdent":"cast-is-equiv","idType":"(p : m ≡ n) → is-equiv (cast p)"},{"idAnchor":"Data.Fin.Base.html#6090","idDesc":null,"idIdent":"ℕ<","idType":"Nat → Type"},{"idAnchor":"Data.Fin.Base.html#2989","idDesc":null,"idIdent":"fzero≠fsuc","idType":"fzero ≡ fsuc i → ⊥"},{"idAnchor":"Data.Fin.Base.html#3790","idDesc":null,"idIdent":"Discrete-Fin","idType":"Discrete (Fin n)"},{"idAnchor":"Data.Fin.Base.html#1602","idDesc":null,"idIdent":"id≡cast-refl","idType":"id ≡ cast (λ _ → n)"},{"idAnchor":"Data.Fin.Base.html#6600","idDesc":null,"idIdent":"to-from-ℕ","idType":"(n : Nat) → ℕ< (suc n) → (x : ℕ< n₁) → to-nat (from-ℕ< x) ≡ x .fst"},{"idAnchor":"Data.Fin.Base.html#553","idDesc":null,"idIdent":"fsuc","idType":"Fin n → Fin (suc n)"},{"idAnchor":"Data.Fin.Base.html#739","idDesc":null,"idIdent":"from-nat","idType":"(n : Nat) → Fin (suc n)"},{"idAnchor":"Data.Fin.Base.html#7292","idDesc":null,"idIdent":"opposite","idType":"Fin n → Fin n"},{"idAnchor":"Data.Fin.Base.html#3519","idDesc":null,"idIdent":"pred","idType":"(n : Nat) (p : fsuc i ≡ fsuc j) → Fin (suc (suc n)) → Fin (suc n)"},{"idAnchor":"Agda.Builtin.Reflection.html#462","idDesc":null,"idIdent":"Name","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#4065","idDesc":null,"idIdent":"Literal","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#4223","idDesc":null,"idIdent":"string","idType":"String → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#707","idDesc":null,"idIdent":"right-assoc","idType":"Associativity"},{"idAnchor":"Agda.Builtin.Reflection.html#649","idDesc":null,"idIdent":"Associativity","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#5774","idDesc":null,"idIdent":"clause","idType":"Telescope → List (Arg Pattern) → Term → Clause"},{"idAnchor":"Agda.Builtin.Reflection.html#5387","idDesc":null,"idIdent":"propLit","idType":"Nat → Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#7867","idDesc":null,"idIdent":"ErrorPart","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#4121","idDesc":null,"idIdent":"word64","idType":"Word64 → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#5298","idDesc":null,"idIdent":"set","idType":"Term → Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#595","idDesc":null,"idIdent":"primShowQName","idType":"Name → String"},{"idAnchor":"Agda.Builtin.Reflection.html#8443","idDesc":null,"idIdent":"unify","idType":"Term → Term → TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#4087","idDesc":null,"idIdent":"nat","idType":"Nat → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#5262","idDesc":null,"idIdent":"unknown","idType":"Term"},{"idAnchor":"Agda.Builtin.Reflection.html#2525","idDesc":null,"idIdent":"primMetaLess","idType":"Meta → Meta → Bool"},{"idAnchor":"Agda.Builtin.Reflection.html#9292","idDesc":null,"idIdent":"getDefinition","idType":"Name → TC Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#7285","idDesc":null,"idIdent":"record-type","idType":"Name → List (Arg Name) → Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#10890","idDesc":null,"idIdent":"getInstances","idType":"Meta → TC (List Term)"},{"idAnchor":"Agda.Builtin.Reflection.html#8757","idDesc":null,"idIdent":"quoteTC","idType":"A → TC Term"},{"idAnchor":"Agda.Builtin.Reflection.html#4661","idDesc":null,"idIdent":"Term","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#3706","idDesc":null,"idIdent":"arg","idType":"ArgInfo → A → Arg A"},{"idAnchor":"Agda.Builtin.Reflection.html#4732","idDesc":null,"idIdent":"Type","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#9083","idDesc":null,"idIdent":"freshName","idType":"String → TC Name"},{"idAnchor":"Agda.Builtin.Reflection.html#9209","idDesc":null,"idIdent":"defineFun","idType":"Name → List Clause → TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#5645","idDesc":null,"idIdent":"proj","idType":"Name → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#4806","idDesc":null,"idIdent":"var","idType":"Nat → List (Arg Term) → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#9413","idDesc":null,"idIdent":"isMacro","idType":"Name → TC Bool"},{"idAnchor":"Agda.Builtin.Reflection.html#8546","idDesc":null,"idIdent":"inferType","idType":"Term → TC Type"},{"idAnchor":"Agda.Builtin.Reflection.html#5328","idDesc":null,"idIdent":"lit","idType":"Nat → Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#10312","idDesc":null,"idIdent":"dontReduceDefs","idType":"List Name → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#5177","idDesc":null,"idIdent":"lit","idType":"Literal → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#677","idDesc":null,"idIdent":"left-assoc","idType":"Associativity"},{"idAnchor":"Agda.Builtin.Reflection.html#3002","idDesc":null,"idIdent":"irrelevant","idType":"Relevance"},{"idAnchor":"Agda.Builtin.Reflection.html#7178","idDesc":null,"idIdent":"function","idType":"List Clause → Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#771","idDesc":null,"idIdent":"Precedence","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#8363","idDesc":null,"idIdent":"bindTC","idType":"TC A → (A → TC B₁) → TC B₁"},{"idAnchor":"Agda.Builtin.Reflection.html#3437","idDesc":null,"idIdent":"modality","idType":"Relevance → Quantity → Modality"},{"idAnchor":"Agda.Builtin.Reflection.html#4744","idDesc":null,"idIdent":"Telescope","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#3181","idDesc":null,"idIdent":"Quantity","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#9256","idDesc":null,"idIdent":"getType","idType":"Name → TC Type"},{"idAnchor":"Agda.Builtin.Reflection.html#5094","idDesc":null,"idIdent":"pi","idType":"Arg Type → Abs Type → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#513","idDesc":null,"idIdent":"primQNameEquality","idType":"Name → Name → Bool"},{"idAnchor":"Agda.Builtin.Reflection.html#5445","idDesc":null,"idIdent":"unknown","idType":"Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#9387","idDesc":null,"idIdent":"commitTC","idType":"TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#4919","idDesc":null,"idIdent":"def","idType":"Name → List (Arg Term) → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#2711","idDesc":null,"idIdent":"Visibility","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#3414","idDesc":null,"idIdent":"Modality","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#2347","idDesc":null,"idIdent":"primQNameToWord64s","idType":"Name → ∑ Word64 (λ _ → Word64)"},{"idAnchor":"Agda.Builtin.Reflection.html#5575","idDesc":null,"idIdent":"var","idType":"Nat → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#7415","idDesc":null,"idIdent":"prim-fun","idType":"Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#796","idDesc":null,"idIdent":"related","idType":"Float → Precedence"},{"idAnchor":"Agda.Builtin.Reflection.html#7891","idDesc":null,"idIdent":"strErr","idType":"String → ErrorPart"},{"idAnchor":"Agda.Builtin.Reflection.html#8582","idDesc":null,"idIdent":"checkType","idType":"Term → Type → TC Term"},{"idAnchor":"Agda.Builtin.Reflection.html#8483","idDesc":null,"idIdent":"typeError","idType":"List ErrorPart → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#2431","idDesc":null,"idIdent":"Meta","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#3953","idDesc":null,"idIdent":"abs","idType":"String → A → Abs A"},{"idAnchor":"Agda.Builtin.Reflection.html#3917","idDesc":null,"idIdent":"Abs","idType":"Type a → Type a"},{"idAnchor":"Agda.Builtin.Reflection.html#737","idDesc":null,"idIdent":"non-assoc","idType":"Associativity"},{"idAnchor":"Agda.Builtin.Reflection.html#5540","idDesc":null,"idIdent":"dot","idType":"Term → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#4257","idDesc":null,"idIdent":"name","idType":"Name → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#7388","idDesc":null,"idIdent":"axiom","idType":"Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#8313","idDesc":null,"idIdent":"returnTC","idType":"A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#10468","idDesc":null,"idIdent":"noConstraints","idType":"TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#7922","idDesc":null,"idIdent":"termErr","idType":"Term → ErrorPart"},{"idAnchor":"Agda.Builtin.Reflection.html#4291","idDesc":null,"idIdent":"meta","idType":"Meta → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#5029","idDesc":null,"idIdent":"pat-lam","idType":"List Clause → List (Arg Term) → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#5416","idDesc":null,"idIdent":"inf","idType":"Nat → Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#2313","idDesc":null,"idIdent":"primQNameFixity","idType":"Name → Fixity"},{"idAnchor":"Agda.Builtin.Reflection.html#2485","idDesc":null,"idIdent":"primMetaEquality","idType":"Meta → Meta → Bool"},{"idAnchor":"Agda.Builtin.Reflection.html#554","idDesc":null,"idIdent":"primQNameLess","idType":"Name → Name → Bool"},{"idAnchor":"Agda.Builtin.Reflection.html#7153","idDesc":null,"idIdent":"Definition","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#9018","idDesc":null,"idIdent":"inContext","idType":"Telescope → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#7348","idDesc":null,"idIdent":"data-cons","idType":"Name → Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#8945","idDesc":null,"idIdent":"extendContext","idType":"String → Arg Type → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#9602","idDesc":null,"idIdent":"withNormalisation","idType":"Bool → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#2744","idDesc":null,"idIdent":"hidden","idType":"Visibility"},{"idAnchor":"Agda.Builtin.Reflection.html#8270","idDesc":null,"idIdent":"TC","idType":"Type a → Type a"},{"idAnchor":"Agda.Builtin.Reflection.html#8863","idDesc":null,"idIdent":"quoteωTC","idType":"A → TC Term"},{"idAnchor":"Agda.Builtin.Reflection.html#3215","idDesc":null,"idIdent":"quantity-ω","idType":"Quantity"},{"idAnchor":"Agda.Builtin.Reflection.html#3611","idDesc":null,"idIdent":"arg-info","idType":"Visibility → Modality → ArgInfo"},{"idAnchor":"Agda.Builtin.Reflection.html#858","idDesc":null,"idIdent":"Fixity","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#7951","idDesc":null,"idIdent":"pattErr","idType":"Pattern → ErrorPart"},{"idAnchor":"Agda.Builtin.Reflection.html#4699","idDesc":null,"idIdent":"Pattern","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#4680","idDesc":null,"idIdent":"Sort","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#10024","idDesc":null,"idIdent":"debugPrint","idType":"String → Nat → List ErrorPart → TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#3589","idDesc":null,"idIdent":"ArgInfo","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#2600","idDesc":null,"idIdent":"primMetaToNat","idType":"Meta → Nat"},{"idAnchor":"Agda.Builtin.Reflection.html#5357","idDesc":null,"idIdent":"prop","idType":"Term → Sort"},{"idAnchor":"Agda.Builtin.Reflection.html#2969","idDesc":null,"idIdent":"Relevance","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#5212","idDesc":null,"idIdent":"meta","idType":"Meta → List (Arg Term) → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#4976","idDesc":null,"idIdent":"lam","idType":"Visibility → Abs Term → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#829","idDesc":null,"idIdent":"unrelated","idType":"Precedence"},{"idAnchor":"Agda.Builtin.Reflection.html#2565","idDesc":null,"idIdent":"primShowMeta","idType":"Meta → String"},{"idAnchor":"Agda.Builtin.Reflection.html#4189","idDesc":null,"idIdent":"char","idType":"Char → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#2751","idDesc":null,"idIdent":"instance′","idType":"Visibility"},{"idAnchor":"Agda.Builtin.Reflection.html#879","idDesc":null,"idIdent":"fixity","idType":"Associativity → Precedence → Fixity"},{"idAnchor":"Agda.Builtin.Reflection.html#8625","idDesc":null,"idIdent":"normalise","idType":"Term → TC Term"},{"idAnchor":"Agda.Builtin.Reflection.html#8911","idDesc":null,"idIdent":"getContext","idType":"TC Telescope"},{"idAnchor":"Agda.Builtin.Reflection.html#8810","idDesc":null,"idIdent":"unquoteTC","idType":"Term → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#8661","idDesc":null,"idIdent":"reduce","idType":"Term → TC Term"},{"idAnchor":"Agda.Builtin.Reflection.html#10162","idDesc":null,"idIdent":"onlyReduceDefs","idType":"List Name → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#2993","idDesc":null,"idIdent":"relevant","idType":"Relevance"},{"idAnchor":"Agda.Builtin.Reflection.html#7226","idDesc":null,"idIdent":"data-type","idType":"Nat → List Name → Definition"},{"idAnchor":"Agda.Builtin.Reflection.html#5856","idDesc":null,"idIdent":"absurd-clause","idType":"Telescope → List (Arg Pattern) → Clause"},{"idAnchor":"Agda.Builtin.Reflection.html#9807","idDesc":null,"idIdent":"withReconstructed","idType":"TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#10695","idDesc":null,"idIdent":"runSpeculative","idType":"TC (∑ A (λ _ → Bool)) → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#9121","idDesc":null,"idIdent":"declareDef","idType":"Arg Name → Type → TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#5680","idDesc":null,"idIdent":"absurd","idType":"Nat → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#5482","idDesc":null,"idIdent":"con","idType":"Name → List (Arg Pattern) → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#9165","idDesc":null,"idIdent":"declarePostulate","idType":"Arg Name → Type → TC ⊤"},{"idAnchor":"Agda.Builtin.Reflection.html#8697","idDesc":null,"idIdent":"catchTC","idType":"TC A → TC A → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#4862","idDesc":null,"idIdent":"con","idType":"Name → List (Arg Term) → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#2736","idDesc":null,"idIdent":"visible","idType":"Visibility"},{"idAnchor":"Agda.Builtin.Reflection.html#9862","idDesc":null,"idIdent":"formatErrorParts","idType":"List ErrorPart → TC String"},{"idAnchor":"Agda.Builtin.Reflection.html#4155","idDesc":null,"idIdent":"float","idType":"Float → Literal"},{"idAnchor":"Agda.Builtin.Reflection.html#9334","idDesc":null,"idIdent":"blockOnMeta","idType":"Meta → TC A"},{"idAnchor":"Agda.Builtin.Reflection.html#7983","idDesc":null,"idIdent":"nameErr","idType":"Name → ErrorPart"},{"idAnchor":"Agda.Builtin.Reflection.html#5145","idDesc":null,"idIdent":"agda-sort","idType":"Sort → Term"},{"idAnchor":"Agda.Builtin.Reflection.html#3204","idDesc":null,"idIdent":"quantity-0","idType":"Quantity"},{"idAnchor":"Agda.Builtin.Reflection.html#5610","idDesc":null,"idIdent":"lit","idType":"Literal → Pattern"},{"idAnchor":"Agda.Builtin.Reflection.html#4718","idDesc":null,"idIdent":"Clause","idType":"Type"},{"idAnchor":"Agda.Builtin.Reflection.html#3670","idDesc":null,"idIdent":"Arg","idType":"Type a → Type a"},{"idAnchor":"Cat.Instances.Comma.html#2621","idDesc":null,"idIdent":"β","idType":"↓Hom F G a b → Hom B₁ (a .y) (y b)"},{"idAnchor":"Cat.Instances.Comma.html#3533","idDesc":null,"idIdent":"↓Obj-path","idType":"(F : Functor A C) (G : Functor B₁ C) (p : a .x ≡ b .x)\n(q : a .y ≡ b .y) →\nPathP (λ i → Hom C (F₀ F (p i)) (F₀ G (q i))) (a .map) (b .map) →\na ≡ b"},{"idAnchor":"Cat.Instances.Comma.html#2646","idDesc":null,"idIdent":"sq","idType":"(r : ↓Hom F G a b) →\nC ._∘_ (map b) (F₁ F (r .α)) ≡ C ._∘_ (F₁ G (r .β)) (a .map)"},{"idAnchor":"Cat.Instances.Comma.html#1799","idDesc":null,"idIdent":"x","idType":"↓Obj F G → Ob A"},{"idAnchor":"Cat.Instances.Comma.html#2828","idDesc":null,"idIdent":"↓Hom-pathp","idType":"(F : Functor A C) (G : Functor B₁ C) →\nPathP (λ z → Hom A (p z .x) (x (q z))) (f .α) (g .α) →\nPathP (λ z → Hom B₁ (p z .y) (y (q z))) (f .β) (g .β) →\nPathP (λ i → ↓Hom F G (p i) (q i)) f g"},{"idAnchor":"Cat.Instances.Comma.html#4950","idDesc":null,"idIdent":"_↓_","idType":"(F : Functor A C) (G : Functor B₁ C) →\nPrecategory (ao ⊔ bo ⊔ h) (ah ⊔ bh ⊔ h)"},{"idAnchor":"Cat.Instances.Comma.html#1730","idDesc":null,"idIdent":"↓Obj","idType":"(F : Functor A C) (G : Functor B₁ C) → Type (ao ⊔ bo ⊔ h)"},{"idAnchor":"Cat.Instances.Comma.html#5800","idDesc":null,"idIdent":"_↙_","idType":"A .Ob →\nFunctor B₁ A → Precategory (ah ⊔ bo ⊔ lzero) (ah ⊔ bh ⊔ lzero)"},{"idAnchor":"Cat.Instances.Comma.html#5869","idDesc":null,"idIdent":"_↘_","idType":"Functor B₁ A →\nA .Ob → Precategory (ah ⊔ bo ⊔ lzero) (ah ⊔ bh ⊔ lzero)"},{"idAnchor":"Cat.Instances.Comma.html#3985","idDesc":null,"idIdent":"hl'","idType":"(F : Functor A C) (G : Functor B₁ C) (a b : ↓Obj F G) →\nis-set (↓Hom F G a b)"},{"idAnchor":"Cat.Instances.Comma.html#2452","idDesc":null,"idIdent":"↓Hom","idType":"(F : Functor A C) (G : Functor B₁ C) (a b : ↓Obj F G) →\nType (ah ⊔ bh ⊔ h)"},{"idAnchor":"Cat.Instances.Comma.html#1816","idDesc":null,"idIdent":"y","idType":"↓Obj F G → Ob B₁"},{"idAnchor":"Cat.Instances.Comma.html#5482","idDesc":null,"idIdent":"Cod","idType":"(F : Functor A C) (G : Functor B₁ C) → Functor (F ↓ G) B₁"},{"idAnchor":"Cat.Instances.Comma.html#1832","idDesc":null,"idIdent":"map","idType":"(r : ↓Obj F G) → Hom C (F₀ F (r .x)) (F₀ G (r .y))"},{"idAnchor":"Cat.Instances.Comma.html#5380","idDesc":null,"idIdent":"Dom","idType":"(F : Functor A C) (G : Functor B₁ C) → Functor (F ↓ G) A"},{"idAnchor":"Cat.Instances.Comma.html#3863","idDesc":null,"idIdent":"eqv","idType":"(F : Functor A C) (G : Functor B₁ C) →\nIso (↓Hom F G a b)\n(∑ (Hom A (a .x) (x b))\n (λ α →\n    ∑ (Hom B₁ (a .y) (y b))\n    (λ β → C ._∘_ (map b) (F₁ F α) ≡ C ._∘_ (F₁ G β) (a .map))))"},{"idAnchor":"Cat.Instances.Comma.html#4285","idDesc":null,"idIdent":"↓∘","idType":"(F : Functor A C) (G : Functor B₁ C) →\n↓Hom F G b c → ↓Hom F G a b → ↓Hom F G a c"},{"idAnchor":"Cat.Instances.Comma.html#3372","idDesc":null,"idIdent":"↓Hom-path","idType":"(F : Functor A C) (G : Functor B₁ C) →\nf .α ≡ g .α → f .β ≡ g .β → f ≡ g"},{"idAnchor":"Cat.Instances.Comma.html#3908","idDesc":null,"idIdent":"↓Hom-set","idType":"(F : Functor A C) (G : Functor B₁ C) (x y : ↓Obj F G) →\nis-set (↓Hom F G x y)"},{"idAnchor":"Cat.Instances.Comma.html#5584","idDesc":null,"idIdent":"θ","idType":"(F : Functor A C) (G : Functor B₁ C) → F F∘ Dom F G => G F∘ Cod F G"},{"idAnchor":"Cat.Instances.Comma.html#4502","idDesc":null,"idIdent":"composite","idType":"(F : Functor A C) (G : Functor B₁ C) (g : ↓Hom F G b c)\n(f : ↓Hom F G a b) →\n↓Hom F G a c"},{"idAnchor":"Cat.Instances.Comma.html#2595","idDesc":null,"idIdent":"α","idType":"↓Hom F G a b → Hom A (a .x) (x b)"},{"idAnchor":"Cat.Instances.Comma.html#4136","idDesc":null,"idIdent":"↓id","idType":"(F : Functor A C) (G : Functor B₁ C) → ↓Hom F G a a"},{"idAnchor":"1Lab.Type.Dec.html#1672","idDesc":null,"idIdent":"lem2′","idType":"(p : Dec A) (q : p ≡ yes x → ⊥) → no (unno p q) ≡ p"},{"idAnchor":"1Lab.Type.Dec.html#1977","idDesc":null,"idIdent":"no-embed","idType":"(p : no x ≡ no y) → ap no (no-inj p) ≡ p"},{"idAnchor":"1Lab.Type.Dec.html#1832","idDesc":null,"idIdent":"yes-embed","idType":"(p : yes x ≡ yes y) → ap yes (yes-inj p) ≡ p"},{"idAnchor":"1Lab.Type.Dec.html#585","idDesc":null,"idIdent":"Discrete","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.Type.Dec.html#1052","idDesc":null,"idIdent":"lem1","idType":"(p : yes x ≡ yes y) (i : I) → p i ≡ no n → ⊥"},{"idAnchor":"1Lab.Type.Dec.html#2490","idDesc":null,"idIdent":".extendedlambda1","idType":"(n : Nat) ⦃ hl : H-Level A (suc (suc n)) ⦄ (x y : Dec A) →\nis-hlevel (Path (Dec A) x y) (suc n)"},{"idAnchor":"1Lab.Type.Dec.html#685","idDesc":null,"idIdent":"unyes","idType":"(p : Dec A) → (p ≡ no x → ⊥) → A"},{"idAnchor":"1Lab.Type.Dec.html#310","idDesc":null,"idIdent":"no","idType":"(A → ⊥) → Dec A"},{"idAnchor":"1Lab.Type.Dec.html#1517","idDesc":null,"idIdent":"lem2","idType":"(p : Dec A) (q : p ≡ no x → ⊥) → yes (unyes p q) ≡ p"},{"idAnchor":"1Lab.Type.Dec.html#2130","idDesc":null,"idIdent":"H-Level-Dec","idType":"⦃ hl : H-Level A (suc n) ⦄ → H-Level (Dec A) (suc n)"},{"idAnchor":"1Lab.Type.Dec.html#1404","idDesc":null,"idIdent":"no-inj","idType":"no x ≡ no y → x ≡ y"},{"idAnchor":"1Lab.Type.Dec.html#816","idDesc":null,"idIdent":"unno","idType":"(p : Dec A) → (p ≡ yes x → ⊥) → A → ⊥"},{"idAnchor":"1Lab.Type.Dec.html#1169","idDesc":null,"idIdent":"lem1′","idType":"(p : no x ≡ no y) (i : I) → p i ≡ yes n → ⊥"},{"idAnchor":"1Lab.Type.Dec.html#292","idDesc":null,"idIdent":"yes","idType":"A → Dec A"},{"idAnchor":"1Lab.Type.Dec.html#2275","idDesc":null,"idIdent":".extendedlambda0","idType":"⦃ hl : H-Level A 1 ⦄ (x y : Dec A) → x ≡ y"},{"idAnchor":"1Lab.Type.Dec.html#254","idDesc":null,"idIdent":"Dec","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.Type.Dec.html#1291","idDesc":null,"idIdent":"yes-inj","idType":"yes x ≡ yes y → x ≡ y"},{"idAnchor":"1Lab.Type.Dec.html#332","idDesc":null,"idIdent":"case","idType":"(P : Dec A → Type ℓ') →\n((y : A) → P (yes y)) →\n((y : A → ⊥) → P (no y)) → (x : Dec A) → P x"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1471","idDesc":null,"idIdent":"grp","idType":"(G H : AbGroup ℓ) → Group-on (₀ G × ₀ H)"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1833","idDesc":null,"idIdent":"ab","idType":"(G H : AbGroup ℓ) → is-abelian-group ((₀ G × ₀ H) , grp G H)"},{"idAnchor":"Algebra.Group.Ab.Sum.html#2603","idDesc":null,"idIdent":"⊕-proj₂","idType":"Hom (G ⊕ H) H"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1645","idDesc":null,"idIdent":".extendedlambda2","idType":"(G H : AbGroup ℓ) (x y z : ₀ G × ₀ H) →\n(λ { (a , x) (b , y)\n       → G .object .snd ._⋆_ a b , H .object .snd ._⋆_ x y\n   })\n(.extendedlambda0 G H x y) z\n≡\n(λ { (a , x) (b , y)\n       → G .object .snd ._⋆_ a b , H .object .snd ._⋆_ x y\n   })\nx (.extendedlambda0 G H y z)"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1555","idDesc":null,"idIdent":".extendedlambda0","idType":"(G H : AbGroup ℓ) → ₀ G × ₀ H → ₀ G × ₀ H → ₀ G × ₀ H"},{"idAnchor":"Algebra.Group.Ab.Sum.html#2518","idDesc":null,"idIdent":"⊕-proj₁","idType":"Hom (G ⊕ H) G"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1412","idDesc":null,"idIdent":"_⊕_","idType":"(G H : AbGroup ℓ) → AbGroup ℓ"},{"idAnchor":"Algebra.Group.Ab.Sum.html#2709","idDesc":null,"idIdent":"Direct-sum-is-product","idType":"is-product ⊕-proj₁ ⊕-proj₂"},{"idAnchor":"Algebra.Group.Ab.Sum.html#1605","idDesc":null,"idIdent":".extendedlambda1","idType":"(G H : AbGroup ℓ) → ₀ G × ₀ H → ₀ G × ₀ H"},{"idAnchor":"Data.Set.Coequaliser.html#7355","idDesc":null,"idIdent":"Coeq-rec₂","idType":"is-set C →\n(ci : B₁ → B' → C) →\n((a : B') (x : A) → ci (f x) a ≡ ci (g x) a) →\n((a : B₁) (x : A') → ci a (f' x) ≡ ci a (g' x)) →\nCoeq f g → Coeq f' g' → C"},{"idAnchor":"Data.Set.Coequaliser.html#9915","idDesc":null,"idIdent":"quot","idType":"R₁ x y → Path (A / R₁) (inc x) (inc y)"},{"idAnchor":"Data.Set.Coequaliser.html#8811","idDesc":null,"idIdent":"map","idType":"(cset : is-set C) (ci : B₁ → B' → C)\n(r1 : (a : B') (x : A) → ci (f x) a ≡ ci (g x) a)\n(r2 : (a : B₁) (x : A') → ci a (f' x) ≡ ci a (g' x))\n(x y : Coeq f g) (p q : Path (Coeq f g) x y) (i j : I)\n(z : Coeq f' g') →\nCoeq f g → Coeq f' g' → C"},{"idAnchor":"Data.Set.Coequaliser.html#10376","idDesc":null,"idIdent":".extendedlambda0","idType":"((x : A / R₁) → is-set (B₁ x)) →\n(f : (x : A) → B₁ (inc x)) →\n((x y : A) (r : R₁ x y) →\n PathP (λ i → B₁ (quot r i)) (f x) (f y)) →\n(x : tot R₁) →\nPathP (λ i → B₁ (glue x i)) (f (/-left x)) (f (/-right x))"},{"idAnchor":"Data.Set.Coequaliser.html#1749","idDesc":null,"idIdent":"g","idType":"(cset : is-set C) (h : B₁ → C)\n(h-coeqs : (x : A) → h (f x) ≡ h (g x)) (x y : Coeq f g)\n(p q : Path (Coeq f g) x y) (i j : I) →\nCoeq f g → C"},{"idAnchor":"Data.Set.Coequaliser.html#4148","idDesc":null,"idIdent":"cr'","idType":"(cset : is-set C) → coeq-cone f g C → Coeq f g → C"},{"idAnchor":"Data.Set.Coequaliser.html#3852","idDesc":null,"idIdent":"Coeq-univ","idType":"is-set C → is-equiv (λ h → h ⊙ inc , (λ i z → h (glue z i)))"},{"idAnchor":"Data.Set.Coequaliser.html#12730","idDesc":null,"idIdent":"effective","idType":"(Rp : (x y : A) → is-prop (R₁ x y)) (rr : R₁ x x)\n(rt : R₁ x y → R₁ y z → R₁ x z) (rs : R₁ x y → R₁ y x) →\nis-equiv quot"},{"idAnchor":"Data.Set.Coequaliser.html#6247","idDesc":null,"idIdent":"Coeq-elim₂","idType":"((x : Coeq f g) (y : Coeq f' g') → is-set (C x y)) →\n(ci : (x : B₁) (y : B') → C (inc x) (inc y)) →\n((a : B') (x : A) →\n PathP (λ i → C (glue x i) (inc a)) (ci (f x) a) (ci (g x) a)) →\n((a : B₁) (x : A') →\n PathP (λ i → C (inc a) (glue x i)) (ci a (f' x)) (ci a (g' x))) →\n(x : Coeq f g) (y : Coeq f' g') → C x y"},{"idAnchor":"Data.Set.Coequaliser.html#543","idDesc":null,"idIdent":"Coeq","idType":"(A → B₁) → (A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"Data.Set.Coequaliser.html#5462","idDesc":null,"idIdent":"Coeq-elim-prop₂","idType":"((x : Coeq f g) (y : Coeq f' g') → is-prop (C x y)) →\n((x : B₁) (y : B') → C (inc x) (inc y)) →\n(x : Coeq f g) (y : Coeq f' g') → C x y"},{"idAnchor":"Data.Set.Coequaliser.html#13194","idDesc":null,"idIdent":".extendedlambda1","idType":"((x : A) → R₁ x x) →\n((y : B₁) → S₁ y y) →\n(op₁ : A → B₁ → C) →\n((a b : A) (x y : B₁) → R₁ a b → S₁ x y → T (op₁ a x) (op₁ b y)) →\n(a : B₁) (x : tot R₁) →\ninc (op₁ (/-left x) a) ≡ inc (op₁ (/-right x) a)"},{"idAnchor":"Data.Set.Coequaliser.html#603","idDesc":null,"idIdent":"inc","idType":"B₁ → Coeq f g"},{"idAnchor":"Data.Set.Coequaliser.html#9810","idDesc":null,"idIdent":"_/_","idType":"(A : Type ℓ) → (A → A → Type ℓ') → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Data.Set.Coequaliser.html#12902","idDesc":null,"idIdent":"Quot-op₂","idType":"((x : A) → R₁ x x) →\n((y : B₁) → S₁ y y) →\n(_⋆₁_ : A → B₁ → C) →\n((a b : A) (x y : B₁) → R₁ a b → S₁ x y → T (a ⋆₁ x) (b ⋆₁ y)) →\nA / R₁ → B₁ / S₁ → C / T"},{"idAnchor":"Data.Set.Coequaliser.html#9475","idDesc":null,"idIdent":"/-left","idType":"tot R₁ → A"},{"idAnchor":"Data.Set.Coequaliser.html#10137","idDesc":null,"idIdent":"Quot-elim","idType":"((x : A / R₁) → is-set (B₁ x)) →\n(f : (x : A) → B₁ (inc x)) →\n((x y : A) (r : R₁ x y) →\n PathP (λ i → B₁ (quot r i)) (f x) (f y)) →\n(x : A / R₁) → B₁ x"},{"idAnchor":"Data.Set.Coequaliser.html#5819","idDesc":null,"idIdent":"Coeq-elim-prop₃","idType":"((x : Coeq f g) (y : Coeq f' g') (z : Coeq f'' g'') →\n is-prop (C x y z)) →\n((x : B₁) (y : B') (z : B'') → C (inc x) (inc y) (inc z)) →\n(x : Coeq f g) (y : Coeq f' g') (z : Coeq f'' g'') → C x y z"},{"idAnchor":"Data.Set.Coequaliser.html#4247","idDesc":null,"idIdent":"islinv","idType":"(cset : is-set C) →\nis-left-inverse (cr' cset) (λ h → h ⊙ inc , (λ i z → h (glue z i)))"},{"idAnchor":"Data.Set.Coequaliser.html#12126","idDesc":null,"idIdent":"decode","idType":"(Rp : (x y : A) → is-prop (R₁ x y)) (rr : R₁ x x)\n(rt : R₁ x y → R₁ y z → R₁ x z) (rs : R₁ x y → R₁ y x) (x : A)\n(y : A / R₁) →\n∣ Code Rp rr rt rs x y ∣ → inc x ≡ y"},{"idAnchor":"Data.Set.Coequaliser.html#4724","idDesc":null,"idIdent":"Coeq-elim","idType":"((x : Coeq f g) → is-set (C x)) →\n(ci : (x : B₁) → C (inc x)) →\n((x : A) → PathP (λ i → C (glue x i)) (ci (f x)) (ci (g x))) →\n(x : Coeq f g) → C x"},{"idAnchor":"Data.Set.Coequaliser.html#9551","idDesc":null,"idIdent":"/-right","idType":"tot R₁ → A"},{"idAnchor":"Data.Set.Coequaliser.html#666","idDesc":null,"idIdent":"squash","idType":"is-set (Coeq f g)"},{"idAnchor":"Data.Set.Coequaliser.html#12024","idDesc":null,"idIdent":"encode","idType":"(Rp : (x y : A) → is-prop (R₁ x y)) (rr : R₁ x x)\n(rt : R₁ x y → R₁ y z → R₁ x z) (rs : R₁ x y → R₁ y x) (x : A)\n(y : A / R₁) →\ninc x ≡ y → ∣ Code Rp rr rt rs x y ∣"},{"idAnchor":"Data.Set.Coequaliser.html#13250","idDesc":null,"idIdent":".extendedlambda2","idType":"((x : A) → R₁ x x) →\n((y : B₁) → S₁ y y) →\n(op₁ : A → B₁ → C) →\n((a b : A) (x y : B₁) → R₁ a b → S₁ x y → T (op₁ a x) (op₁ b y)) →\n(a : A) (x : tot S₁) →\ninc (op₁ a (/-left x)) ≡ inc (op₁ a (/-right x))"},{"idAnchor":"Data.Set.Coequaliser.html#627","idDesc":null,"idIdent":"glue","idType":"(x : A) → inc (f x) ≡ inc (g x)"},{"idAnchor":"Data.Set.Coequaliser.html#9371","idDesc":null,"idIdent":"tot","idType":"(A → A → Type ℓ) → Type (A.ℓ ⊔ ℓ)"},{"idAnchor":"Data.Set.Coequaliser.html#1428","idDesc":null,"idIdent":"Coeq-rec","idType":"is-set C →\n(h : B₁ → C) → ((x : A) → h (f x) ≡ h (g x)) → Coeq f g → C"},{"idAnchor":"Data.Set.Coequaliser.html#11316","idDesc":null,"idIdent":"Code","idType":"(Rp : (x y : A) → is-prop (R₁ x y)) (rr : R₁ x x)\n(rt : R₁ x y → R₁ y z → R₁ x z) (rs : R₁ x y → R₁ y x) →\nA → A / R₁ → Prop ℓ'"},{"idAnchor":"Data.Set.Coequaliser.html#8519","idDesc":null,"idIdent":"exp","idType":"(cset : is-set C) (ci : B₁ → B' → C)\n(r1 : (a : B') (x : A) → ci (f x) a ≡ ci (g x) a)\n(r2 : (a : B₁) (x : A') → ci a (f' x) ≡ ci a (g' x)) (x : A)\n(i : I) (y z : Coeq f' g') (p q : Path (Coeq f' g') y z)\n(j k : I) →\nI → I → C"},{"idAnchor":"Data.Set.Coequaliser.html#3232","idDesc":null,"idIdent":"g","idType":"(cprop : (x : Coeq f g) → is-prop (C x))\n(cinc : (x : B₁) → C (inc x)) (x y : Coeq f g)\n(p q : Path (Coeq f g) x y) (i j : I) (x₁ : Coeq f g) →\nC x₁"},{"idAnchor":"Data.Set.Coequaliser.html#8853","idDesc":null,"idIdent":"H-Level-coeq","idType":"H-Level (Coeq f g) (2 + n)"},{"idAnchor":"Data.Set.Coequaliser.html#3522","idDesc":null,"idIdent":"coeq-cone","idType":"(f g : A → B₁) → Type ℓ → Type (A.ℓ ⊔ B.ℓ ⊔ ℓ)"},{"idAnchor":"Data.Set.Coequaliser.html#2579","idDesc":null,"idIdent":"Coeq-elim-prop","idType":"((x : Coeq f g) → is-prop (C x)) →\n((x : B₁) → C (inc x)) → (x : Coeq f g) → C x"},{"idAnchor":"Data.Set.Coequaliser.html#5185","idDesc":null,"idIdent":"g","idType":"(cset : (x : Coeq f g) → is-set (C x)) (ci : (x : B₁) → C (inc x))\n(cg : (x : A) → PathP (λ i → C (glue x i)) (ci (f x)) (ci (g x)))\n(x y : Coeq f g) (p q : Path (Coeq f g) x y) (i j : I)\n(x₁ : Coeq f g) →\nC x₁"},{"idAnchor":"Data.Set.Coequaliser.html#8485","idDesc":null,"idIdent":"map","idType":"(cset : is-set C) (ci : B₁ → B' → C)\n(r1 : (a : B') (x : A) → ci (f x) a ≡ ci (g x) a)\n(r2 : (a : B₁) (x : A') → ci a (f' x) ≡ ci a (g' x)) (x : A)\n(i : I) (y z : Coeq f' g') (p q : Path (Coeq f' g') y z)\n(j k : I) →\nCoeq f g → Coeq f' g' → C"},{"idAnchor":"1Lab.HLevel.Retracts.html#1608","idDesc":null,"idIdent":"retract→is-prop","idType":"(f : A → B₁) (g : B₁ → A) →\nis-left-inverse f g → is-prop A → is-prop B₁"},{"idAnchor":"1Lab.HLevel.Retracts.html#4507","idDesc":null,"idIdent":"Π-is-hlevel","idType":"(n : Nat) →\n((x : A) → is-hlevel (B₁ x) n) → is-hlevel ((x : A) → B₁ x) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9255","idDesc":null,"idIdent":"prop-instance","idType":"is-prop T → H-Level T (suc k)"},{"idAnchor":"1Lab.HLevel.Retracts.html#7755","idDesc":null,"idIdent":"has-hlevel","idType":"H-Level T n → is-hlevel T n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9018","idDesc":null,"idIdent":"go","idType":"(n : Nat) → is-hlevel T n → Nat → (k : Nat) → k + 0 ≡ k"},{"idAnchor":"1Lab.HLevel.Retracts.html#8244","idDesc":null,"idIdent":"H-Level-is-prop","idType":"is-prop (H-Level T n)"},{"idAnchor":"1Lab.HLevel.Retracts.html#4068","idDesc":null,"idIdent":"equiv→is-hlevel","idType":"(n : Nat) (f : A → B₁) →\nis-equiv f → is-hlevel A n → is-hlevel B₁ n"},{"idAnchor":"1Lab.HLevel.Retracts.html#4220","idDesc":null,"idIdent":"is-hlevel≃","idType":"(n : Nat) → A ≃ B₁ → is-hlevel A n → is-hlevel B₁ n"},{"idAnchor":"1Lab.HLevel.Retracts.html#10155","idDesc":null,"idIdent":"H-Level-sigma","idType":"⦃ _ : H-Level T n ⦄ ⦃ _ : H-Level (S₁ x) n ⦄ → H-Level (Σ S₁) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#1933","idDesc":null,"idIdent":"retract→is-hlevel","idType":"(n : Nat) (f : A → B₁) (g : B₁ → A) →\nis-left-inverse f g → is-hlevel A n → is-hlevel B₁ n"},{"idAnchor":"1Lab.HLevel.Retracts.html#5702","idDesc":null,"idIdent":"Σ-is-hlevel","idType":"(n : Nat) →\nis-hlevel A n → ((x : A) → is-hlevel (B₁ x) n) → is-hlevel (Σ B₁) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#2802","idDesc":null,"idIdent":"inv","idType":"(n : Nat) (f : A → B₁) (g : B₁ → A) (h : is-left-inverse f g)\n(hlevel₁ : is-hlevel A (suc (suc n))) (x y : B₁) →\nis-left-inverse (sect n f g h hlevel₁ x y) (ap g)"},{"idAnchor":"1Lab.HLevel.Retracts.html#7727","idDesc":null,"idIdent":"hlevel-instance","idType":"(has-hlevel : is-hlevel T n) → H-Level T n"},{"idAnchor":"1Lab.HLevel.Retracts.html#2575","idDesc":null,"idIdent":"sect","idType":"(n : Nat) (f : A → B₁) (g : B₁ → A) (h : is-left-inverse f g)\n(hlevel₁ : is-hlevel A (suc (suc n))) (x y : B₁) →\ng x ≡ g y → x ≡ y"},{"idAnchor":"1Lab.HLevel.Retracts.html#8750","idDesc":null,"idIdent":"basic-instance","idType":"(n : Nat) → is-hlevel T n → H-Level T (n + k)"},{"idAnchor":"1Lab.HLevel.Retracts.html#10536","idDesc":null,"idIdent":"H-Level-Lift","idType":"⦃ s : H-Level T n ⦄ → H-Level (Lift ℓ T) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#5309","idDesc":null,"idIdent":"fun-is-hlevel","idType":"(n : Nat) → is-hlevel B₁ n → is-hlevel (A → B₁) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#7663","idDesc":null,"idIdent":"H-Level","idType":"(T : Type ℓ) (n : Nat) → Type ℓ"},{"idAnchor":"1Lab.HLevel.Retracts.html#3869","idDesc":null,"idIdent":"iso→is-hlevel","idType":"(n : Nat) (f : A → B₁) → is-iso f → is-hlevel A n → is-hlevel B₁ n"},{"idAnchor":"1Lab.HLevel.Retracts.html#8950","idDesc":null,"idIdent":"+-comm","idType":"(n : Nat) → is-hlevel T n → (n₁ k : Nat) → k + n₁ ≡ n₁ + k"},{"idAnchor":"1Lab.HLevel.Retracts.html#6926","idDesc":null,"idIdent":"Lift-is-hlevel","idType":"(n : Nat) → is-hlevel A n → is-hlevel (Lift b A) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9157","idDesc":null,"idIdent":"go","idType":"(n : Nat) →\nis-hlevel T n →\nNat → Nat → (n₁ k : Nat) → k + suc n₁ ≡ suc (k + n₁)"},{"idAnchor":"1Lab.HLevel.Retracts.html#10365","idDesc":null,"idIdent":"H-Level-path′","idType":"⦃ s : H-Level S₁ (suc n) ⦄ → H-Level (Path S₁ x y) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9879","idDesc":null,"idIdent":"H-Level-⊥","idType":"H-Level ⊥ (suc n)"},{"idAnchor":"1Lab.HLevel.Retracts.html#8061","idDesc":null,"idIdent":"hlevel","idType":"(n : Nat) ⦃ x : H-Level T n ⦄ → is-hlevel T n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9973","idDesc":null,"idIdent":"H-Level-pi′","idType":"⦃ _ : H-Level (S₁ x) n ⦄ → H-Level ({x : T} → S₁ x) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#9549","idDesc":null,"idIdent":"H-Level-pi","idType":"⦃ _ : H-Level (S₁ x) n ⦄ → H-Level ((x : T) → S₁ x) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#4947","idDesc":null,"idIdent":"Π-is-hlevel′","idType":"(n : Nat) →\n((x : A) → is-hlevel (B₁ x) n) → is-hlevel ({x : A} → B₁ x) n"},{"idAnchor":"1Lab.HLevel.Retracts.html#1203","idDesc":null,"idIdent":"retract→is-contr","idType":"(f : A → B₁) (g : B₁ → A) →\nis-left-inverse f g → is-contr A → is-contr B₁"},{"idAnchor":"1Lab.HLevel.Retracts.html#9726","idDesc":null,"idIdent":"H-Level-⊤","idType":"H-Level ⊤ n"},{"idAnchor":"1Lab.HLevel.Retracts.html#6545","idDesc":null,"idIdent":"×-is-hlevel","idType":"(n : Nat) → is-hlevel A n → is-hlevel B₁ n → is-hlevel (A × B₁) n"},{"idAnchor":"Cat.Instances.Sets.CartesianClosed.html#1593","idDesc":null,"idIdent":"Sets-lcc","idType":"is-lcc (Sets ℓ)"},{"idAnchor":"Cat.Instances.Sets.CartesianClosed.html#1172","idDesc":null,"idIdent":"go","idType":"(func : ∣ A ∣ → ∣ B₁ ∣) (hom : Slice (Sets ℓ) A .Hom x y)\n(i : ∣ B₁ ∣) (fibs : (f : fibre func i) → fibre (x .map) (f .fst))\n(z : fibre func i) →\nfibre (y .map) (z .fst)"},{"idAnchor":"Cat.Instances.Sets.CartesianClosed.html#795","idDesc":null,"idIdent":"Sets-Π","idType":"(func : ∣ A ∣ → ∣ B₁ ∣) →\nFunctor (Slice (Sets ℓ) A) (Slice (Sets ℓ) B₁)"},{"idAnchor":"Cat.Instances.Sets.CartesianClosed.html#2261","idDesc":null,"idIdent":".extendedlambda0","idType":"(f : Hom (Sets ℓ) a b) (x : Slice (Sets ℓ) a .Ob)\n(x₁\n : ∣\n   ₀\n   (Base-change (pullbacks (Sets-lcc .finitely-complete)) f F∘\n    Sets-lcc .Πf f)\n   x .domain\n   ∣) →\n(Sets ℓ ∘ map (₀ Id x)) (Sets-lcc .f*⊣Πf f .counit .η x .map) x₁ ≡\n₀\n(Base-change (pullbacks (Sets-lcc .finitely-complete)) f F∘\n Sets-lcc .Πf f)\nx .map x₁"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#1674","idDesc":null,"idIdent":"⋆-reverse-⋆'","idType":"(unital-mgm : is-unital-magma e _⋆₁_) →\nis-unital-magma e' _⋆'_ →\n((a b c d : A) → ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\n(x y : A) → (x ⋆₁ y) ≡ (y ⋆' x)"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#3274","idDesc":null,"idIdent":"⋆-associative","idType":"(unital-mgm : is-unital-magma e _⋆₁_) →\nis-unital-magma e' _⋆'_ →\n((a b c d : A) → ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\n(x y z : A) → (x ⋆₁ (y ⋆₁ z)) ≡ ((x ⋆₁ y) ⋆₁ z)"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#2160","idDesc":null,"idIdent":"operations-equal","idType":"(unital-mgm : is-unital-magma e _⋆₁_) →\nis-unital-magma e' _⋆'_ →\n((a b c d : A) → ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\n(x y : A) → (x ⋆₁ y) ≡ (x ⋆' y)"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#2809","idDesc":null,"idIdent":"⋆-commutative","idType":"(unital-mgm : is-unital-magma e _⋆₁_) →\nis-unital-magma e' _⋆'_ →\n((a b c d : A) → ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\n(x y : A) → (x ⋆₁ y) ≡ (y ⋆₁ x)"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#3858","idDesc":null,"idIdent":"⋆-is-monoid","idType":"(unital-mgm : is-unital-magma e _⋆₁_)\n(unital-mgm' : is-unital-magma e' _⋆'_)\n(interchange\n : (a b c d : A) →\n   ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\nis-monoid e _⋆₁_"},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#1104","idDesc":null,"idIdent":"units-equal","idType":"(unital-mgm : is-unital-magma e _⋆₁_)\n(unital-mgm' : is-unital-magma e' _⋆'_)\n(interchange\n : (a b c d : A) →\n   ((a ⋆₁ b) ⋆' (c ⋆₁ d)) ≡ ((a ⋆' c) ⋆₁ (b ⋆' d))) →\ne ≡ e'"},{"idAnchor":"Relation.Order.html#1256","idDesc":null,"idIdent":"is-partial-order","idType":"(R₁ : A → A → Type ℓ') → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Relation.Order.html#1848","idDesc":null,"idIdent":".extendedlambda0","idType":"(ispo : is-partial-order _≤₁_) → R' ispo x y → x ≡ y"},{"idAnchor":"Relation.Order.html#5118","idDesc":null,"idIdent":"trichotomous-discrete","idType":"is-trichotomous R₁ → Discrete A"},{"idAnchor":"Relation.Order.html#1342","idDesc":null,"idIdent":"preorder","idType":"is-partial-order R₁ → is-preorder R₁"},{"idAnchor":"Relation.Order.html#5568","idDesc":null,"idIdent":"tri-sym","idType":"Tri R₁ x y → Tri R₁ y x"},{"idAnchor":"Relation.Order.html#2646","idDesc":null,"idIdent":"is-partial-order-is-prop","idType":"is-prop (is-partial-order R₁)"},{"idAnchor":"Relation.Order.html#957","idDesc":null,"idIdent":"transitive","idType":"is-preorder R₁ → is-transitive R₁"},{"idAnchor":"Relation.Order.html#841","idDesc":null,"idIdent":"is-preorder","idType":"(R₁ : A → A → Type ℓ') → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Relation.Order.html#1628","idDesc":null,"idIdent":"has-partial-order→is-set","idType":"is-partial-order R₁ → is-set A"},{"idAnchor":"Relation.Order.html#3009","idDesc":null,"idIdent":"A-set","idType":"(order : is-partial-order R₁) → is-set A"},{"idAnchor":"Relation.Order.html#993","idDesc":null,"idIdent":"propositional","idType":"is-preorder R₁ → is-prop (R₁ x y)"},{"idAnchor":"Relation.Order.html#3338","idDesc":null,"idIdent":"deform","idType":"(order x : is-partial-order R₁) → order ≡ x"},{"idAnchor":"Relation.Order.html#4848","idDesc":null,"idIdent":"is-trichotomous","idType":"(A → A → Type ℓ') → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Relation.Order.html#442","idDesc":null,"idIdent":"is-reflexive","idType":"(R₁ : A → A → Type ℓ) → Type (A.ℓ ⊔ ℓ)"},{"idAnchor":"Relation.Order.html#922","idDesc":null,"idIdent":"reflexive","idType":"is-preorder R₁ → is-reflexive R₁"},{"idAnchor":"Relation.Order.html#2116","idDesc":null,"idIdent":"R'","idType":"(ispo : is-partial-order _≤₁_) → A → A → Type ℓ'"},{"idAnchor":"Relation.Order.html#4599","idDesc":null,"idIdent":"Tri","idType":"(A → A → Type ℓ') → A → A → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Relation.Order.html#4731","idDesc":null,"idIdent":"eq","idType":"(R₁ x y → ⊥) → x ≡ y → (R₁ y x → ⊥) → Tri R₁ x y"},{"idAnchor":"Relation.Order.html#601","idDesc":null,"idIdent":"is-transitive","idType":"(R₁ : A → A → Type ℓ) → Type (A.ℓ ⊔ ℓ)"},{"idAnchor":"Relation.Order.html#4790","idDesc":null,"idIdent":"gt","idType":"(R₁ x y → ⊥) → (x ≡ y → ⊥) → R₁ y x → Tri R₁ x y"},{"idAnchor":"Relation.Order.html#2246","idDesc":null,"idIdent":"is-prop'","idType":"(ispo : is-partial-order _≤₁_) → is-prop (R' ispo x y)"},{"idAnchor":"Relation.Order.html#4672","idDesc":null,"idIdent":"lt","idType":"R₁ x y → (x ≡ y → ⊥) → (R₁ y x → ⊥) → Tri R₁ x y"},{"idAnchor":"Relation.Order.html#1371","idDesc":null,"idIdent":"antisym","idType":"is-partial-order R₁ → is-anti-symmetric R₁"},{"idAnchor":"Relation.Order.html#2172","idDesc":null,"idIdent":"reflexive'","idType":"(ispo : is-partial-order _≤₁_) → R' ispo x x"},{"idAnchor":"Relation.Order.html#1142","idDesc":null,"idIdent":"is-anti-symmetric","idType":"(R₁ : A → A → Type ℓ) → Type (A.ℓ ⊔ ℓ)"},{"idAnchor":"Relation.Order.html#2895","idDesc":null,"idIdent":"contract","idType":"is-partial-order R₁ → is-contr (is-partial-order R₁)"},{"idAnchor":"Cat.Instances.Discrete.html#701","idDesc":null,"idIdent":"Disc′","idType":"Set ℓ → Precategory ℓ ℓ"},{"idAnchor":"Cat.Instances.Discrete.html#773","idDesc":null,"idIdent":"h","idType":"(A : Set ℓ) → is-groupoid ∣ A ∣"},{"idAnchor":"Cat.Instances.Discrete.html#4927","idDesc":null,"idIdent":"go","idType":"(F : X → Ob C) (f : Disc X iss .Hom y z)\n(g : Disc X iss .Hom x y) →\nDisc X iss .Hom x y →\nHom C (Disc-adjunct F .F₀ x) (Disc-adjunct F .F₀ y)"},{"idAnchor":"Cat.Instances.Discrete.html#2175","idDesc":null,"idIdent":"set","idType":"(disc : Discrete X) (f : X → Ob C) → is-set X"},{"idAnchor":"Cat.Instances.Discrete.html#1022","idDesc":null,"idIdent":"lift-disc","idType":"(∣ A ∣ → ∣ B₁ ∣) → Functor (Disc′ A) (Disc′ B₁)"},{"idAnchor":"Cat.Instances.Discrete.html#1243","idDesc":null,"idIdent":"Codisc′","idType":"Type ℓ → Precategory ℓ ℓ'"},{"idAnchor":"Cat.Instances.Discrete.html#1997","idDesc":null,"idIdent":"Disc-diagram","idType":"Discrete X → (X → Ob C) → Functor (Disc′ (X , iss)) C"},{"idAnchor":"Cat.Instances.Discrete.html#2272","idDesc":null,"idIdent":"map","idType":"(disc : Discrete X) (f : X → Ob C) →\nx ≡ y → Dec (x ≡ y) → P disc f x y"},{"idAnchor":"Cat.Instances.Discrete.html#4598","idDesc":null,"idIdent":"Disc-adjunct","idType":"(X → Ob C) → Functor (Disc X iss) C"},{"idAnchor":"Cat.Instances.Discrete.html#398","idDesc":null,"idIdent":"Disc","idType":"(A : Type ℓ) → is-groupoid A → Precategory ℓ ℓ"},{"idAnchor":"Cat.Instances.Discrete.html#2881","idDesc":null,"idIdent":"F","idType":"(disc : Discrete X) (f : X → Ob C) → Functor (Disc′ (X , iss)) C"},{"idAnchor":"Cat.Instances.Discrete.html#4980","idDesc":null,"idIdent":"path","idType":"(F : X → Ob C) (f : Disc X iss .Hom y z)\n(g : Disc X iss .Hom x y) →\ngo F f g (g ∙ f) ≡ C ._∘_ (go F f g f) (go F f g g)"},{"idAnchor":"Cat.Instances.Discrete.html#2222","idDesc":null,"idIdent":"P","idType":"(disc : Discrete X) (f : X → Ob C) → X → X → Type C.ℓ'"},{"idAnchor":"Cat.Functor.Pullback.html#5758","idDesc":null,"idIdent":"dh","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) (obj : Slice C X .Ob) →\n/-Hom (₀ (Σf f F∘ Base-change pullbacks f) obj) (₀ Id obj)"},{"idAnchor":"Cat.Functor.Pullback.html#4986","idDesc":null,"idIdent":"Σf⊣f*","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) →\nΣf f ⊣ Base-change pullbacks f"},{"idAnchor":"Cat.Functor.Pullback.html#3805","idDesc":null,"idIdent":"Σ-iso-equiv","idType":"is-invertible C f → is-equivalence (Σf f)"},{"idAnchor":"Cat.Functor.Pullback.html#4077","idDesc":null,"idIdent":"Σ-ff","idType":"(isom : is-invertible C f) → is-equiv (func isom .F₁)"},{"idAnchor":"Cat.Functor.Pullback.html#4215","idDesc":null,"idIdent":"∘inv","idType":"(isom : is-invertible C f) →\n/-Hom (func isom .F₀ x) (func isom .F₀ y) → /-Hom x y"},{"idAnchor":"Cat.Functor.Pullback.html#3562","idDesc":null,"idIdent":"Σf","idType":"(f : Hom C Y X) → Functor (Slice C Y) (Slice C X)"},{"idAnchor":"Cat.Functor.Pullback.html#4515","idDesc":null,"idIdent":"into","idType":"(isom : is-invertible C f) (y : Slice C X .Ob) →\n/-Hom (F₀ (func isom) (cut ((C ∘ inv isom) (y .map)))) y"},{"idAnchor":"Cat.Functor.Pullback.html#2348","idDesc":null,"idIdent":"dh′","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) (dh : Slice C X .Hom x y) →\n/-Hom (Base-change pullbacks f .F₀ x)\n(Base-change pullbacks f .F₀ y)"},{"idAnchor":"Cat.Functor.Pullback.html#4063","idDesc":null,"idIdent":"func","idType":"(isom : is-invertible C f) → Functor (Slice C Y) (Slice C X)"},{"idAnchor":"Cat.Functor.Pullback.html#1643","idDesc":null,"idIdent":"ob","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) (x : Slice C X .Ob) →\n/-Obj Y"},{"idAnchor":"Cat.Functor.Pullback.html#1562","idDesc":null,"idIdent":"Base-change","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) →\nFunctor (Slice C X) (Slice C Y)"},{"idAnchor":"Cat.Functor.Pullback.html#4349","idDesc":null,"idIdent":"Σ-seso","idType":"(isom : is-invertible C f) → is-split-eso (func isom)"},{"idAnchor":"Cat.Functor.Pullback.html#5115","idDesc":null,"idIdent":"dh","idType":"(pullbacks : (f : Hom C X Z) (g : Hom C Y Z) → Pullback C f g)\n(f : Hom C Y X) (obj : Slice C Y .Ob) →\n/-Hom (₀ Id obj) (₀ (Base-change pullbacks f F∘ Σf f) obj)"},{"idAnchor":"Cat.Functor.Pullback.html#4609","idDesc":null,"idIdent":"from′","idType":"(isom : is-invertible C f) (y : Slice C X .Ob) →\n/-Hom y (F₀ (func isom) (cut ((C ∘ inv isom) (y .map))))"},{"idAnchor":"Agda.Builtin.Float.html#1468","idDesc":null,"idIdent":"primFloatDiv","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#2122","idDesc":null,"idIdent":"primFloatCosh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1309","idDesc":null,"idIdent":"primFloatPlus","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1247","idDesc":null,"idIdent":"primShowFloat","idType":"Float → String"},{"idAnchor":"Agda.Builtin.Float.html#5296","idDesc":null,"idIdent":"primSin","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#6152","idDesc":null,"idIdent":"primATan2","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#4369","idDesc":null,"idIdent":"primFloatNumericalLess","idType":"Float → Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1619","idDesc":null,"idIdent":"primFloatSqrt","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#974","idDesc":null,"idIdent":"primFloatCeiling","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#1934","idDesc":null,"idIdent":"primFloatACos","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#551","idDesc":null,"idIdent":"primFloatIsInfinite","idType":"Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1415","idDesc":null,"idIdent":"primFloatTimes","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#5862","idDesc":null,"idIdent":"primACos","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#6007","idDesc":null,"idIdent":"primATan","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1362","idDesc":null,"idIdent":"primFloatMinus","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#327","idDesc":null,"idIdent":"Float","idType":"Type"},{"idAnchor":"Agda.Builtin.Float.html#2212","idDesc":null,"idIdent":"primFloatASinh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1889","idDesc":null,"idIdent":"primFloatASin","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#683","idDesc":null,"idIdent":"primFloatIsSafeInteger","idType":"Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1664","idDesc":null,"idIdent":"primFloatExp","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#833","idDesc":null,"idIdent":"primIntToFloat","idType":"Int → Float"},{"idAnchor":"Agda.Builtin.Float.html#2077","idDesc":null,"idIdent":"primFloatSinh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#4556","idDesc":null,"idIdent":"primRound","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#744","idDesc":null,"idIdent":"primFloatToWord64","idType":"Float → Word64"},{"idAnchor":"Agda.Builtin.Float.html#395","idDesc":null,"idIdent":"primFloatInequality","idType":"Float → Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#5156","idDesc":null,"idIdent":"primLog","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1709","idDesc":null,"idIdent":"primFloatLog","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1754","idDesc":null,"idIdent":"primFloatSin","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#639","idDesc":null,"idIdent":"primFloatIsNegativeZero","idType":"Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#2302","idDesc":null,"idIdent":"primFloatATanh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#925","idDesc":null,"idIdent":"primFloatFloor","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#1129","idDesc":null,"idIdent":"primFloatDecode","idType":"Float → Maybe (∑ Int (λ _ → Int))"},{"idAnchor":"Agda.Builtin.Float.html#1023","idDesc":null,"idIdent":"primFloatToRatio","idType":"Float → ∑ Int (λ _ → Int)"},{"idAnchor":"Agda.Builtin.Float.html#4706","idDesc":null,"idIdent":"primFloor","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#5716","idDesc":null,"idIdent":"primASin","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#2167","idDesc":null,"idIdent":"primFloatTanh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#5016","idDesc":null,"idIdent":"primExp","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1521","idDesc":null,"idIdent":"primFloatPow","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#5436","idDesc":null,"idIdent":"primCos","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#2024","idDesc":null,"idIdent":"primFloatATan2","idType":"Float → Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1080","idDesc":null,"idIdent":"primRatioToFloat","idType":"Int → Int → Float"},{"idAnchor":"Agda.Builtin.Float.html#499","idDesc":null,"idIdent":"primFloatLess","idType":"Float → Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1844","idDesc":null,"idIdent":"primFloatTan","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#4162","idDesc":null,"idIdent":"primFloatNumericalEquality","idType":"Float → Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#5576","idDesc":null,"idIdent":"primTan","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#790","idDesc":null,"idIdent":"primNatToFloat","idType":"Nat → Float"},{"idAnchor":"Agda.Builtin.Float.html#1192","idDesc":null,"idIdent":"primFloatEncode","idType":"Int → Int → Maybe Float"},{"idAnchor":"Agda.Builtin.Float.html#2257","idDesc":null,"idIdent":"primFloatACosh","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#447","idDesc":null,"idIdent":"primFloatEquality","idType":"Float → Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1574","idDesc":null,"idIdent":"primFloatNegate","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#4856","idDesc":null,"idIdent":"primCeiling","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#876","idDesc":null,"idIdent":"primFloatRound","idType":"Float → Maybe Int"},{"idAnchor":"Agda.Builtin.Float.html#595","idDesc":null,"idIdent":"primFloatIsNaN","idType":"Float → Bool"},{"idAnchor":"Agda.Builtin.Float.html#1799","idDesc":null,"idIdent":"primFloatCos","idType":"Float → Float"},{"idAnchor":"Agda.Builtin.Float.html#1979","idDesc":null,"idIdent":"primFloatATan","idType":"Float → Float"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#2697","idDesc":null,"idIdent":"p","idType":"(C : Precategory o ℓ) (zero₁ : Zero C)\n(eqs : (f g : Hom C a b) → Equaliser C f g) (f : Hom C a b) →\n(C ∘ ¡ zero₁) (! zero₁) ≡ id C"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#1631","idDesc":null,"idIdent":"Ker","idType":"(C : Precategory o ℓ) (zero₁ : Zero C) →\n((f g : Hom C a b) → Equaliser C f g) →\n(f : Hom C a b) → Kernel C zero₁ f"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#757","idDesc":null,"idIdent":"is-kernel","idType":"(C : Precategory o ℓ) (∅ : Zero C) (f : Hom C a b)\n(k : Hom C ker a) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#1129","idDesc":null,"idIdent":"has-is-kernel","idType":"(r : Kernel C ∅ f) → is-kernel C ∅ f (r .kernel)"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#1088","idDesc":null,"idIdent":"ker","idType":"Kernel C ∅ f → Ob C"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#1104","idDesc":null,"idIdent":"kernel","idType":"(r : Kernel C ∅ f) → Hom C (r .ker) a"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#1023","idDesc":null,"idIdent":"Kernel","idType":"(C : Precategory o ℓ) (∅ : Zero C) (f : Hom C a b) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#2176","idDesc":null,"idIdent":"Ker-of-ker≃∅","idType":"(C : Precategory o ℓ) (zero₁ : Zero C)\n(eqs : (f g : Hom C a b) → Equaliser C f g) (f : Hom C a b) →\n(C ≅ Ker C zero₁ eqs (Ker C zero₁ eqs f .kernel) .ker) (zero₁ .∅)"},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#860","idDesc":null,"idIdent":"kernels-are-subobjects","idType":"(C : Precategory o ℓ) (∅ : Zero C) (k : Hom C ker a) →\nis-kernel C ∅ f k → is-monic C k"},{"idAnchor":"Cat.Functor.Hom.Representable.html#3096","idDesc":null,"idIdent":"terminal-element→representation","idType":"Terminal (∫ C F) → Representation F"},{"idAnchor":"Cat.Functor.Hom.Representable.html#4219","idDesc":null,"idIdent":"inv","idType":"(term : Terminal (∫ C F)) (x : (C ^op) .Ob) →\nis-invertible (Sets κ) (nat term .η x)"},{"idAnchor":"Cat.Functor.Hom.Representable.html#3823","idDesc":null,"idIdent":"nat","idType":"(term : Terminal (∫ C F)) → F => よ₀ C (top term .ob)"},{"idAnchor":"Cat.Functor.Hom.Representable.html#1242","idDesc":null,"idIdent":"rep","idType":"Representation F → Ob C"},{"idAnchor":"Cat.Functor.Hom.Representable.html#1163","idDesc":null,"idIdent":"Representation","idType":"(F : Functor (C ^op) (Sets κ)) → Type (o ⊔ κ)"},{"idAnchor":"Cat.Functor.Hom.Representable.html#4431","idDesc":null,"idIdent":"f-rep","idType":"(term : Terminal (∫ C F)) → Representation F"},{"idAnchor":"Cat.Functor.Hom.Representable.html#1264","idDesc":null,"idIdent":"represents","idType":"(r : Representation F) →\n(Cat[ C ^op , Sets κ ] ≅ F) (よ₀ C (r .rep))"},{"idAnchor":"Cat.Functor.Hom.Representable.html#2643","idDesc":null,"idIdent":"よX≅よY","idType":"(X Y : Representation F) →\n(Cat[ C ^op , Sets κ ] ≅ よ₀ C (X .rep)) (よ₀ C (Y .rep))"},{"idAnchor":"Cat.Functor.Hom.Representable.html#5348","idDesc":null,"idIdent":"representable-unit→terminal","idType":"Representation (Const (Lift κ ⊤ , hlevel _)) → Terminal C"},{"idAnchor":"Cat.Functor.Hom.Representable.html#2411","idDesc":null,"idIdent":"representation-unique","idType":"(X Y : Representation F) → (C ≅ X .rep) (Y .rep)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6677","idDesc":null,"idIdent":"ch","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (other : Cones F .Ob) →\nCone-hom F other (cone C F lim′)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#5372","idDesc":null,"idIdent":"mono","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) →\nis-monic C (map (top lim′ .apex))"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6544","idDesc":null,"idIdent":"other′","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (other : Cones F .Ob) →\nCone (F′ C F)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6348","idDesc":null,"idIdent":"cone","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) →\nCone F"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6813","idDesc":null,"idIdent":"unique","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (other : Cones F .Ob)\n(x : Cone-hom F other (lim C F lim′ .top)) →\nch C F lim′ other ≡ x"},{"idAnchor":"Cat.Thin.Instances.Sub.html#3784","idDesc":null,"idIdent":"subobj-products","idType":"(C : Precategory o ℓ) →\nPullback C (A .object .map) (B₁ .object .map) →\nProduct (Subobj C o) A B₁"},{"idAnchor":"Cat.Thin.Instances.Sub.html#5157","idDesc":null,"idIdent":"F′","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o)) →\nFunctor J₁ (Slice C o)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#2388","idDesc":null,"idIdent":"p","idType":"(C : Precategory o ℓ) (x y : Hom (Subobj C O) A amono) → x ≡ y"},{"idAnchor":"Cat.Thin.Instances.Sub.html#4110","idDesc":null,"idIdent":"prod′","idType":"(C : Precategory o ℓ)\n(pb : Pullback C (Am .object .map) (Bm .object .map)) →\nProduct (Subobj C o) Am Bm"},{"idAnchor":"Cat.Thin.Instances.Sub.html#5504","idDesc":null,"idIdent":"cone","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (g h : Hom C c (top lim′ .apex .domain))\n(p : (C ∘ map (top lim′ .apex)) g ≡ (C ∘ map (top lim′ .apex)) h)\n(i : I) →\nCone (F′ C F)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#1737","idDesc":null,"idIdent":"Subobj","idType":"(C : Precategory o ℓ) → Ob C → Precategory (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Thin.Instances.Sub.html#2459","idDesc":null,"idIdent":"Subobj-is-category","idType":"(C : Precategory o ℓ) → is-category C → is-category (Subobj C O)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#5777","idDesc":null,"idIdent":"g′","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (g h : Hom C c (top lim′ .apex .domain))\n(p : (C ∘ map (top lim′ .apex)) g ≡ (C ∘ map (top lim′ .apex)) h)\n(i : I) →\nCone-hom (F′ C F) (cone C F lim′ g h p i) (lim′ .top)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#2631","idDesc":null,"idIdent":"Subobjects","idType":"(C : Precategory o ℓ) → is-category C → Ob C → Poset (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Thin.Instances.Sub.html#7125","idDesc":null,"idIdent":"is-complete→subobj-is-complete","idType":"(C : Precategory o ℓ) →\nis-complete o′ ℓ′ C → is-complete o′ ℓ′ (Subobj C c)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6460","idDesc":null,"idIdent":"lim","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) →\nLimit F"},{"idAnchor":"Cat.Thin.Instances.Sub.html#6229","idDesc":null,"idIdent":"h′","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o))\n(lim′ : Limit (F′ C F)) (g h : Hom C c (top lim′ .apex .domain))\n(p : (C ∘ map (top lim′ .apex)) g ≡ (C ∘ map (top lim′ .apex)) h)\n(i : I) →\nCone-hom (F′ C F) (cone C F lim′ g h p i) (lim′ .top)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#2269","idDesc":null,"idIdent":"Subobj-is-thin","idType":"(C : Precategory o ℓ) → is-prop (Hom (Subobj C O) A B₁)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#3287","idDesc":null,"idIdent":"⊤-subobj","idType":"(C : Precategory o ℓ) → Terminal (Subobj C o)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#3947","idDesc":null,"idIdent":"prod","idType":"(C : Precategory o ℓ)\n(pb : Pullback C (Am .object .map) (Bm .object .map)) →\nProduct (Slice C o) (Am .object) (Bm .object)"},{"idAnchor":"Cat.Thin.Instances.Sub.html#4199","idDesc":null,"idIdent":"mono","idType":"(C : Precategory o ℓ)\n(pb : Pullback C (Am .object .map) (Bm .object .map)) →\nis-monic C ((C ∘ Am .object .map) (pb .p₁))"},{"idAnchor":"Cat.Thin.Instances.Sub.html#5220","idDesc":null,"idIdent":"slice-lim→subobj-lim","idType":"(C : Precategory o ℓ) (F : Functor J₁ (Subobj C o)) →\nLimit (F′ C F) → Limit F"},{"idAnchor":"Agda.Builtin.FromNeg.html#228","idDesc":null,"idIdent":"Constraint","idType":"Negative A → Nat → Type a"},{"idAnchor":"Agda.Builtin.FromNeg.html#170","idDesc":null,"idIdent":"Negative","idType":"(A : Type a) → Type (lsuc a)"},{"idAnchor":"Agda.Builtin.FromNeg.html#257","idDesc":null,"idIdent":"fromNeg","idType":"(r : Negative A) (n : Nat) ⦃ _ : Constraint r n ⦄ → A"},{"idAnchor":"Agda.Builtin.Char.html#212","idDesc":null,"idIdent":"Char","idType":"Type"},{"idAnchor":"Agda.Builtin.Char.html#382","idDesc":null,"idIdent":"primToUpper","idType":"Char → Char"},{"idAnchor":"Agda.Builtin.Char.html#394","idDesc":null,"idIdent":"primToLower","idType":"Char → Char"},{"idAnchor":"Agda.Builtin.Char.html#298","idDesc":null,"idIdent":"primIsSpace","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#480","idDesc":null,"idIdent":"primCharEquality","idType":"Char → Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#286","idDesc":null,"idIdent":"primIsAlpha","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#422","idDesc":null,"idIdent":"primCharToNat","idType":"Char → Nat"},{"idAnchor":"Agda.Builtin.Char.html#274","idDesc":null,"idIdent":"primIsDigit","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#326","idDesc":null,"idIdent":"primIsLatin1","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#451","idDesc":null,"idIdent":"primNatToChar","idType":"Nat → Char"},{"idAnchor":"Agda.Builtin.Char.html#262","idDesc":null,"idIdent":"primIsLower","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#339","idDesc":null,"idIdent":"primIsPrint","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#310","idDesc":null,"idIdent":"primIsAscii","idType":"Char → Bool"},{"idAnchor":"Agda.Builtin.Char.html#351","idDesc":null,"idIdent":"primIsHexDigit","idType":"Char → Bool"},{"idAnchor":"Algebra.Monoid.Category.html#5589","idDesc":null,"idIdent":"fold-pure","idType":"(xs : List ∣ X ∣) →\nfold (List ∣ X ∣ , List-is-monoid (X .is-tr))\n(map (λ x → x ∷ []) xs)\n≡ xs"},{"idAnchor":"Algebra.Monoid.Category.html#11889","idDesc":null,"idIdent":"from","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A) →\nAlgebra-hom (Sets ℓ) (L∘R Free⊣Forget) (A , alg)\n(₀ comparison (monoid A alg))"},{"idAnchor":"Algebra.Monoid.Category.html#7056","idDesc":null,"idIdent":"comparison","idType":"Functor (Monoids ℓ) (Eilenberg-Moore (Sets ℓ) (L∘R Free⊣Forget))"},{"idAnchor":"Algebra.Monoid.Category.html#8128","idDesc":null,"idIdent":"f","idType":"(alg\n : Algebra-hom (Sets ℓ) (L∘R Free⊣Forget) (₀ comparison x)\n   (₀ comparison y))\n(a b : x .fst) →\nHom (Sets ℓ) (₀ comparison x .fst) (₀ comparison y .fst)"},{"idAnchor":"Algebra.Monoid.Category.html#797","idDesc":null,"idIdent":"H-Level-Monoid-hom","idType":"H-Level (Monoid-hom x y f) (suc n)"},{"idAnchor":"Algebra.Monoid.Category.html#3308","idDesc":null,"idIdent":"map-++","idType":"(f : x → y) (xs ys : List x) →\nmap f (xs ++ ys) ≡ map f xs ++ map f ys"},{"idAnchor":"Algebra.Monoid.Category.html#5050","idDesc":null,"idIdent":"fold-natural","idType":"(f : X .fst → Y .fst) →\nMonoid-hom X Y f →\n(xs : List (X .fst)) → fold Y (map f xs) ≡ f (fold X xs)"},{"idAnchor":"Algebra.Monoid.Category.html#3977","idDesc":null,"idIdent":"map-∘","idType":"(f : Sets ℓ .Hom y z) (g : Sets ℓ .Hom x y) (xs : List ∣ x ∣) →\nmap (λ x → f (g x)) xs ≡ map f (map g xs)"},{"idAnchor":"Algebra.Monoid.Category.html#4385","idDesc":null,"idIdent":"go","idType":"(M : Type ℓ) (m : Monoid-on M) → List M → M"},{"idAnchor":"Algebra.Monoid.Category.html#8837","idDesc":null,"idIdent":"it's-eso","idType":"is-split-eso comparison"},{"idAnchor":"Algebra.Monoid.Category.html#2382","idDesc":null,"idIdent":"List-is-monoid","idType":"is-set A → Monoid-on (List A)"},{"idAnchor":"Algebra.Monoid.Category.html#11723","idDesc":null,"idIdent":"into","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A) →\nAlgebra-hom (Sets ℓ) (L∘R Free⊣Forget)\n(₀ comparison (monoid A alg)) (A , alg)"},{"idAnchor":"Algebra.Monoid.Category.html#3184","idDesc":null,"idIdent":"map-id","idType":"(xs : List A) → map (λ x → x) xs ≡ xs"},{"idAnchor":"Algebra.Monoid.Category.html#9038","idDesc":null,"idIdent":"monoid","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A) →\nMonoids ℓ .Ob"},{"idAnchor":"Algebra.Monoid.Category.html#4789","idDesc":null,"idIdent":"go","idType":"(xs ys : List (X .fst)) →\nfold X (xs ++ ys) ≡ (X .snd ⋆ fold X xs) (fold X ys)"},{"idAnchor":"Algebra.Monoid.Category.html#8435","idDesc":null,"idIdent":"to∘from","idType":"is-left-inverse from (₁ comparison)"},{"idAnchor":"Algebra.Monoid.Category.html#1558","idDesc":null,"idIdent":"fogh","idType":"(ℓ : Level) (f : y .fst → z .fst) (fh : Monoid-hom y z f)\n(g : x .fst → y .fst) (gh : Monoid-hom x y g) →\nMonoid-hom x z (f ⊙ g)"},{"idAnchor":"Algebra.Monoid.Category.html#3473","idDesc":null,"idIdent":"Free","idType":"Functor (Sets ℓ) (Monoids ℓ)"},{"idAnchor":"Algebra.Monoid.Category.html#4280","idDesc":null,"idIdent":"fold","idType":"(X : Monoid ℓ) → List (X .fst) → X .fst"},{"idAnchor":"Algebra.Monoid.Category.html#1108","idDesc":null,"idIdent":"Monoids","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Monoid.Category.html#6868","idDesc":null,"idIdent":"Monoid-is-monadic","idType":"is-monadic Free⊣Forget"},{"idAnchor":"Algebra.Monoid.Category.html#8345","idDesc":null,"idIdent":"from∘to","idType":"is-right-inverse from (₁ comparison)"},{"idAnchor":"Algebra.Monoid.Category.html#7641","idDesc":null,"idIdent":"from","idType":"Algebra-hom (Sets ℓ) (L∘R Free⊣Forget) (₀ comparison x)\n(₀ comparison y) →\nMonoids ℓ .Hom x y"},{"idAnchor":"Algebra.Monoid.Category.html#5817","idDesc":null,"idIdent":"Free⊣Forget","idType":"Free ⊣ Forget"},{"idAnchor":"Algebra.Monoid.Category.html#12072","idDesc":null,"idIdent":"the-iso","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A) →\n(Eilenberg-Moore (Sets ℓ) (L∘R Free⊣Forget) ≅\n ₀ comparison (monoid A alg))\n(A , alg)"},{"idAnchor":"Algebra.Monoid.Category.html#4596","idDesc":null,"idIdent":"fold-++","idType":"(xs ys : List (X .fst)) →\nfold X (xs ++ ys) ≡ (X .snd ⋆ fold X xs) (fold X ys)"},{"idAnchor":"Algebra.Monoid.Category.html#9352","idDesc":null,"idIdent":"has-is-m","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A) →\nis-monoid (alg .ν []) (monoid A alg .snd ._⋆_)"},{"idAnchor":"Algebra.Monoid.Category.html#10944","idDesc":null,"idIdent":"recover","idType":"(A : Ob (Sets ℓ)) (alg : Algebra-on (Sets ℓ) (L∘R Free⊣Forget) A)\n(x : List (monoid A alg .fst)) →\nfold (monoid A alg) x ≡ alg .ν x"},{"idAnchor":"Algebra.Monoid.Category.html#1977","idDesc":null,"idIdent":"Forget","idType":"Functor (Monoids ℓ) (Sets ℓ)"},{"idAnchor":"Algebra.Monoid.Category.html#7142","idDesc":null,"idIdent":"it's-ff","idType":"is-fully-faithful comparison"},{"idAnchor":"Algebra.Group.Ab.Free.html#3612","idDesc":null,"idIdent":"l1","idType":"(Grp : Group ℓ) (x y : Grp .fst) →\ninc^ab Grp (Grp .snd ._⋆_ x y) ≡ inc^ab Grp (Grp .snd ._⋆_ y x)"},{"idAnchor":"Algebra.Group.Ab.Free.html#5862","idDesc":null,"idIdent":"Group-on-G^ab","idType":"(Grp : Group ℓ) → Group-on (G^ab Grp)"},{"idAnchor":"Algebra.Group.Ab.Free.html#2829","idDesc":null,"idIdent":"l2","idType":"(Grp : Group ℓ) (a : Grp .fst)\n(.patternInTele0 : Grp .fst × Grp .fst × Grp .fst) →\ninc^ab Grp\n(Grp .snd ._⋆_\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .fst)\n   (.patternInTele0 .snd .snd)))\n a)\n≡\ninc^ab Grp\n(Grp .snd ._⋆_\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .snd)\n   (.patternInTele0 .snd .fst)))\n a)"},{"idAnchor":"Algebra.Group.Ab.Free.html#5696","idDesc":null,"idIdent":"ab*-associative","idType":"(Grp : Group ℓ) (x y z : G^ab Grp) →\n(Grp ab* (Grp ab* x) y) z ≡ (Grp ab* x) ((Grp ab* y) z)"},{"idAnchor":"Algebra.Group.Ab.Free.html#8153","idDesc":null,"idIdent":"resp","idType":"(other : (const! G ↓ Ab→Grp) .Ob) (a b c : G .fst) →\nmap other .fst (G .snd ._⋆_ a (G .snd ._⋆_ b c)) ≡\nmap other .fst (G .snd ._⋆_ a (G .snd ._⋆_ c b))"},{"idAnchor":"Algebra.Group.Ab.Free.html#6225","idDesc":null,"idIdent":"Abelianise-is-abelian-group","idType":"(Grp : Group ℓ) → is-abelian-group (Abelianise Grp)"},{"idAnchor":"Algebra.Group.Ab.Free.html#6168","idDesc":null,"idIdent":"Abelianise","idType":"(Grp : Group ℓ) → Group ℓ"},{"idAnchor":"Algebra.Group.Ab.Free.html#7202","idDesc":null,"idIdent":"init","idType":"(const! G ↓ Ab→Grp) .Ob"},{"idAnchor":"Algebra.Group.Ab.Free.html#1289","idDesc":null,"idIdent":"abunit","idType":"(Grp : Group ℓ) → G^ab Grp"},{"idAnchor":"Algebra.Group.Ab.Free.html#1913","idDesc":null,"idIdent":"_ab*_","idType":"(Grp : Group ℓ) → G^ab Grp → G^ab Grp → G^ab Grp"},{"idAnchor":"Algebra.Group.Ab.Free.html#4413","idDesc":null,"idIdent":"l1","idType":"(Grp : Group ℓ)\n(.patternInTele0 : Grp .fst × Grp .fst × Grp .fst) →\ninc^ab Grp\n((Grp .snd ⁻¹)\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .fst)\n   (.patternInTele0 .snd .snd))))\n≡\ninc^ab Grp\n((Grp .snd ⁻¹)\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .snd)\n   (.patternInTele0 .snd .fst))))"},{"idAnchor":"Algebra.Group.Ab.Free.html#6815","idDesc":null,"idIdent":"Abelianise-universal","idType":"Universal-morphism G Ab→Grp"},{"idAnchor":"Algebra.Group.Ab.Free.html#871","idDesc":null,"idIdent":"ab-comm","idType":"(Grp : Group ℓ) (x y z : Grp .fst) →\ninc^ab Grp (Grp .snd ._⋆_ x (Grp .snd ._⋆_ y z)) ≡\ninc^ab Grp (Grp .snd ._⋆_ x (Grp .snd ._⋆_ z y))"},{"idAnchor":"Algebra.Group.Ab.Free.html#835","idDesc":null,"idIdent":"inc^ab","idType":"(Grp : Group ℓ) → Grp .fst → G^ab Grp"},{"idAnchor":"Algebra.Group.Ab.Free.html#2149","idDesc":null,"idIdent":"l1","idType":"(Grp : Group ℓ) (a : Grp .fst)\n(.patternInTele0 : Grp .fst × Grp .fst × Grp .fst) →\ninc^ab Grp\n(Grp .snd ._⋆_ a\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .fst)\n   (.patternInTele0 .snd .snd))))\n≡\ninc^ab Grp\n(Grp .snd ._⋆_ a\n (Grp .snd ._⋆_ (.patternInTele0 .fst)\n  (Grp .snd ._⋆_ (.patternInTele0 .snd .snd)\n   (.patternInTele0 .snd .fst))))"},{"idAnchor":"Algebra.Group.Ab.Free.html#702","idDesc":null,"idIdent":"G^ab","idType":"Group ℓ → Type ℓ"},{"idAnchor":"Algebra.Group.Ab.Free.html#4317","idDesc":null,"idIdent":"abinv","idType":"(Grp : Group ℓ) → G^ab Grp → G^ab Grp"},{"idAnchor":"Algebra.Group.Ab.Free.html#3497","idDesc":null,"idIdent":"ab*-comm","idType":"(Grp : Group ℓ) (x y : G^ab Grp) → (Grp ab* x) y ≡ (Grp ab* y) x"},{"idAnchor":"Algebra.Group.Ab.Free.html#9162","idDesc":null,"idIdent":"unique","idType":"(other : (const! G ↓ Ab→Grp) .Ob)\n(h : ↓Hom (const! G) Ab→Grp (m .bot) other) →\nfactor other ≡ h"},{"idAnchor":"Algebra.Group.Ab.Free.html#7993","idDesc":null,"idIdent":"factor","idType":"(other : (const! G ↓ Ab→Grp) .Ob) →\n(const! G ↓ Ab→Grp) .Hom (m .bot) other"},{"idAnchor":"Algebra.Group.Ab.Free.html#7381","idDesc":null,"idIdent":"m","idType":"Initial (const! G ↓ Ab→Grp)"},{"idAnchor":"Agda.Builtin.Bool.html#172","idDesc":null,"idIdent":"true","idType":"Bool"},{"idAnchor":"Agda.Builtin.Bool.html#147","idDesc":null,"idIdent":"Bool","idType":"Type"},{"idAnchor":"Agda.Builtin.Bool.html#166","idDesc":null,"idIdent":"false","idType":"Bool"},{"idAnchor":"Cat.Diagram.Image.html#4788","idDesc":null,"idIdent":"image-factors","idType":"(C : Precategory o ℓ) (im : M-image C M f) →\n(C ∘ Im→codomain C im) (corestrict C im) ≡ f"},{"idAnchor":"Cat.Diagram.Image.html#4451","idDesc":null,"idIdent":"Im→codomain-is-monic","idType":"(C : Precategory o ℓ) (im : M-image C M f) →\nis-monic C (Im→codomain C im)"},{"idAnchor":"Cat.Diagram.Image.html#5474","idDesc":null,"idIdent":"obj","idType":"(C : Precategory o ℓ) (im : M-image C M f) (m : Hom C c b)\n(M : M₁ .fst m) (i : Hom C a c) (p : (C ∘ m) i ≡ f) →\n↓Obj (const! (cut f)) Forget-full-subcat"},{"idAnchor":"Cat.Diagram.Image.html#4730","idDesc":null,"idIdent":"corestrict","idType":"(C : Precategory o ℓ) (im : M-image C M f) → Hom C a (Im C im)"},{"idAnchor":"Cat.Diagram.Image.html#4369","idDesc":null,"idIdent":"Im→codomain-is-M","idType":"(C : Precategory o ℓ) (im : M-image C M f) →\nM .fst (Im→codomain C im)"},{"idAnchor":"Cat.Diagram.Image.html#3077","idDesc":null,"idIdent":"Class-of-monos","idType":"(C : Precategory o ℓ) (ℓ : Level) → Type (o ⊔ ℓ₁ ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Diagram.Image.html#3214","idDesc":null,"idIdent":"M-image","idType":"(C : Precategory o ℓ) →\nClass-of-monos C ℓ′ → Hom C a b → Type (o ⊔ ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Image.html#3488","idDesc":null,"idIdent":"Image","idType":"(C : Precategory o ℓ) → Hom C a b → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Image.html#4131","idDesc":null,"idIdent":"Im","idType":"(C : Precategory o ℓ) (im : M-image C M f) → Ob C"},{"idAnchor":"Cat.Diagram.Image.html#5580","idDesc":null,"idIdent":"im≤other-image-factors","idType":"(C : Precategory o ℓ) (im : M-image C M f) →\n(C ∘ m) (im≤other-image C im m M i p) ≡ Im→codomain C im"},{"idAnchor":"Cat.Diagram.Image.html#5305","idDesc":null,"idIdent":"im≤other-image","idType":"(C : Precategory o ℓ) (im : M-image C M f) (m : Hom C c b) →\nM .fst m → (i : Hom C a c) → (C ∘ m) i ≡ f → Hom C (Im C im) c"},{"idAnchor":"Cat.Diagram.Image.html#4176","idDesc":null,"idIdent":"Im→codomain","idType":"(C : Precategory o ℓ) (im : M-image C M f) → Hom C (Im C im) b"},{"idAnchor":"Data.Sum.html#610","idDesc":null,"idIdent":"_⊎_","idType":"Type a → Type b → Type (a ⊔ b)"},{"idAnchor":"Data.Sum.html#8648","idDesc":null,"idIdent":"disjoint-⊎-is-prop","idType":"is-prop A → is-prop B₁ → (A × B₁ → ⊥) → is-prop (A ⊎ B₁)"},{"idAnchor":"Data.Sum.html#11708","idDesc":null,"idIdent":"i","idType":"Iso ((A ⊎ B₁) × C) (A × C ⊎ B₁ × C)"},{"idAnchor":"Data.Sum.html#669","idDesc":null,"idIdent":"inl","idType":"A → A ⊎ B₁"},{"idAnchor":"Data.Sum.html#687","idDesc":null,"idIdent":"inr","idType":"B₁ → A ⊎ B₁"},{"idAnchor":"Data.Sum.html#9345","idDesc":null,"idIdent":"⊎-ap","idType":"A ≃ B₁ → C ≃ D → (A ⊎ C) ≃ (B₁ ⊎ D)"},{"idAnchor":"Data.Sum.html#10405","idDesc":null,"idIdent":"i","idType":"Iso (A ⊎ B₁) (B₁ ⊎ A)"},{"idAnchor":"Data.Sum.html#4188","idDesc":null,"idIdent":"to-dec","idType":"A ⊎ (A → ⊥) → Dec A"},{"idAnchor":"Data.Sum.html#1172","idDesc":null,"idIdent":"⊎-disjoint","idType":"inl x ≡ inr y → ⊥"},{"idAnchor":"Data.Sum.html#4400","idDesc":null,"idIdent":"from-dec-is-equiv","idType":"is-equiv from-dec"},{"idAnchor":"Data.Sum.html#4571","idDesc":null,"idIdent":"q","idType":"is-left-inverse to-dec from-dec"},{"idAnchor":"Data.Sum.html#2926","idDesc":null,"idIdent":"the-iso","idType":"Iso ((x : A ⊎ B₁) → P x)\n(((x : A) → P (inl x)) × ((y : B₁) → P (inr y)))"},{"idAnchor":"Data.Sum.html#1125","idDesc":null,"idIdent":"f","idType":"inr x ≡ inr y → A ⊎ B₁ → B₁"},{"idAnchor":"Data.Sum.html#1011","idDesc":null,"idIdent":"inr-inj","idType":"inr x ≡ inr y → x ≡ y"},{"idAnchor":"Data.Sum.html#9505","idDesc":null,"idIdent":"cong","idType":"(f : A → B₁) (f-eqv : is-equiv f) (g : C → D)\n(g-eqv : is-equiv g) →\nIso (A ⊎ C) (B₁ ⊎ D)"},{"idAnchor":"Data.Sum.html#10762","idDesc":null,"idIdent":"i","idType":"Iso ((A ⊎ B₁) ⊎ C) (A ⊎ B₁ ⊎ C)"},{"idAnchor":"Data.Sum.html#3834","idDesc":null,"idIdent":"⊎-mapl","idType":"(A → C) → A ⊎ B₁ → C ⊎ B₁"},{"idAnchor":"Data.Sum.html#10349","idDesc":null,"idIdent":"⊎-comm","idType":"(A ⊎ B₁) ≃ (B₁ ⊎ A)"},{"idAnchor":"Data.Sum.html#11618","idDesc":null,"idIdent":"⊎-×-distribute","idType":"((A ⊎ B₁) × C) ≃ (A × C ⊎ B₁ × C)"},{"idAnchor":"Data.Sum.html#9968","idDesc":null,"idIdent":"⊎-apl","idType":"A ≃ B₁ → (A ⊎ C) ≃ (B₁ ⊎ C)"},{"idAnchor":"Data.Sum.html#1272","idDesc":null,"idIdent":".extendedlambda0","idType":"(path₁ : inl x ≡ inr y) → A ⊎ B₁ → Type"},{"idAnchor":"Data.Sum.html#964","idDesc":null,"idIdent":"f","idType":"inl x ≡ inl y → A ⊎ B₁ → A"},{"idAnchor":"Data.Sum.html#1848","idDesc":null,"idIdent":"[]-unique","idType":"f ≡ h ⊙ inl → g ≡ h ⊙ inr → [ f , g ] ≡ h"},{"idAnchor":"Data.Sum.html#4900","idDesc":null,"idIdent":"Code","idType":"A ⊎ B₁ → A ⊎ B₁ → Type (A.a ⊔ B.a)"},{"idAnchor":"Data.Sum.html#850","idDesc":null,"idIdent":"inl-inj","idType":"inl x ≡ inl y → x ≡ y"},{"idAnchor":"Data.Sum.html#3890","idDesc":null,"idIdent":"⊎-mapr","idType":"(B₁ → C) → A ⊎ B₁ → A ⊎ C"},{"idAnchor":"Data.Sum.html#6059","idDesc":null,"idIdent":"decode-encode","idType":"(p : x ≡ y) → decode (encode p) ≡ p"},{"idAnchor":"Data.Sum.html#2696","idDesc":null,"idIdent":"⊎-universal","idType":"((x : A ⊎ B₁) → C x) ≃\n(((x : A) → C (inl x)) × ((y : B₁) → C (inr y)))"},{"idAnchor":"Data.Sum.html#1510","idDesc":null,"idIdent":"[_,_]","idType":"(A → C) → (B₁ → C) → A ⊎ B₁ → C"},{"idAnchor":"Data.Sum.html#6196","idDesc":null,"idIdent":"d-e-refl","idType":"decode (encode (λ i → x)) ≡ (λ i → x)"},{"idAnchor":"Data.Sum.html#4105","idDesc":null,"idIdent":"from-dec","idType":"Dec A → A ⊎ (A → ⊥)"},{"idAnchor":"Data.Sum.html#5353","idDesc":null,"idIdent":"decode","idType":"Code x y → x ≡ y"},{"idAnchor":"Data.Sum.html#11444","idDesc":null,"idIdent":"⊎-zerol","idType":"(⊥ ⊎ A) ≃ A"},{"idAnchor":"Data.Sum.html#2371","idDesc":null,"idIdent":"[]-η","idType":"(x : A ⊎ B₁) → [ inl , inr ] x ≡ x"},{"idAnchor":"Data.Sum.html#10036","idDesc":null,"idIdent":"⊎-apr","idType":"B₁ ≃ C → (A ⊎ B₁) ≃ (A ⊎ C)"},{"idAnchor":"Data.Sum.html#7973","idDesc":null,"idIdent":"⊎-is-hlevel","idType":"(n : Nat) →\nis-hlevel A (2 + n) →\nis-hlevel B₁ (2 + n) → is-hlevel (A ⊎ B₁) (2 + n)"},{"idAnchor":"Data.Sum.html#6862","idDesc":null,"idIdent":"Code≃Path","idType":"Code x y ≃ (x ≡ y)"},{"idAnchor":"Data.Sum.html#1957","idDesc":null,"idIdent":".extendedlambda1","idType":"f ≡ h ⊙ inl → g ≡ h ⊙ inr → (x : A ⊎ B₁) → [ f , g ] x ≡ h x"},{"idAnchor":"Data.Sum.html#9440","idDesc":null,"idIdent":"f-iso","idType":"(f : A → B₁) (f-eqv : is-equiv f) (g : C → D)\n(g-eqv : is-equiv g) →\nis-iso f"},{"idAnchor":"Data.Sum.html#6486","idDesc":null,"idIdent":"encode-decode","idType":"(p : Code x y) → encode (decode p) ≡ p"},{"idAnchor":"Data.Sum.html#5619","idDesc":null,"idIdent":"encode","idType":"x ≡ y → Code x y"},{"idAnchor":"Data.Sum.html#11270","idDesc":null,"idIdent":"⊎-zeror","idType":"(A ⊎ ⊥) ≃ A"},{"idAnchor":"Data.Sum.html#3731","idDesc":null,"idIdent":"⊎-map","idType":"(A → C) → (B₁ → D) → A ⊎ B₁ → C ⊎ D"},{"idAnchor":"Data.Sum.html#9472","idDesc":null,"idIdent":"g-iso","idType":"(f : A → B₁) (f-eqv : is-equiv f) (g : C → D)\n(g-eqv : is-equiv g) →\nis-iso g"},{"idAnchor":"Data.Sum.html#4524","idDesc":null,"idIdent":"p","idType":"is-right-inverse to-dec from-dec"},{"idAnchor":"Data.Sum.html#10692","idDesc":null,"idIdent":"⊎-assoc","idType":"((A ⊎ B₁) ⊎ C) ≃ (A ⊎ B₁ ⊎ C)"},{"idAnchor":"Data.Sum.html#7008","idDesc":null,"idIdent":"Code-is-hlevel","idType":"is-hlevel A (2 + n) →\nis-hlevel B₁ (2 + n) → is-hlevel (Code x y) (suc n)"},{"idAnchor":"Cat.Morphism.html#7585","idDesc":null,"idIdent":"_∘Iso_","idType":"(C : Precategory o h) → (C ≅ a) b → (C ≅ b) c → (C ≅ a) c"},{"idAnchor":"Cat.Morphism.html#4388","idDesc":null,"idIdent":"iso→invertible","idType":"(C : Precategory o h) (i : (C ≅ a) b) → is-invertible C (i .to)"},{"idAnchor":"Cat.Morphism.html#3941","idDesc":null,"idIdent":"invertible→iso","idType":"(C : Precategory o h) (f : Hom C a b) →\nis-invertible C f → (C ≅ a) b"},{"idAnchor":"Cat.Morphism.html#5570","idDesc":null,"idIdent":"inverse-unique","idType":"(C : Precategory o h) (p : x ≡ y) (q : b ≡ d) →\nPathP (λ i → Hom C (p i) (q i)) (f .to) (g .to) →\nPathP (λ i → Hom C (q i) (p i)) (f .from) (g .from)"},{"idAnchor":"Cat.Morphism.html#8401","idDesc":null,"idIdent":"invertible→epic","idType":"(C : Precategory o h) → is-invertible C f → is-epic C f"},{"idAnchor":"Cat.Morphism.html#1867","idDesc":null,"idIdent":"invl","idType":"Inverses C f g → (C ∘ f) g ≡ id C"},{"idAnchor":"Cat.Morphism.html#2244","idDesc":null,"idIdent":"to","idType":"(C ≅ a) b → Hom C a b"},{"idAnchor":"Cat.Morphism.html#1889","idDesc":null,"idIdent":"invr","idType":"Inverses C f g → (C ∘ g) f ≡ id C"},{"idAnchor":"Cat.Morphism.html#7337","idDesc":null,"idIdent":"r","idType":"(C : Precategory o h) (finv : Inverses C f f⁻¹)\n(ginv : Inverses C g g⁻¹) →\n(C ∘ (C ∘ f⁻¹) g⁻¹) ((C ∘ g) f) ≡ id C"},{"idAnchor":"Cat.Morphism.html#1389","idDesc":null,"idIdent":"mor","idType":"(C ↠ a) b → Hom C a b"},{"idAnchor":"Cat.Morphism.html#1930","idDesc":null,"idIdent":"is-invertible","idType":"(C : Precategory o h) (f : Hom C a b) → Type h"},{"idAnchor":"Cat.Morphism.html#2267","idDesc":null,"idIdent":"from","idType":"(C ≅ a) b → Hom C b a"},{"idAnchor":"Cat.Morphism.html#2065","idDesc":null,"idIdent":"op","idType":"(r : is-invertible C f) → is-invertible C (inv r)"},{"idAnchor":"Cat.Morphism.html#4606","idDesc":null,"idIdent":"s","idType":"(C : Precategory o h) (x y : (C ≅ a) b)\n(p q : Path ((C ≅ a) b) x y) →\np ≡ q"},{"idAnchor":"Cat.Morphism.html#1409","idDesc":null,"idIdent":"monic","idType":"(r : (C ↠ a) b) → is-epic C (r .mor)"},{"idAnchor":"Cat.Morphism.html#2202","idDesc":null,"idIdent":"_≅_","idType":"(C : Precategory o h) (a b : Ob C) → Type h"},{"idAnchor":"Cat.Morphism.html#6776","idDesc":null,"idIdent":"Inverses-∘","idType":"(C : Precategory o h) →\nInverses C f f⁻¹ →\nInverses C g g⁻¹ → Inverses C ((C ∘ g) f) ((C ∘ f⁻¹) g⁻¹)"},{"idAnchor":"Cat.Morphism.html#5094","idDesc":null,"idIdent":"≅-pathp-internal","idType":"(C : Precategory o h) (p : a ≡ c) (q : b ≡ d) →\nPathP (λ i → Hom C (p i) (q i)) (f .to) (g .to) →\nPathP (λ i → Hom C (q i) (p i)) (f .from) (g .from) →\nPathP (λ i → (C ≅ p i) (q i)) f g"},{"idAnchor":"Cat.Morphism.html#835","idDesc":null,"idIdent":"_↪_","idType":"(C : Precategory o h) (a b : Ob C) → Type (o ⊔ h)"},{"idAnchor":"Cat.Morphism.html#7988","idDesc":null,"idIdent":"invertible→monic","idType":"(C : Precategory o h) → is-invertible C f → is-monic C f"},{"idAnchor":"Cat.Morphism.html#6459","idDesc":null,"idIdent":"≅-pathp","idType":"(C : Precategory o h) (p : a ≡ c) (q : b ≡ d) →\nPathP (λ i → Hom C (p i) (q i)) (f .to) (g .to) →\nPathP (λ i → (C ≅ p i) (q i)) f g"},{"idAnchor":"Cat.Morphism.html#1985","idDesc":null,"idIdent":"inv","idType":"is-invertible C f → Hom C b a"},{"idAnchor":"Cat.Morphism.html#3210","idDesc":null,"idIdent":"p","idType":"(C : Precategory o h) (g h : is-invertible C f) → g ≡ h"},{"idAnchor":"Cat.Morphism.html#4523","idDesc":null,"idIdent":"≅-is-set","idType":"(C : Precategory o h) → is-set ((C ≅ a) b)"},{"idAnchor":"Cat.Morphism.html#2828","idDesc":null,"idIdent":"is-invertible-is-prop","idType":"(C : Precategory o h) → is-prop (is-invertible C f)"},{"idAnchor":"Cat.Morphism.html#4135","idDesc":null,"idIdent":"is-invertible-inverse","idType":"(C : Precategory o h) (g : is-invertible C f) →\nis-invertible C (g .inv)"},{"idAnchor":"Cat.Morphism.html#7747","idDesc":null,"idIdent":"_Iso⁻¹","idType":"(C : Precategory o h) → (C ≅ a) b → (C ≅ b) a"},{"idAnchor":"Cat.Morphism.html#3707","idDesc":null,"idIdent":"make-iso","idType":"(C : Precategory o h) (f : Hom C a b) (g : Hom C b a) →\n(C ∘ f) g ≡ id C → (C ∘ g) f ≡ id C → (C ≅ a) b"},{"idAnchor":"Cat.Morphism.html#1197","idDesc":null,"idIdent":"is-epic-is-prop","idType":"(C : Precategory o h) (f : Hom C a b) → is-prop (is-epic C f)"},{"idAnchor":"Cat.Morphism.html#590","idDesc":null,"idIdent":"is-monic","idType":"(C : Precategory o h) → Hom C a b → Type (o ⊔ h)"},{"idAnchor":"Cat.Morphism.html#2003","idDesc":null,"idIdent":"inverses","idType":"(r : is-invertible C f) → Inverses C f (r .inv)"},{"idAnchor":"Cat.Morphism.html#2290","idDesc":null,"idIdent":"inverses","idType":"(r : (C ≅ a) b) → Inverses C (r .to) (r .from)"},{"idAnchor":"Cat.Morphism.html#1341","idDesc":null,"idIdent":"_↠_","idType":"(C : Precategory o h) (a b : Ob C) → Type (o ⊔ h)"},{"idAnchor":"Cat.Morphism.html#903","idDesc":null,"idIdent":"monic","idType":"(r : (C ↪ a) b) → is-monic C (r .mor)"},{"idAnchor":"Cat.Morphism.html#7085","idDesc":null,"idIdent":"l","idType":"(C : Precategory o h) (finv : Inverses C f f⁻¹)\n(ginv : Inverses C g g⁻¹) →\n(C ∘ (C ∘ g) f) ((C ∘ f⁻¹) g⁻¹) ≡ id C"},{"idAnchor":"Cat.Morphism.html#2594","idDesc":null,"idIdent":"Inverses-are-prop","idType":"(C : Precategory o h) → is-prop (Inverses C f g)"},{"idAnchor":"Cat.Morphism.html#1803","idDesc":null,"idIdent":"Inverses","idType":"(C : Precategory o h) (f : Hom C a b) (g : Hom C b a) → Type h"},{"idAnchor":"Cat.Morphism.html#3017","idDesc":null,"idIdent":"g≡h","idType":"(C : Precategory o h) (g h : is-invertible C f) → g .inv ≡ inv h"},{"idAnchor":"Cat.Morphism.html#3457","idDesc":null,"idIdent":"make-invertible","idType":"(C : Precategory o h) (g : Hom C b a) →\n(C ∘ f) g ≡ id C → (C ∘ g) f ≡ id C → is-invertible C f"},{"idAnchor":"Cat.Morphism.html#688","idDesc":null,"idIdent":"is-monic-is-prop","idType":"(C : Precategory o h) (f : Hom C a b) → is-prop (is-monic C f)"},{"idAnchor":"Cat.Morphism.html#6720","idDesc":null,"idIdent":"id-iso","idType":"(C : Precategory o h) → (C ≅ a) a"},{"idAnchor":"Cat.Morphism.html#883","idDesc":null,"idIdent":"mor","idType":"(C ↪ a) b → Hom C a b"},{"idAnchor":"Cat.Morphism.html#1101","idDesc":null,"idIdent":"is-epic","idType":"(C : Precategory o h) → Hom C a b → Type (o ⊔ h)"},{"idAnchor":"1Lab.Path.html#56135","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : coe0→1 A x ≡ y) (i : I) → I → .(IsOne (~ i ∨ i)) → A i"},{"idAnchor":"1Lab.Path.html#38623","idDesc":null,"idIdent":"··-filler","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) →\nSquare (sym p) q (p ·· q ·· r) r"},{"idAnchor":"1Lab.Path.html#35662","idDesc":null,"idIdent":".extendedlambda0","idType":"(u : I → Partial φ A) (u0 : A [ φ ↦ u i0 ]) (i : I) →\nI → .(IsOne (φ ∨ ~ i)) → A"},{"idAnchor":"1Lab.Path.html#63018","idDesc":null,"idIdent":"··≡twice∙","idType":"(p : x ≡ y) (q : y ≡ z) (r : z ≡ w) → (p ·· q ·· r) ≡ p ∙ q ∙ r"},{"idAnchor":"1Lab.Path.html#55250","idDesc":null,"idIdent":"coei1→i","idType":"(A : I → Type ℓ) (i : I) (a : A i1) → coe A i1 i a ≡ coe1→i A i a"},{"idAnchor":"1Lab.Path.html#62812","idDesc":null,"idIdent":"J′","idType":"(P : (x y : A) → x ≡ y → Type ℓ₂) →\n((x : A) → P x x refl) → (p : x ≡ y) → P x y p"},{"idAnchor":"1Lab.Path.html#54916","idDesc":null,"idIdent":"coei→i0","idType":"(A : I → Type ℓ) (i : I) (a : A i) → coe A i i0 a ≡ coei→0 A i a"},{"idAnchor":"1Lab.Path.html#63174","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : x ≡ y) (q : y ≡ z) (r : z ≡ w) (i j : I) →\nI → .(IsOne (i ∨ ~ j ∨ j)) → A"},{"idAnchor":"1Lab.Path.html#61989","idDesc":null,"idIdent":"_◁_","idType":"a₀ ≡ a₀' → PathP A a₀' a₁ → PathP A a₀ a₁"},{"idAnchor":"1Lab.Path.html#40319","idDesc":null,"idIdent":"∙-filler'","idType":"(p : x ≡ y) (q : y ≡ z) → Square (sym p) q (p ∙ q) refl"},{"idAnchor":"1Lab.Path.html#63321","idDesc":null,"idIdent":"invert-sides","idType":"(p : x ≡ y) (q : x ≡ z) → Square q p (sym q) (sym p)"},{"idAnchor":"1Lab.Path.html#52255","idDesc":null,"idIdent":"coei→0","idType":"(A : (i : I) → Type (ℓ i)) (i : I) → A i → A i0"},{"idAnchor":"1Lab.Path.html#3506","idDesc":null,"idIdent":"to-path","idType":"(f : I → A) → Path A (f i0) (f i1)"},{"idAnchor":"1Lab.Path.html#40491","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : x ≡ y) (q : y ≡ z) (j i : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j)) → A"},{"idAnchor":"1Lab.Path.html#51235","idDesc":null,"idIdent":"coe0→1","idType":"(A : I → Type ℓ) → A i0 → A i1"},{"idAnchor":"1Lab.Path.html#59620","idDesc":null,"idIdent":"subst-path-both","idType":"(loop₁ : x ≡ x) (adj : x ≡ y) →\nsubst (λ x → x ≡ x) adj loop₁ ≡ sym adj ∙ loop₁ ∙ adj"},{"idAnchor":"1Lab.Path.html#53519","idDesc":null,"idIdent":"coei→1","idType":"(A : (i : I) → Type (ℓ i)) (i : I) → A i → A i1"},{"idAnchor":"1Lab.Path.html#61721","idDesc":null,"idIdent":"lemma","idType":"(loop₁ : x ≡ z) (adj : z ≡ y) →\nloop₁ ∙ refl ≡ subst (_≡_ x) refl loop₁"},{"idAnchor":"1Lab.Path.html#51690","idDesc":null,"idIdent":"coe0→i","idType":"(A : (i : I) → Type (ℓ i)) (i : I) → A i0 → A i"},{"idAnchor":"1Lab.Path.html#19751","idDesc":null,"idIdent":"path","idType":"(P : (y : A) → x ≡ y → Type ℓ₂) (prefl : P x refl) (p : x ≡ y) →\n(x , refl) ≡ (y , p)"},{"idAnchor":"1Lab.Path.html#53162","idDesc":null,"idIdent":"coe","idType":"(A : (i : I) → Type (ℓ i)) (i j : I) → A i → A j"},{"idAnchor":"1Lab.Path.html#55139","idDesc":null,"idIdent":"coei→i1","idType":"(A : I → Type ℓ) (i : I) (a : A i) → coe A i i1 a ≡ coei→1 A i a"},{"idAnchor":"1Lab.Path.html#61413","idDesc":null,"idIdent":"subst-path-right","idType":"(loop₁ : x ≡ z) (adj : z ≡ y) →\nsubst (_≡_ x) adj loop₁ ≡ loop₁ ∙ adj"},{"idAnchor":"1Lab.Path.html#46957","idDesc":null,"idIdent":"_∎","idType":"(x : A) → x ≡ x"},{"idAnchor":"1Lab.Path.html#55988","idDesc":null,"idIdent":"to-pathp","idType":"coe0→1 A x ≡ y → PathP A x y"},{"idAnchor":"1Lab.Path.html#41015","idDesc":null,"idIdent":"··-unique","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z)\n(α β : Σ (λ s → Square (sym p) q s r)) →\nα ≡ β"},{"idAnchor":"1Lab.Path.html#62167","idDesc":null,"idIdent":"_▷_","idType":"PathP A a₀ a₁ → a₁ ≡ a₁' → PathP A a₀ a₁'"},{"idAnchor":"1Lab.Path.html#63479","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : x ≡ y) (q : x ≡ z) (i j : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → A"},{"idAnchor":"1Lab.Path.html#55601","idDesc":null,"idIdent":"coei→i","idType":"(A : I → Type ℓ) (i : I) (a : A i) → coe A i i a ≡ a"},{"idAnchor":"1Lab.Path.html#62341","idDesc":null,"idIdent":"Square≡··","idType":"Square p q s r ≡ ((sym p ·· q ·· r) ≡ s)"},{"idAnchor":"1Lab.Path.html#18902","idDesc":null,"idIdent":"Singleton","idType":"A → Type ℓ"},{"idAnchor":"1Lab.Path.html#62119","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : a₀ ≡ a₀') (q : PathP A a₀' a₁) (i : I) →\nI → .(IsOne (~ i ∨ i)) → A i"},{"idAnchor":"1Lab.Path.html#19544","idDesc":null,"idIdent":"J","idType":"(P : (y : A) → x ≡ y → Type ℓ₂) → P x refl → (p : x ≡ y) → P y p"},{"idAnchor":"1Lab.Path.html#35493","idDesc":null,"idIdent":"hfill","idType":"(u : I → Partial φ A) (u0 : A [ φ ↦ u i0 ]) →\noutS u0 ≡ hcomp u (outS u0)"},{"idAnchor":"1Lab.Path.html#39820","idDesc":null,"idIdent":"∙-filler","idType":"(p : x ≡ y) (q : y ≡ z) → Square refl p (p ∙ q) q"},{"idAnchor":"1Lab.Path.html#57288","idDesc":null,"idIdent":"Σ-pathp","idType":"(p : x .fst ≡ y .fst) →\nPathP (λ i → B₁ (p i)) (x .snd) (y .snd) → x ≡ y"},{"idAnchor":"1Lab.Path.html#14745","idDesc":null,"idIdent":"transport⁻transport","idType":"(p : A ≡ B₁) (a : A) → transport (sym p) (transport p a) ≡ a"},{"idAnchor":"1Lab.Path.html#21716","idDesc":null,"idIdent":"ap-comp","idType":"ap (λ x → g (f x)) p ≡ ap g (ap f p)"},{"idAnchor":"1Lab.Path.html#46881","idDesc":null,"idIdent":"_≡⟨⟩_","idType":"(x : A) → x ≡ y → x ≡ y"},{"idAnchor":"1Lab.Path.html#14547","idDesc":null,"idIdent":"transport⁻-filler-ext","idType":"(p : A ≡ B₁) → PathP (λ i → p i → A) (λ x → x) (transport (sym p))"},{"idAnchor":"1Lab.Path.html#49201","idDesc":null,"idIdent":"PathP≡Path","idType":"(P : I → Type ℓ) (p : P i0) (q : P i1) →\nPathP P p q ≡ Path (P i1) (transport P p) q"},{"idAnchor":"1Lab.Path.html#60190","idDesc":null,"idIdent":"lemma","idType":"(loop₁ : x ≡ x) (adj : x ≡ y) →\nsym refl ∙ loop₁ ∙ refl ≡ subst (λ x → x ≡ x) refl loop₁"},{"idAnchor":"1Lab.Path.html#54465","idDesc":null,"idIdent":"coei0→1","idType":"(A : I → Type ℓ) (a : A i0) → coei→1 A i0 a ≡ coe0→1 A a"},{"idAnchor":"1Lab.Path.html#58127","idDesc":null,"idIdent":"happly","idType":"f ≡ g → (x : A) → f x ≡ g x"},{"idAnchor":"1Lab.Path.html#9409","idDesc":null,"idIdent":"Square","idType":"a00 ≡ a01 → a00 ≡ a10 → a01 ≡ a11 → a10 ≡ a11 → Type ℓ"},{"idAnchor":"1Lab.Path.html#41936","idDesc":null,"idIdent":"square","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) (α : w ≡ z)\n(α-fill : Square (sym p) q α r) (β : w ≡ z)\n(β-fill : Square (sym p) q β r) →\nα ≡ β"},{"idAnchor":"1Lab.Path.html#58898","idDesc":null,"idIdent":"homotopy-natural","idType":"(H : (x : A) → f x ≡ g x) (p : x ≡ y) → H x ∙ ap g p ≡ ap f p ∙ H y"},{"idAnchor":"1Lab.Path.html#41661","idDesc":null,"idIdent":"cube","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) (α : w ≡ z) →\nSquare (sym p) q α r →\n(β : w ≡ z) → Square (sym p) q β r → I → (j : I) → p (~ j) ≡ r j"},{"idAnchor":"1Lab.Path.html#13454","idDesc":null,"idIdent":"transport-refl","idType":"(x : A) → transport (λ i → A) x ≡ x"},{"idAnchor":"1Lab.Path.html#58486","idDesc":null,"idIdent":"funext","idType":"((x : A) → f x ≡ g x) → f ≡ g"},{"idAnchor":"1Lab.Path.html#46109","idDesc":null,"idIdent":"··-contract","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z)\n(β : Σ (λ s → Square (sym p) q s r)) →\n((p ·· q ·· r) , ··-filler p q r) ≡ β"},{"idAnchor":"1Lab.Path.html#38305","idDesc":null,"idIdent":"_··_··_","idType":"w ≡ x → x ≡ y → y ≡ z → w ≡ z"},{"idAnchor":"1Lab.Path.html#21817","idDesc":null,"idIdent":"ap-id","idType":"ap (λ x → x) p ≡ p"},{"idAnchor":"1Lab.Path.html#55027","idDesc":null,"idIdent":"coei0→i","idType":"(A : I → Type ℓ) (i : I) (a : A i0) → coe A i0 i a ≡ coe0→i A i a"},{"idAnchor":"1Lab.Path.html#51810","idDesc":null,"idIdent":"coe1→i","idType":"(A : (i : I) → Type (ℓ i)) (i : I) → A i1 → A i"},{"idAnchor":"1Lab.Path.html#20337","idDesc":null,"idIdent":"inspect","idType":"(x : A) → Singleton x"},{"idAnchor":"1Lab.Path.html#20103","idDesc":null,"idIdent":"J-refl","idType":"(P : (y : A) → x ≡ y → Type ℓ₂) (pxr : P x refl) →\nJ P pxr refl ≡ pxr"},{"idAnchor":"1Lab.Path.html#62297","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : PathP A a₀ a₁) (q : a₁ ≡ a₁') (i : I) →\nI → .(IsOne (~ i ∨ i)) → A i"},{"idAnchor":"1Lab.Path.html#48096","idDesc":null,"idIdent":"SquareP","idType":"(A : I → I → Type ℓ) →\nPathP (λ i → A i i0) a₀₀ a₁₀ →\nPathP (A i0) a₀₀ a₀₁ →\nPathP (A i1) a₁₀ a₁₁ → PathP (λ i → A i i1) a₀₁ a₁₁ → Type ℓ"},{"idAnchor":"1Lab.Path.html#51359","idDesc":null,"idIdent":"coe1→0","idType":"(A : I → Type ℓ) → A i1 → A i0"},{"idAnchor":"1Lab.Path.html#60713","idDesc":null,"idIdent":"subst-path-left","idType":"(loop₁ : x ≡ z) (adj : x ≡ y) →\nsubst (λ e → e ≡ z) adj loop₁ ≡ sym adj ∙ loop₁"},{"idAnchor":"1Lab.Path.html#56213","idDesc":null,"idIdent":"from-pathp","idType":"PathP A x y → coe0→1 A x ≡ y"},{"idAnchor":"1Lab.Path.html#19380","idDesc":null,"idIdent":"square","idType":"(y : A) (path₁ : x ≡ y) (i : I) → Square refl refl path₁ path₁"},{"idAnchor":"1Lab.Path.html#39472","idDesc":null,"idIdent":"_∙_","idType":"x ≡ y → y ≡ z → x ≡ z"},{"idAnchor":"1Lab.Path.html#21189","idDesc":null,"idIdent":"ap₂","idType":"(f : (x : A) (y : B₁ x) → C x y) (p : x ≡ y)\n(q : PathP (λ i → B₁ (p i)) α β) →\nPathP (λ i → C (p i) (q i)) (f x α) (f y β)"},{"idAnchor":"1Lab.Path.html#53261","idDesc":null,"idIdent":".extendedlambda0","idType":"(A : (i : I) → Type (ℓ i)) (i j : I) (a : A i) (j₁ : I) →\n.(IsOne (~ i ∨ i)) → A j₁"},{"idAnchor":"1Lab.Path.html#21984","idDesc":null,"idIdent":"ap-refl","idType":"ap f (λ i → x) ≡ (λ i → f x)"},{"idAnchor":"1Lab.Path.html#63641","idDesc":null,"idIdent":"sym-∙-filler","idType":"x ≡ y → y ≡ z → I → I → I → A"},{"idAnchor":"1Lab.Path.html#46783","idDesc":null,"idIdent":"_≡˘⟨_⟩_","idType":"(x : A) → y ≡ x → y ≡ z → x ≡ z"},{"idAnchor":"1Lab.Path.html#20756","idDesc":null,"idIdent":"ap","idType":"(f : (x : A) → B₁ x) (p : x ≡ y) →\nPathP (λ i → B₁ (p i)) (f x) (f y)"},{"idAnchor":"1Lab.Path.html#63783","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : x ≡ y) (q : y ≡ z) (i j k : I) → I → .(IsOne (~ i ∨ i)) → A"},{"idAnchor":"1Lab.Path.html#54642","idDesc":null,"idIdent":"coei1→0","idType":"(A : I → Type ℓ) (a : A i1) → coei→0 A i1 a ≡ coe1→0 A a"},{"idAnchor":"1Lab.Path.html#54558","idDesc":null,"idIdent":"coei1→1","idType":"(A : I → Type ℓ) (a : A i1) → coei→1 A i1 a ≡ a"},{"idAnchor":"1Lab.Path.html#63905","idDesc":null,"idIdent":"sym-∙","idType":"(p : x ≡ y) (q : y ≡ z) → sym (p ∙ q) ≡ sym q ∙ sym p"},{"idAnchor":"1Lab.Path.html#41730","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) (α : w ≡ z)\n(α-fill : Square (sym p) q α r) (β : w ≡ z)\n(β-fill : Square (sym p) q β r) (i j k : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ k ∨ k)) → A"},{"idAnchor":"1Lab.Path.html#10558","idDesc":null,"idIdent":"sym","idType":"x ≡ y → y ≡ x"},{"idAnchor":"1Lab.Path.html#28586","idDesc":null,"idIdent":"_[_↦_]","idType":"(A : Type ℓ) (φ : I) (u : Partial φ A) → SSet ℓ"},{"idAnchor":"1Lab.Path.html#38429","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) (i : I) →\nI → .(IsOne (~ i ∨ i)) → A"},{"idAnchor":"1Lab.Path.html#10647","idDesc":null,"idIdent":"symP","idType":"PathP A x y → PathP (λ i → A (~ i)) y x"},{"idAnchor":"1Lab.Path.html#37762","idDesc":null,"idIdent":".extendedlambda0","idType":"(A : (i : I) → Type (ℓ i)) (u : (i : I) → Partial φ (A i))\n(u0 : A i0 [ φ ↦ u i0 ]) (i j : I) →\n.(IsOne (φ ∨ ~ i)) → A (i ∧ j)"},{"idAnchor":"1Lab.Path.html#46629","idDesc":null,"idIdent":"≡⟨⟩-syntax","idType":"(x : A) → y ≡ z → x ≡ y → x ≡ z"},{"idAnchor":"1Lab.Path.html#62614","idDesc":null,"idIdent":"≡⟨⟩⟨⟩-syntax","idType":"(x y : A) → x ≡ y → y ≡ z → z ≡ w → x ≡ w"},{"idAnchor":"1Lab.Path.html#57671","idDesc":null,"idIdent":"Σ-path","idType":"(p : x .fst ≡ y .fst) → subst B₁ p (x .snd) ≡ y .snd → x ≡ y"},{"idAnchor":"1Lab.Path.html#38798","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) (i j : I) →\nI → .(IsOne (~ j ∨ j)) → A"},{"idAnchor":"1Lab.Path.html#54735","idDesc":null,"idIdent":"coei0→0","idType":"(A : I → Type ℓ) (a : A i0) → coei→0 A i0 a ≡ a"},{"idAnchor":"1Lab.Path.html#49409","idDesc":null,"idIdent":"PathP≡Path⁻","idType":"(P : I → Type ℓ) (p : P i0) (q : P i1) →\nPathP P p q ≡ Path (P i0) p (transport (λ i → P (~ i)) q)"},{"idAnchor":"1Lab.Path.html#2466","idDesc":null,"idIdent":"Path","idType":"(A : Type ℓ) → A → A → Type ℓ"},{"idAnchor":"1Lab.Path.html#19193","idDesc":null,"idIdent":"Singleton-is-contr","idType":"(y : Singleton x) → Path (Singleton x) (x , refl) y"},{"idAnchor":"1Lab.Path.html#14006","idDesc":null,"idIdent":"transport-filler","idType":"(p : A ≡ B₁) (x : A) → PathP (λ i → p i) x (transport p x)"},{"idAnchor":"1Lab.Path.html#11776","idDesc":null,"idIdent":"transport","idType":"A ≡ B₁ → A → B₁"},{"idAnchor":"1Lab.Path.html#61032","idDesc":null,"idIdent":"lemma","idType":"(loop₁ : x ≡ z) (adj : x ≡ y) →\nsym refl ∙ loop₁ ≡ subst (λ e → e ≡ z) refl loop₁"},{"idAnchor":"1Lab.Path.html#21894","idDesc":null,"idIdent":"ap-sym","idType":"sym (ap f p) ≡ ap f (sym p)"},{"idAnchor":"1Lab.Path.html#15309","idDesc":null,"idIdent":"subst","idType":"(P : A → Type ℓ₂) → x ≡ y → P x → P y"},{"idAnchor":"1Lab.Path.html#37552","idDesc":null,"idIdent":"fill","idType":"(A : (i : I) → Type (ℓ i)) (u : (i : I) → Partial φ (A i)) →\nA i0 [ φ ↦ u i0 ] → (i : I) → A i"},{"idAnchor":"1Lab.Path.html#14369","idDesc":null,"idIdent":"transport-filler-ext","idType":"(p : A ≡ B₁) → PathP (λ i → A → p i) (λ x → x) (transport p)"},{"idAnchor":"1Lab.Path.html#3593","idDesc":null,"idIdent":"refl","idType":"x ≡ x"},{"idAnchor":"1Lab.Counterexamples.Sigma.html#1611","idDesc":null,"idIdent":"image≃domain","idType":"image f ≃ A"},{"idAnchor":"1Lab.Counterexamples.Sigma.html#1347","idDesc":null,"idIdent":"image","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Counterexamples.Sigma.html#2481","idDesc":null,"idIdent":"woops","idType":"image ignore-bool ≃ Bool"},{"idAnchor":"1Lab.Counterexamples.Sigma.html#1701","idDesc":null,"idIdent":"the-iso","idType":"Iso (image f) A"},{"idAnchor":"1Lab.Counterexamples.Sigma.html#2438","idDesc":null,"idIdent":"ignore-bool","idType":"Bool → ⊤"},{"idAnchor":"Cat.Diagram.Zero.html#653","idDesc":null,"idIdent":"terminal","idType":"(r : Zero C) → Terminal C"},{"idAnchor":"Cat.Diagram.Zero.html#733","idDesc":null,"idIdent":"initial","idType":"(r : Zero C) → Initial C"},{"idAnchor":"Cat.Diagram.Zero.html#1167","idDesc":null,"idIdent":"zero-∘r","idType":"(r : Zero C) (f : Hom C x y) → (C ∘ zero→ r) f ≡ zero→ r"},{"idAnchor":"Cat.Diagram.Zero.html#495","idDesc":null,"idIdent":"has-is-terminal","idType":"is-zero C ob → is-terminal C ob"},{"idAnchor":"Cat.Diagram.Zero.html#459","idDesc":null,"idIdent":"has-is-initial","idType":"is-zero C ob → is-initial C ob"},{"idAnchor":"Cat.Diagram.Zero.html#1055","idDesc":null,"idIdent":"zero-∘l","idType":"(r : Zero C) (f : Hom C y z) → (C ∘ f) (zero→ r) ≡ zero→ r"},{"idAnchor":"Cat.Diagram.Zero.html#536","idDesc":null,"idIdent":"Zero","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Zero.html#591","idDesc":null,"idIdent":"has-is-zero","idType":"(r : Zero C) → is-zero C (r .∅)"},{"idAnchor":"Cat.Diagram.Zero.html#574","idDesc":null,"idIdent":"∅","idType":"Zero C → Ob C"},{"idAnchor":"Cat.Diagram.Zero.html#1010","idDesc":null,"idIdent":"zero→","idType":"Zero C → Hom C x y"},{"idAnchor":"Cat.Diagram.Zero.html#408","idDesc":null,"idIdent":"is-zero","idType":"(C : Precategory o h) (ob : Ob C) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#3037","idDesc":null,"idIdent":"colimit→coend","idType":"(F : Functor (C ^op ×ᶜ C) D) → Colimit (twistᵒᵖ F) → Coend F"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#1518","idDesc":null,"idIdent":"cocone→cowedge","idType":"(F : Functor (C ^op ×ᶜ C) D) → Cocone (twistᵒᵖ F) → Cowedge F"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#1956","idDesc":null,"idIdent":"cowedge→cocone","idType":"(F : Functor (C ^op ×ᶜ C) D) → Cowedge F → Cocone (twistᵒᵖ F)"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#3953","idDesc":null,"idIdent":"cocomplete→coend","idType":"(F : Functor (C ^op ×ᶜ C) D) → is-cocomplete (o ⊔ ℓ) ℓ D → Coend F"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#3504","idDesc":null,"idIdent":"square","idType":"(F : Functor (C ^op ×ᶜ C) D) (colim : Colimit (twistᵒᵖ F))\n(comm : D ._∘_ g (ψ (coend F colim .cowedge) a) ≡ W .ψ a)\n(f : C .Hom b a) →\nD ._∘_ (W .ψ a) (second F f) ≡\nD ._∘_ g (bot colim .ψ ((a , b) , f))"},{"idAnchor":"Cat.Diagram.Coend.Formula.html#3167","idDesc":null,"idIdent":"coend","idType":"(F : Functor (C ^op ×ᶜ C) D) (colim : Colimit (twistᵒᵖ F)) →\nCoend F"},{"idAnchor":"Data.List.html#2988","idDesc":null,"idIdent":"Code≃Path","idType":"Code xs ys ≃ (xs ≡ ys)"},{"idAnchor":"Data.List.html#1153","idDesc":null,"idIdent":"∷≠[]","idType":"x ∷ xs ≡ [] → ⊥"},{"idAnchor":"Data.List.html#1610","idDesc":null,"idIdent":"Code","idType":"List A → List A → Type ℓ"},{"idAnchor":"Data.List.html#5455","idDesc":null,"idIdent":"foldr","idType":"(A → B₁ → B₁) → B₁ → List A → B₁"},{"idAnchor":"Data.List.html#5381","idDesc":null,"idIdent":"length","idType":"List A → Nat"},{"idAnchor":"Data.List.html#3922","idDesc":null,"idIdent":"H-Level-List","idType":"⦃ _ : H-Level A (2 + n) ⦄ → H-Level (List A) (2 + n + k)"},{"idAnchor":"Data.List.html#5780","idDesc":null,"idIdent":"_∷r_","idType":"List A → A → List A"},{"idAnchor":"Data.List.html#5833","idDesc":null,"idIdent":"all=?","idType":"(A → A → Bool) → List A → List A → Bool"},{"idAnchor":"Data.List.html#2310","idDesc":null,"idIdent":"decode","idType":"Code xs ys → xs ≡ ys"},{"idAnchor":"Data.List.html#4744","idDesc":null,"idIdent":"++-idr","idType":"(xs : List A) → xs ++ [] ≡ xs"},{"idAnchor":"Data.List.html#793","idDesc":null,"idIdent":"tail","idType":"List A → List A"},{"idAnchor":"Data.List.html#5695","idDesc":null,"idIdent":"go","idType":"List A → List A → List A"},{"idAnchor":"Data.List.html#3346","idDesc":null,"idIdent":"List-is-hlevel","idType":"(n : Nat) → is-hlevel A (2 + n) → is-hlevel (List A) (2 + n)"},{"idAnchor":"Data.List.html#5645","idDesc":null,"idIdent":"reverse","idType":"List A → List A"},{"idAnchor":"Data.List.html#2834","idDesc":null,"idIdent":"de-refl","idType":"decode (encode (λ i → xs)) ≡ (λ i → xs)"},{"idAnchor":"Data.List.html#5550","idDesc":null,"idIdent":"foldl","idType":"(B₁ → A → B₁) → B₁ → List A → B₁"},{"idAnchor":"Data.List.html#4279","idDesc":null,"idIdent":"_++_","idType":"List A → List A → List A"},{"idAnchor":"Data.List.html#2693","idDesc":null,"idIdent":"decode-encode","idType":"(p : xs ≡ ys) → decode (encode p) ≡ p"},{"idAnchor":"Data.List.html#5268","idDesc":null,"idIdent":"mapUp","idType":"(Nat → A → B₁) → Nat → List A → List B₁"},{"idAnchor":"Data.List.html#4668","idDesc":null,"idIdent":"++-idl","idType":"(xs : List A) → [] ++ xs ≡ xs"},{"idAnchor":"Data.List.html#1243","idDesc":null,"idIdent":"distinguish","idType":"(p : x ∷ xs ≡ []) → List A → Type"},{"idAnchor":"Data.List.html#4109","idDesc":null,"idIdent":"is-set→List-is-set","idType":"is-set A → is-set (List A)"},{"idAnchor":"Data.List.html#4493","idDesc":null,"idIdent":"++-assoc","idType":"(xs ys zs : List A) → (xs ++ ys) ++ zs ≡ xs ++ ys ++ zs"},{"idAnchor":"Data.List.html#1985","idDesc":null,"idIdent":"encode","idType":"xs ≡ ys → Code xs ys"},{"idAnchor":"Data.List.html#2504","idDesc":null,"idIdent":"encode-decode","idType":"(p : Code xs ys) → encode (decode p) ≡ p"},{"idAnchor":"Data.List.html#5187","idDesc":null,"idIdent":"map","idType":"(A → B₁) → List A → List B₁"},{"idAnchor":"Data.List.html#3507","idDesc":null,"idIdent":"Code-is-hlevel","idType":"(n : Nat) →\nis-hlevel A (2 + n) →\nList A → List A → is-hlevel (Code x y) (suc n)"},{"idAnchor":"Data.List.html#727","idDesc":null,"idIdent":"head","idType":"A → List A → A"},{"idAnchor":"Data.List.html#5009","idDesc":null,"idIdent":"ap-∷","idType":"x ≡ y → xs ≡ ys → Path (List A) (x ∷ xs) (y ∷ ys)"},{"idAnchor":"Data.List.html#854","idDesc":null,"idIdent":"∷-head-inj","idType":"x ∷ xs ≡ y ∷ ys → x ≡ y"},{"idAnchor":"Data.List.html#955","idDesc":null,"idIdent":"∷-tail-inj","idType":"x ∷ xs ≡ y ∷ ys → xs ≡ ys"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#2139","idDesc":null,"idIdent":"eqv","idType":"(B₁ : Precategory o ℓ) →\nIso (Slice-hom B₁ f px py)\n(∑ (Hom B₁ (domain px) (domain py))\n (λ to₁ → (B₁ ∘ f) (map px) ≡ (B₁ ∘ map py) to₁))"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#1982","idDesc":null,"idIdent":"slice-hom","idType":"(to₁ : Hom B₁ (px .domain) (py .domain))\n(commute : (B₁ ∘ f) (px .map) ≡ (B₁ ∘ py .map) to₁) →\nSlice-hom B₁ f px py"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#4717","idDesc":null,"idIdent":"Fibre→slice","idType":"(B₁ : Precategory o ℓ) → Functor (Fibre (Slices B₁) x) (Slice B₁ x)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#4991","idDesc":null,"idIdent":"Fibre→slice-is-ff","idType":"(B₁ : Precategory o ℓ) → is-fully-faithful (Fibre→slice B₁)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#7200","idDesc":null,"idIdent":"Codomain-fibration→pullbacks","idType":"(B₁ : Precategory o ℓ) (f : Hom B₁ x y) (g : Hom B₁ z y) →\nCartesian-fibration (Slices B₁) → Pullback B₁ f g"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#2004","idDesc":null,"idIdent":"to","idType":"Slice-hom B₁ f px py → Hom B₁ (px .domain) (py .domain)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#7408","idDesc":null,"idIdent":"the-lift","idType":"(B₁ : Precategory o ℓ) (f : Hom B₁ x y) (g : Hom B₁ z y)\n(lifts : Cartesian-fibration (Slices B₁)) →\nCartesian-lift (Slices B₁) f (cut g)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#6169","idDesc":null,"idIdent":"Codomain-fibration","idType":"(B₁ : Precategory o ℓ) →\n((f : Hom B₁ x y) (g : Hom B₁ z y) → Pullback B₁ f g) →\nCartesian-fibration (Slices B₁)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#5120","idDesc":null,"idIdent":"isom","idType":"(B₁ : Precategory o ℓ) → is-iso (Fibre→slice B₁ .F₁)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#1857","idDesc":null,"idIdent":"Slice-hom","idType":"(B₁ : Precategory o ℓ) (f : Hom B₁ x y) (px : /-Obj x)\n(py : /-Obj y) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#3052","idDesc":null,"idIdent":"Slice-pathp","idType":"(B₁ : Precategory o ℓ) (p : f ≡ g) →\nf′ .to ≡ g′ .to → PathP (λ i → Slice-hom B₁ (p i) px py) f′ g′"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#7448","idDesc":null,"idIdent":"pb","idType":"(B₁ : Precategory o ℓ) (f : Hom B₁ x y) (g : Hom B₁ z y)\n(lifts : Cartesian-fibration (Slices B₁)) →\nPullback B₁ f g"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#5336","idDesc":null,"idIdent":"Fibre→slice-is-equiv","idType":"(B₁ : Precategory o ℓ) → is-equivalence (Fibre→slice B₁)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#6382","idDesc":null,"idIdent":"lift-f","idType":"(B₁ : Precategory o ℓ)\n(pullbacks : (f : Hom B₁ x y) (g : Hom B₁ z y) → Pullback B₁ f g)\n(f : B₁ .Hom x y) (y′ : Ob[ Slices B₁ ] y) →\nCartesian-lift (Slices B₁) f y′"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#3720","idDesc":null,"idIdent":"Slices","idType":"(B₁ : Precategory o ℓ) → Displayed B₁ (o ⊔ ℓ) (o ⊔ ℓ)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#3401","idDesc":null,"idIdent":"Slice-is-set","idType":"(B₁ : Precategory o ℓ) (f : Hom B₁ x y) (px : /-Obj x)\n(py : /-Obj y) →\nis-set (Slice-hom B₁ f px py)"},{"idAnchor":"Cat.Displayed.Instances.Slice.html#2048","idDesc":null,"idIdent":"commute","idType":"(r : Slice-hom B₁ f px py) →\n(B₁ ∘ f) (px .map) ≡ (B₁ ∘ py .map) (r .to)"},{"idAnchor":"Algebra.Magma.Unital.html#3562","idDesc":null,"idIdent":"Unital-magma","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Magma.Unital.html#1193","idDesc":null,"idIdent":"idl","idType":"is-unital-magma identity _⋆₁_ → (identity ⋆₁ x) ≡ x"},{"idAnchor":"Algebra.Magma.Unital.html#4655","idDesc":null,"idIdent":"Unital-magma-univalent","idType":"is-univalent (HomT→Str Unital-magma≃)"},{"idAnchor":"Algebra.Magma.Unital.html#5618","idDesc":null,"idIdent":"left-right-identities-equal","idType":"(l r : A) → is-left-id ⋆ l → is-right-id ⋆ r → l ≡ r"},{"idAnchor":"Algebra.Magma.Unital.html#2126","idDesc":null,"idIdent":"identities-equal","idType":"(e e' : A) →\nis-unital-magma e _⋆₁_ → is-unital-magma e' _⋆₁_ → e ≡ e'"},{"idAnchor":"Algebra.Magma.Unital.html#5035","idDesc":null,"idIdent":"Unital-magma≡","idType":"(A ≃[ HomT→Str Unital-magma≃ ] B₁) ≃ (A ≡ B₁)"},{"idAnchor":"Algebra.Magma.Unital.html#6031","idDesc":null,"idIdent":"left-right-identity→unital","idType":"(l r : A) →\nis-left-id _⋆₁_ l →\nis-right-id _⋆₁_ r → is-magma _⋆₁_ → is-unital-magma l _⋆₁_"},{"idAnchor":"Algebra.Magma.Unital.html#3283","idDesc":null,"idIdent":"identity","idType":"Unital-magma-on A → A"},{"idAnchor":"Algebra.Magma.Unital.html#3375","idDesc":null,"idIdent":"has-Magma-on","idType":"(r : Unital-magma-on A) → Magma-on A"},{"idAnchor":"Algebra.Magma.Unital.html#3300","idDesc":null,"idIdent":"_⋆_","idType":"Unital-magma-on A → A → A → A"},{"idAnchor":"Algebra.Magma.Unital.html#5383","idDesc":null,"idIdent":"is-right-id","idType":"(⋆ : A → A → A) → A → Type A.ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#3321","idDesc":null,"idIdent":"has-is-unital-magma","idType":"(r : Unital-magma-on A) → is-unital-magma (r .identity) (r ._⋆_)"},{"idAnchor":"Algebra.Magma.Unital.html#5305","idDesc":null,"idIdent":"is-left-id","idType":"(⋆ : A → A → A) → A → Type A.ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#1115","idDesc":null,"idIdent":"has-is-magma","idType":"is-unital-magma identity _⋆₁_ → is-magma _⋆₁_"},{"idAnchor":"Algebra.Magma.Unital.html#1230","idDesc":null,"idIdent":"idr","idType":"is-unital-magma identity _⋆₁_ → (x ⋆₁ identity) ≡ x"},{"idAnchor":"Algebra.Magma.Unital.html#4054","idDesc":null,"idIdent":"Unital-magma≃","idType":"(A B₁ : Unital-magma ℓ) (e : A .fst ≃ B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#1028","idDesc":null,"idIdent":"is-unital-magma","idType":"(identity : A) (_⋆₁_ : A → A → A) → Type A.ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#3227","idDesc":null,"idIdent":"Unital-magma-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#4231","idDesc":null,"idIdent":"pres-⋆","idType":"Unital-magma≃ A B₁ e →\n(x y : A .fst) →\ne .fst (A .snd ._⋆_ x y) ≡ B₁ .snd ._⋆_ (e .fst x) (e .fst y)"},{"idAnchor":"Algebra.Magma.Unital.html#1586","idDesc":null,"idIdent":"is-unital-magma-is-prop","idType":"is-prop (is-unital-magma e _⋆₁_)"},{"idAnchor":"Algebra.Magma.Unital.html#2736","idDesc":null,"idIdent":"has-identity-is-prop","idType":"is-magma ⋆ → is-prop (Σ (λ u → is-unital-magma u ⋆))"},{"idAnchor":"Algebra.Magma.Unital.html#4352","idDesc":null,"idIdent":"has-magma≃","idType":"(r : Unital-magma≃ A B₁ e) →\nMagma≃ (Unital-magma→Magma A) (Unital-magma→Magma B₁) e"},{"idAnchor":"Algebra.Magma.Unital.html#3641","idDesc":null,"idIdent":"Unital-magma→Magma","idType":"Unital-magma ℓ → Magma ℓ"},{"idAnchor":"Algebra.Magma.Unital.html#4302","idDesc":null,"idIdent":"pres-identity","idType":"Unital-magma≃ A B₁ e →\ne .fst (A .snd .identity) ≡ B₁ .snd .identity"},{"idAnchor":"Cat.Base.html#1784","idDesc":null,"idIdent":"Hom-set","idType":"(r : Precategory o h) (x y : r .Ob) → is-set (r .Hom x y)"},{"idAnchor":"Cat.Base.html#10392","idDesc":null,"idIdent":"F₁","idType":"(F : Functor D E) (G : Functor C D) →\nC .Hom x y → E .Hom (F₀ F G x) (F₀ F G y)"},{"idAnchor":"Cat.Base.html#14792","idDesc":null,"idIdent":"Nat-is-set","idType":"is-set (F => G)"},{"idAnchor":"Cat.Base.html#3857","idDesc":null,"idIdent":"assoc","idType":"(r : Precategory o h) (f : r .Hom y z) (g : r .Hom x y)\n(h : r .Hom w x) →\nr ._∘_ f (r ._∘_ g h) ≡ r ._∘_ (r ._∘_ f g) h"},{"idAnchor":"Cat.Base.html#10817","idDesc":null,"idIdent":"F-∘","idType":"(F : Functor D E) (G : Functor C D) (f : C .Hom y z)\n(g : C .Hom x y) →\nF₁ F G (C ._∘_ f g) ≡ E ._∘_ (F₁ F G f) (F₁ F G g)"},{"idAnchor":"Cat.Base.html#3437","idDesc":null,"idIdent":"idr","idType":"(r : Precategory o h) (f : r .Hom x y) → r ._∘_ f (r .id) ≡ f"},{"idAnchor":"Cat.Base.html#4025","idDesc":null,"idIdent":"H-Level-Hom","idType":"(r : Precategory o h) → H-Level (Hom r x y) (2 + k)"},{"idAnchor":"Cat.Base.html#13766","idDesc":null,"idIdent":"Const","idType":"Ob D → Functor C D"},{"idAnchor":"Cat.Base.html#13369","idDesc":null,"idIdent":"is-natural","idType":"(r : F => G) (x y : C .Ob) (f : C .Hom x y) →\nD ._∘_ (r .η y) (₁ F f) ≡ D ._∘_ (₁ G f) (r .η x)"},{"idAnchor":"Cat.Base.html#1436","idDesc":null,"idIdent":"Hom","idType":"(r : Precategory o h) → r .Ob → r .Ob → Type h"},{"idAnchor":"Cat.Base.html#8383","idDesc":null,"idIdent":"F-∘","idType":"(r : Functor C D) (f : C .Hom y z) (g : C .Hom x y) →\nr .F₁ (C ._∘_ f g) ≡ (D ∘ r .F₁ f) (r .F₁ g)"},{"idAnchor":"Cat.Base.html#4523","idDesc":null,"idIdent":"_^op","idType":"Precategory o₁ h₁ → Precategory o₁ h₁"},{"idAnchor":"Cat.Base.html#10630","idDesc":null,"idIdent":"F-id","idType":"(F : Functor D E) (G : Functor C D) → F₁ F G (C .id) ≡ E .id"},{"idAnchor":"Cat.Base.html#9697","idDesc":null,"idIdent":"_F∘_","idType":"Functor D E → Functor C D → Functor C E"},{"idAnchor":"Cat.Base.html#15597","idDesc":null,"idIdent":"Nat-path","idType":"((x : C .Ob) → a .η x ≡ b .η x) → a ≡ b"},{"idAnchor":"Cat.Base.html#7206","idDesc":null,"idIdent":"Functor","idType":"(C : Precategory o₁ h₁) (D : Precategory o₂ h₂) →\nType (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂)"},{"idAnchor":"Cat.Base.html#6072","idDesc":null,"idIdent":"precat","idType":"(i : I) → C ^op ^op ≡ C"},{"idAnchor":"Cat.Base.html#6855","idDesc":null,"idIdent":"Sets","idType":"(o : Level) → Precategory (lsuc o) o"},{"idAnchor":"Cat.Base.html#1419","idDesc":null,"idIdent":"Ob","idType":"Precategory o h → Type o"},{"idAnchor":"Cat.Base.html#14748","idDesc":null,"idIdent":"eqv","idType":"Iso (F₂ => G₁)\n(∑ ((x : C₁ .Ob) → D₁ .Hom (₀ F₂ x) (₀ G₁ x))\n (λ η →\n    (x y : Ob C₁) (f : C₁ .Hom x y) →\n    D₁ ._∘_ (η y) (₁ F₂ f) ≡ D₁ ._∘_ (₁ G₁ f) (η x)))"},{"idAnchor":"Cat.Base.html#9098","idDesc":null,"idIdent":"F^op^op≡F","idType":"op (op F) ≡ F"},{"idAnchor":"Cat.Base.html#12241","idDesc":null,"idIdent":"_=>_","idType":"(F G : Functor C D) → Type (o₁ ⊔ h₁ ⊔ h₂)"},{"idAnchor":"Cat.Base.html#12791","idDesc":null,"idIdent":"η","idType":"F => G → (x : C .Ob) → D .Hom (₀ F x) (₀ G x)"},{"idAnchor":"Cat.Base.html#2976","idDesc":null,"idIdent":"id","idType":"(r : Precategory o h) → r .Hom x x"},{"idAnchor":"Cat.Base.html#704","idDesc":null,"idIdent":"Precategory","idType":"(o h : Level) → Type (lsuc o ⊔ lsuc h)"},{"idAnchor":"Cat.Base.html#3482","idDesc":null,"idIdent":"idl","idType":"(r : Precategory o h) (f : r .Hom x y) → r ._∘_ (r .id) f ≡ f"},{"idAnchor":"Cat.Base.html#10345","idDesc":null,"idIdent":"F₀","idType":"(F : Functor D E) (G : Functor C D) → C .Ob → E .Ob"},{"idAnchor":"Cat.Base.html#15117","idDesc":null,"idIdent":"Nat-pathp","idType":"(p : F ≡ F') (q : G ≡ G') →\n((x : C .Ob) →\n PathP (λ z → D .Hom (₀ (p z) x) (₀ (q z) x)) (a .η x) (b .η x)) →\nPathP (λ i → p i => q i) a b"},{"idAnchor":"Cat.Base.html#5956","idDesc":null,"idIdent":"C^op^op≡C","idType":"C ^op ^op ≡ C"},{"idAnchor":"Cat.Base.html#8727","idDesc":null,"idIdent":"₀","idType":"(r : Functor C D) → C .Ob → D .Ob"},{"idAnchor":"Cat.Base.html#7996","idDesc":null,"idIdent":"F₀","idType":"Functor C D → C .Ob → Ob D"},{"idAnchor":"Cat.Base.html#11722","idDesc":null,"idIdent":"Id","idType":"Functor C C"},{"idAnchor":"Cat.Base.html#8343","idDesc":null,"idIdent":"F-id","idType":"(r : Functor C D) → r .F₁ (C .id) ≡ id D"},{"idAnchor":"Cat.Base.html#8972","idDesc":null,"idIdent":"op","idType":"(r : Functor C D) → Functor (C ^op) (D ^op)"},{"idAnchor":"Cat.Base.html#13578","idDesc":null,"idIdent":"op","idType":"(r : F => G) → op G => op F"},{"idAnchor":"Cat.Base.html#8017","idDesc":null,"idIdent":"F₁","idType":"(r : Functor C D) → C .Hom x y → Hom D (r .F₀ x) (r .F₀ y)"},{"idAnchor":"Cat.Base.html#12432","idDesc":null,"idIdent":"NT","idType":"(η : (x : C .Ob) → D .Hom (₀ F x) (₀ G x))\n(is-natural\n : (x y : C .Ob) (f : C .Hom x y) →\n   D ._∘_ (η y) (₁ F f) ≡ D ._∘_ (₁ G f) (η x)) →\nF => G"},{"idAnchor":"Cat.Base.html#3006","idDesc":null,"idIdent":"_∘_","idType":"(r : Precategory o h) → r .Hom y z → r .Hom x y → r .Hom x z"},{"idAnchor":"Cat.Base.html#8808","idDesc":null,"idIdent":"₁","idType":"(r : Functor C D) → C .Hom x y → D .Hom (F₀ r x) (F₀ r y)"},{"idAnchor":"Cat.Base.html#11084","idDesc":null,"idIdent":"comps","idType":"(F : Functor D E) (G : Functor C D) → Functor C E"},{"idAnchor":"Cat.Instances.Functor.html#2100","idDesc":null,"idIdent":"Cat[_,_]","idType":"(C : Precategory o₁ h₁) (D : Precategory o₂ h₂) →\nPrecategory (o₁ ⊔ o₂ ⊔ h₁ ⊔ h₂) (o₁ ⊔ h₁ ⊔ h₂)"},{"idAnchor":"Cat.Instances.Functor.html#13567","idDesc":null,"idIdent":"make-natural-iso","idType":"(eta : (x : C .Ob) → Hom D (F .F₀ x) (G .F₀ x)) →\n((x : C .Ob) → is-invertible D (eta x)) →\n((x y : C .Ob) (f : C .Hom x y) →\n (D ∘ G .F₁ f) (eta x) ≡ (D ∘ eta y) (F .F₁ f)) →\n(Cat[ C , D ] ≅ F) G"},{"idAnchor":"Cat.Instances.Functor.html#13400","idDesc":null,"idIdent":"F∘-iso-id-l","idType":"(Cat[ D , D ] ≅ F) Id → (Cat[ C , D ] ≅ (F F∘ G)) G"},{"idAnchor":"Cat.Instances.Functor.html#10560","idDesc":null,"idIdent":"uncurried","idType":"(F : Functor C Cat[ D , E ]) → Functor (C ×ᶜ D) E"},{"idAnchor":"Cat.Instances.Functor.html#12587","idDesc":null,"idIdent":"F∘-iso-l","idType":"(Cat[ D , E ] ≅ F) F′ → (Cat[ C , E ] ≅ (F F∘ G)) (F′ F∘ G)"},{"idAnchor":"Cat.Instances.Functor.html#7821","idDesc":null,"idIdent":"id≡F≅G","idType":"(DisCat : is-category D) (F G : Ob Cat[ C , D ])\n(F≅G : (Cat[ C , D ] ≅ F) G) →\nPathP (λ i → (Cat[ C , D ] ≅ F) (F≡G DisCat F G F≅G i))\n(id-iso Cat[ C , D ]) F≅G"},{"idAnchor":"Cat.Instances.Functor.html#5735","idDesc":null,"idIdent":"ptoi-to","idType":"(DisCat : is-category D) (F G : Ob Cat[ C , D ])\n(F≅G : (Cat[ C , D ] ≅ F) G) (x : C .Ob) →\npath→iso D (iso→path D DisCat (Nat-iso→Iso F≅G x)) .to ≡\nF≅G .to .η x"},{"idAnchor":"Cat.Instances.Functor.html#13934","idDesc":null,"idIdent":"whiskerl","idType":"F => G → F F∘ H => G F∘ H"},{"idAnchor":"Cat.Instances.Functor.html#10741","idDesc":null,"idIdent":"path","idType":"(F : Functor C Cat[ D , E ]) (x : Ob C) (y : Ob D) →\nE ._∘_ (₁ F (C .id) .η y) (F₁ (₀ F x) (D .id)) ≡ E .id"},{"idAnchor":"Cat.Instances.Functor.html#11053","idDesc":null,"idIdent":"path","idType":"(F : Functor C Cat[ D , E ]) (f : Hom C (y .fst) (z .fst))\n(g : Hom D (y .snd) (z .snd)) (f′ : Hom C (x .fst) (y .fst))\n(g′ : Hom D (x .snd) (y .snd)) →\nuncurried F .F₁ (C ._∘_ f f′ , D ._∘_ g g′) ≡\nE ._∘_ (uncurried F .F₁ (f , g)) (uncurried F .F₁ (f′ , g′))"},{"idAnchor":"Cat.Instances.Functor.html#9810","idDesc":null,"idIdent":"Curry","idType":"Functor (C ×ᶜ D) E → Functor C Cat[ D , E ]"},{"idAnchor":"Cat.Instances.Functor.html#12193","idDesc":null,"idIdent":"F∘-idl","idType":"Id F∘ F ≡ F"},{"idAnchor":"Cat.Instances.Functor.html#11822","idDesc":null,"idIdent":"PSh","idType":"(κ : Level) →\nPrecategory o ℓ → Precategory (κ ⊔ o ⊔ ℓ ⊔ lsuc κ) (o ⊔ ℓ ⊔ κ)"},{"idAnchor":"Cat.Instances.Functor.html#6657","idDesc":null,"idIdent":"F₁≡G₁","idType":"(DisCat : is-category D) (F G : Ob Cat[ C , D ])\n(F≅G : (Cat[ C , D ] ≅ F) G) →\nPathP\n(λ i → Hom D (F₀≡G₀ DisCat F G F≅G x i) (F₀≡G₀ DisCat F G F≅G y i))\n(F₁ F f) (F₁ G f)"},{"idAnchor":"Cat.Instances.Functor.html#8777","idDesc":null,"idIdent":"eps","idType":"(eta : F => G) (invs : (x : C .Ob) → is-invertible D (eta .η x)) →\nG => F"},{"idAnchor":"Cat.Instances.Functor.html#1027","idDesc":null,"idIdent":"nat","idType":"(f : G => H) (g : F => G) → F => H"},{"idAnchor":"Cat.Instances.Functor.html#10338","idDesc":null,"idIdent":"Uncurry","idType":"Functor C Cat[ D , E ] → Functor (C ×ᶜ D) E"},{"idAnchor":"Cat.Instances.Functor.html#5936","idDesc":null,"idIdent":"ptoi-from","idType":"(DisCat : is-category D) (F G : Ob Cat[ C , D ])\n(F≅G : (Cat[ C , D ] ≅ F) G) (x : C .Ob) →\npath→iso D (iso→path D DisCat (Nat-iso→Iso F≅G x)) .from ≡\nF≅G .from .η x"},{"idAnchor":"Cat.Instances.Functor.html#4995","idDesc":null,"idIdent":"Functor-is-category","idType":"is-category D → is-category Cat[ C , D ]"},{"idAnchor":"Cat.Instances.Functor.html#7271","idDesc":null,"idIdent":"F≡G","idType":"(DisCat : is-category D) (F G : Ob Cat[ C , D ])\n(F≅G : (Cat[ C , D ] ≅ F) G) →\nF ≡ G"},{"idAnchor":"Cat.Instances.Functor.html#4258","idDesc":null,"idIdent":"Nat-iso→Iso","idType":"(Cat[ C , D ] ≅ F) G → (x : C .Ob) → (D ≅ F₀ F x) (F₀ G x)"},{"idAnchor":"Cat.Instances.Functor.html#9975","idDesc":null,"idIdent":"curried","idType":"(F : Functor (C ×ᶜ D) E) → Functor C Cat[ D , E ]"},{"idAnchor":"Cat.Instances.Functor.html#6274","idDesc":null,"idIdent":"F₀≡G₀","idType":"is-category D →\n(F G : Ob Cat[ C , D ]) →\n(Cat[ C , D ] ≅ F) G → (x : C .Ob) → F₀ F x ≡ F₀ G x"},{"idAnchor":"Cat.Instances.Functor.html#8554","idDesc":null,"idIdent":"componentwise-invertible→invertible","idType":"(eta : F => G) →\n((x : C .Ob) → is-invertible D (eta .η x)) →\nis-invertible Cat[ C , D ] eta"},{"idAnchor":"Cat.Instances.Functor.html#9214","idDesc":null,"idIdent":"are-invs","idType":"(eta : F => G) (invs : (x : C .Ob) → is-invertible D (eta .η x)) →\nis-invertible Cat[ C , D ] eta"},{"idAnchor":"Cat.Instances.Functor.html#11907","idDesc":null,"idIdent":"F∘-assoc","idType":"F F∘ G F∘ H ≡ (F F∘ G) F∘ H"},{"idAnchor":"Cat.Instances.Functor.html#3066","idDesc":null,"idIdent":"Functor-path","idType":"(p0 : (x : C .Ob) → F₀ F x ≡ F₀ G x) →\n((f : C .Hom x y) →\n PathP (λ i → D .Hom (p0 x i) (p0 y i)) (F₁ F f) (F₁ G f)) →\nF ≡ G"},{"idAnchor":"Cat.Instances.Functor.html#12907","idDesc":null,"idIdent":"to","idType":"(isom : (Cat[ D , E ] ≅ F) F′) → F F∘ G => F′ F∘ G"},{"idAnchor":"Cat.Instances.Functor.html#13031","idDesc":null,"idIdent":"from","idType":"(isom : (Cat[ D , E ] ≅ F) F′) → F′ F∘ G => F F∘ G"},{"idAnchor":"Cat.Instances.Functor.html#890","idDesc":null,"idIdent":"_∘nt_","idType":"G => H → F => G → F => H"},{"idAnchor":"Cat.Instances.Functor.html#468","idDesc":null,"idIdent":"idnt","idType":"F => F"},{"idAnchor":"1Lab.Equiv.Biinv.html#5514","idDesc":null,"idIdent":"contract","idType":"is-biinv f → is-contr (is-biinv f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#5957","idDesc":null,"idIdent":"is-iso→is-biinv","idType":"is-iso f → is-biinv f"},{"idAnchor":"1Lab.Equiv.Biinv.html#3514","idDesc":null,"idIdent":"f⁻¹","idType":"(f-eqv : is-equiv f) → B₁ → A"},{"idAnchor":"1Lab.Equiv.Biinv.html#2847","idDesc":null,"idIdent":"is-equiv→post-is-equiv","idType":"is-equiv f → is-equiv (λ section → section ⊙ f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#1902","idDesc":null,"idIdent":"rinv","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Equiv.Biinv.html#1838","idDesc":null,"idIdent":"linv","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Equiv.Biinv.html#2207","idDesc":null,"idIdent":"is-biinv","idType":"(A → B₁) → Type (A.ℓ ⊔ B.ℓ)"},{"idAnchor":"1Lab.Equiv.Biinv.html#4069","idDesc":null,"idIdent":"is-iso→is-contr-rinv","idType":"is-iso f → is-contr (rinv f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#4686","idDesc":null,"idIdent":"is-biinv→is-iso","idType":"is-biinv f → is-iso f"},{"idAnchor":"1Lab.Equiv.Biinv.html#3215","idDesc":null,"idIdent":"isiso","idType":"(f-eqv : is-equiv f) → is-iso (_⊙_ f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#3126","idDesc":null,"idIdent":"f-iso","idType":"(f-eqv : is-equiv f) → is-iso f"},{"idAnchor":"1Lab.Equiv.Biinv.html#2767","idDesc":null,"idIdent":"is-equiv→pre-is-equiv","idType":"is-equiv f → is-equiv (_⊙_ f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#4833","idDesc":null,"idIdent":"beta","idType":"(g : B₁ → A) →\ng ⊙ f ≡ id → (h : B₁ → A) → f ⊙ h ≡ id → (x : A) → h (f x) ≡ x"},{"idAnchor":"1Lab.Equiv.Biinv.html#3551","idDesc":null,"idIdent":"isiso","idType":"(f-eqv : is-equiv f) → is-iso (λ section → section ⊙ f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#3913","idDesc":null,"idIdent":"is-iso→is-contr-linv","idType":"is-iso f → is-contr (linv f)"},{"idAnchor":"1Lab.Equiv.Biinv.html#3178","idDesc":null,"idIdent":"f⁻¹","idType":"(f-eqv : is-equiv f) → B₁ → A"},{"idAnchor":"1Lab.Equiv.Biinv.html#3462","idDesc":null,"idIdent":"f-iso","idType":"(f-eqv : is-equiv f) → is-iso f"},{"idAnchor":"1Lab.Equiv.Biinv.html#5688","idDesc":null,"idIdent":"iiso","idType":"(ibiinv : is-biinv f) → is-iso f"},{"idAnchor":"1Lab.Equiv.Biinv.html#5390","idDesc":null,"idIdent":"is-biinv-is-prop","idType":"is-prop (is-biinv f)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#4555","idDesc":null,"idIdent":"equalises-cokernel-pair→is-effective-mono","idType":"(C : Precategory o ℓ) (P : Pushout C f f) →\nis-equaliser C (P .i₁) (P .i₂) f → is-effective-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1998","idDesc":null,"idIdent":"is-effective-mono","idType":"(C : Precategory o ℓ) (f : Hom C a b) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#5422","idDesc":null,"idIdent":"is-effective-mono→image","idType":"(C : Precategory o ℓ) →\nis-effective-mono C f →\nM-image C (is-regular-mono C , is-regular-mono→is-mono) f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1380","idDesc":null,"idIdent":"is-regular-mono→is-mono","idType":"(r : is-regular-mono C f) → is-monic C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#5979","idDesc":null,"idIdent":"unique","idType":"(C : Precategory o ℓ) (eff : is-effective-mono C f)\n(other : (cut f ↙ Forget-full-subcat) .Ob)\n(x\n : ↓Hom (const! (cut f)) Forget-full-subcat (itself C eff) other) →\nhom C eff other ≡ x"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1188","idDesc":null,"idIdent":"has-is-eq","idType":"(r : is-regular-mono C f) → is-equaliser C (r .arr₁) (r .arr₂) f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#4809","idDesc":null,"idIdent":"em","idType":"(C : Precategory o ℓ) (P : Pushout C f f)\n(eq₁ : is-equaliser C (P .i₁) (P .i₂) f) →\nis-effective-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1064","idDesc":null,"idIdent":"is-regular-mono","idType":"(C : Precategory o ℓ) (f : Hom C a b) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#3265","idDesc":null,"idIdent":"phi","idType":"(C : Precategory o ℓ) (cokern : Pushout C f f)\n(reg : is-regular-mono C f) →\nHom C (cokern .coapex) (c reg)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2110","idDesc":null,"idIdent":"i₂","idType":"(r : is-effective-mono C f) → Hom C b (r .cokernel)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1164","idDesc":null,"idIdent":"arr₁","idType":"(r : is-regular-mono C f) → Hom C b (r .c)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2361","idDesc":null,"idIdent":"is-effective-mono→is-regular-mono","idType":"(r : is-effective-mono C f) → is-regular-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2491","idDesc":null,"idIdent":"rm","idType":"(r : is-effective-mono C f) → is-regular-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#5876","idDesc":null,"idIdent":"hom","idType":"(C : Precategory o ℓ) (eff : is-effective-mono C f)\n(other : (cut f ↙ Forget-full-subcat) .Ob) →\n↓Hom (const! (cut f)) Forget-full-subcat (itself C eff) other"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#5643","idDesc":null,"idIdent":"itself","idType":"(C : Precategory o ℓ) (eff : is-effective-mono C f) →\n↓Obj (const! (cut f)) Forget-full-subcat"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2145","idDesc":null,"idIdent":"is-cokernel-pair","idType":"(r : is-effective-mono C f) → is-pushout C f (r .i₁) f (r .i₂)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2082","idDesc":null,"idIdent":"cokernel","idType":"is-effective-mono C f → Ob C"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2107","idDesc":null,"idIdent":"i₁","idType":"(r : is-effective-mono C f) → Hom C b (r .cokernel)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1146","idDesc":null,"idIdent":"c","idType":"is-regular-mono C f → Ob C"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#1169","idDesc":null,"idIdent":"arr₂","idType":"(r : is-regular-mono C f) → Hom C b (r .c)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#3952","idDesc":null,"idIdent":"eq","idType":"(C : Precategory o ℓ) (cokern : Pushout C f f)\n(reg : is-regular-mono C f) →\nis-equaliser C (eff C cokern reg .i₁) (eff C cokern reg .i₂) f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#4076","idDesc":null,"idIdent":"p′","idType":"(C : Precategory o ℓ) (cokern : Pushout C f f)\n(reg : is-regular-mono C f)\n(p\n : (C ∘ eff C cokern reg .i₁) e′ ≡ (C ∘ eff C cokern reg .i₂) e′) →\n(C ∘ arr₁ reg) e′ ≡ (C ∘ arr₂ reg) e′"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#5796","idDesc":null,"idIdent":"im","idType":"(C : Precategory o ℓ) (eff : is-effective-mono C f) →\nInitial (cut f ↙ Forget-full-subcat)"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#3353","idDesc":null,"idIdent":"eff","idType":"(C : Precategory o ℓ) (cokern : Pushout C f f)\n(reg : is-regular-mono C f) →\nis-effective-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2747","idDesc":null,"idIdent":"is-regular-mono→is-effective-mono","idType":"(C : Precategory o ℓ) →\nPushout C f f → is-regular-mono C f → is-effective-mono C f"},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#2191","idDesc":null,"idIdent":"has-is-equaliser","idType":"(r : is-effective-mono C f) → is-equaliser C (r .i₁) (r .i₂) f"},{"idAnchor":"Agda.Builtin.Cubical.Sub.html#196","idDesc":null,"idIdent":"inc","idType":"(x : A) → Sub A φ (λ _ → x)"},{"idAnchor":"Agda.Builtin.Cubical.Sub.html#171","idDesc":null,"idIdent":"Sub","idType":"(A : Type a) (φ : I) → Partial φ A → SSet a"},{"idAnchor":"Agda.Builtin.Cubical.Sub.html#380","idDesc":null,"idIdent":"primSubOut","idType":"Sub A φ u → A"},{"idAnchor":"1Lab.Type.html#2800","idDesc":null,"idIdent":"Type∙","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"1Lab.Type.html#2424","idDesc":null,"idIdent":"id","idType":"A → A"},{"idAnchor":"1Lab.Type.html#1573","idDesc":null,"idIdent":"Σ","idType":"(B₁ : A → Type b) → Type (a ⊔ b)"},{"idAnchor":"1Lab.Type.html#921","idDesc":null,"idIdent":"level-of","idType":"Type ℓ → Level"},{"idAnchor":"1Lab.Type.html#2092","idDesc":null,"idIdent":"lower","idType":"Lift ℓ A → A"},{"idAnchor":"1Lab.Type.html#2481","idDesc":null,"idIdent":"_$_","idType":"((x : A) → B₁ x) → (x : A) → B₁ x"},{"idAnchor":"1Lab.Type.html#2227","idDesc":null,"idIdent":"_∘_","idType":"((y : B₁ x) → C x y) → (f : (x : A) → B₁ x) (x : A) → C x (f x)"},{"idAnchor":"1Lab.Type.html#2702","idDesc":null,"idIdent":"Number-Nat","idType":"Number Nat"},{"idAnchor":"1Lab.Type.html#1336","idDesc":null,"idIdent":"⊥","idType":"Type"},{"idAnchor":"1Lab.Type.html#2016","idDesc":null,"idIdent":"Lift","idType":"(ℓ : Level) (A : Type a) → Type (a ⊔ ℓ)"},{"idAnchor":"1Lab.Type.html#1352","idDesc":null,"idIdent":"absurd","idType":"⊥ → A"},{"idAnchor":"1Lab.Type.html#2075","idDesc":null,"idIdent":"lift","idType":"(lower : A) → Lift ℓ A"},{"idAnchor":"1Lab.Type.html#1846","idDesc":null,"idIdent":"_×_","idType":"Type a → Type b → Type (a ⊔ b)"},{"idAnchor":"Data.Bool.html#1739","idDesc":null,"idIdent":"or-associative","idType":"(x y z : Bool) → or x (or y z) ≡ or (or x y) z"},{"idAnchor":"Data.Bool.html#4686","idDesc":null,"idIdent":"xor-associative","idType":"(x y z : Bool) → xor x (xor y z) ≡ xor (xor x y) z"},{"idAnchor":"Data.Bool.html#2647","idDesc":null,"idIdent":"or-falsel","idType":"(x : Bool) → or false x ≡ x"},{"idAnchor":"Data.Bool.html#2236","idDesc":null,"idIdent":"and-truer","idType":"(x : Bool) → and x true ≡ x"},{"idAnchor":"Data.Bool.html#1604","idDesc":null,"idIdent":"and-associative","idType":"(x y z : Bool) → and x (and y z) ≡ and (and x y) z"},{"idAnchor":"Data.Bool.html#5240","idDesc":null,"idIdent":"xor-inverse-self","idType":"(x : Bool) → xor x x ≡ false"},{"idAnchor":"Data.Bool.html#5150","idDesc":null,"idIdent":"xor-truer","idType":"(x : Bool) → xor x true ≡ not x"},{"idAnchor":"Data.Bool.html#12315","idDesc":null,"idIdent":"if_then_else_","idType":"Bool → A → A → A"},{"idAnchor":"Data.Bool.html#3921","idDesc":null,"idIdent":"not-or≡and-not","idType":"(x y : Bool) → not (or x y) ≡ and (not x) (not y)"},{"idAnchor":"Data.Bool.html#4872","idDesc":null,"idIdent":"xor-commutative","idType":"(x y : Bool) → xor x y ≡ xor y x"},{"idAnchor":"Data.Bool.html#2322","idDesc":null,"idIdent":"and-falser","idType":"(x : Bool) → and x false ≡ false"},{"idAnchor":"Data.Bool.html#6578","idDesc":null,"idIdent":"x≠false→x≡true","idType":"(x : Bool) → (x ≡ false → ⊥) → x ≡ true"},{"idAnchor":"Data.Bool.html#8106","idDesc":null,"idIdent":"lemma","idType":"(p : Bool ≃ Bool) (p1 : p .fst true ≡ false)\n(p2 : p .fst false ≡ true) (x : Bool) →\np .fst x ≡ not x"},{"idAnchor":"Data.Bool.html#2476","idDesc":null,"idIdent":"or-falser","idType":"(x : Bool) → or x false ≡ x"},{"idAnchor":"Data.Bool.html#3687","idDesc":null,"idIdent":"not-involutive","idType":"(x : Bool) → not (not x) ≡ x"},{"idAnchor":"Data.Bool.html#2707","idDesc":null,"idIdent":"and-absorbs-orr","idType":"(x y : Bool) → and x (or x y) ≡ x"},{"idAnchor":"Data.Bool.html#2935","idDesc":null,"idIdent":"and-distrib-orl","idType":"(x y z : Bool) → and x (or y z) ≡ or (and x y) (and x z)"},{"idAnchor":"Data.Bool.html#3314","idDesc":null,"idIdent":"or-idempotent","idType":"(x : Bool) → or x x ≡ x"},{"idAnchor":"Data.Bool.html#4048","idDesc":null,"idIdent":"or-complementl","idType":"(x : Bool) → or (not x) x ≡ true"},{"idAnchor":"Data.Bool.html#7037","idDesc":null,"idIdent":"not-is-equiv","idType":"is-equiv not"},{"idAnchor":"Data.Bool.html#2562","idDesc":null,"idIdent":"or-truer","idType":"(x : Bool) → or x true ≡ true"},{"idAnchor":"Data.Bool.html#7895","idDesc":null,"idIdent":"notLemma","idType":"(p : Bool ≃ Bool) →\np .fst true ≡ false →\np .fst false ≡ true → p ≡ (not , not-is-equiv)"},{"idAnchor":"Data.Bool.html#5781","idDesc":null,"idIdent":"imp-truer","idType":"(x : Bool) → imp x true ≡ true"},{"idAnchor":"Data.Bool.html#1250","idDesc":null,"idIdent":"or","idType":"Bool → Bool → Bool"},{"idAnchor":"Data.Bool.html#3794","idDesc":null,"idIdent":"not-and≡or-not","idType":"(x y : Bool) → not (and x y) ≡ or (not x) (not y)"},{"idAnchor":"Data.Bool.html#4154","idDesc":null,"idIdent":"and-complementl","idType":"(x : Bool) → and (not x) x ≡ false"},{"idAnchor":"Data.Bool.html#8466","idDesc":null,"idIdent":"lemma","idType":"(f : Bool → Bool) → (f x ≡ x → ⊥) → f x ≡ not x"},{"idAnchor":"Data.Bool.html#6265","idDesc":null,"idIdent":"Bool-is-set","idType":"is-set Bool"},{"idAnchor":"Data.Bool.html#2055","idDesc":null,"idIdent":"or-commutative","idType":"(x y : Bool) → or x y ≡ or y x"},{"idAnchor":"Data.Bool.html#1193","idDesc":null,"idIdent":"not","idType":"Bool → Bool"},{"idAnchor":"Data.Bool.html#644","idDesc":null,"idIdent":"P","idType":"(p : true ≡ false) → Bool → Type"},{"idAnchor":"Data.Bool.html#7497","idDesc":null,"idIdent":"idLemma","idType":"(p : Bool ≃ Bool) →\np .fst true ≡ true →\np .fst false ≡ false → p ≡ ((λ x → x) , id-equiv)"},{"idAnchor":"Data.Bool.html#1867","idDesc":null,"idIdent":"and-commutative","idType":"(x y : Bool) → and x y ≡ and y x"},{"idAnchor":"Data.Bool.html#5060","idDesc":null,"idIdent":"xor-falser","idType":"(x : Bool) → xor x false ≡ x"},{"idAnchor":"Data.Bool.html#8387","idDesc":null,"idIdent":"Bool-aut≡2","idType":"(Bool ≡ Bool) ≡ Lift (lsuc lzero) Bool"},{"idAnchor":"Data.Bool.html#6064","idDesc":null,"idIdent":"Discrete-Bool","idType":"Discrete Bool"},{"idAnchor":"Data.Bool.html#7697","idDesc":null,"idIdent":"lemma","idType":"(p : Bool ≃ Bool) (p1 : p .fst true ≡ true)\n(p2 : p .fst false ≡ false) (x : Bool) →\np .fst x ≡ x"},{"idAnchor":"Data.Bool.html#12238","idDesc":null,"idIdent":"if","idType":"A → A → Bool → A"},{"idAnchor":"Data.Bool.html#6450","idDesc":null,"idIdent":"x≠true→x≡false","idType":"(x : Bool) → (x ≡ true → ⊥) → x ≡ false"},{"idAnchor":"Data.Bool.html#3076","idDesc":null,"idIdent":"or-distrib-andl","idType":"(x y z : Bool) → or x (and y z) ≡ and (or x y) (or x z)"},{"idAnchor":"Data.Bool.html#5348","idDesc":null,"idIdent":"and-distrib-xorr","idType":"(x y z : Bool) → and (xor x y) z ≡ xor (and x z) (and y z)"},{"idAnchor":"Data.Bool.html#4625","idDesc":null,"idIdent":"xor","idType":"Bool → Bool → Bool"},{"idAnchor":"Data.Bool.html#9138","idDesc":null,"idIdent":"the-iso","idType":"Iso (Bool ≡ Bool) (Lift (lsuc lzero) Bool)"},{"idAnchor":"Data.Bool.html#3216","idDesc":null,"idIdent":"and-idempotent","idType":"(x : Bool) → and x x ≡ x"},{"idAnchor":"Data.Bool.html#5721","idDesc":null,"idIdent":"imp","idType":"Bool → Bool → Bool"},{"idAnchor":"Data.Bool.html#1246","idDesc":null,"idIdent":"and","idType":"Bool → Bool → Bool"},{"idAnchor":"Data.Bool.html#2416","idDesc":null,"idIdent":"and-truel","idType":"(x : Bool) → and true x ≡ x"},{"idAnchor":"Data.Bool.html#578","idDesc":null,"idIdent":"true≠false","idType":"true ≡ false → ⊥"},{"idAnchor":"Data.Bool.html#2821","idDesc":null,"idIdent":"or-absorbs-andr","idType":"(x y : Bool) → or x (and x y) ≡ x"},{"idAnchor":"Cat.Functor.Amnestic.html#4390","idDesc":null,"idIdent":"A≡B","idType":"(F : Functor C D) (d-cat : is-category D) (forget : is-amnestic F)\n(A : Ob C) (B₁ : Ob C) (isom : (C ≅ A) B₁) →\nA ≡ (fst ⊙ snd) (A , B₁ , isom .to)"},{"idAnchor":"Cat.Functor.Amnestic.html#1589","idDesc":null,"idIdent":"Hom→Mor","idType":"(C : Precategory o ℓ) → Hom C x y → Mor C"},{"idAnchor":"Cat.Functor.Amnestic.html#2810","idDesc":null,"idIdent":".extendedlambda0","idType":"(F : Functor C D) (f : C .Hom a b) (c : C .Ob)\n(p : Hom→Mor C (C .id) ≡ Hom→Mor C f) (i : I) →\nI →\nPartial (~ i ∨ i) (D .Hom (F₀ F (p i .fst)) (F₀ F (p i .snd .fst)))"},{"idAnchor":"Cat.Functor.Amnestic.html#1687","idDesc":null,"idIdent":"Mor-path","idType":"(C : Precategory o ℓ) (p : a .fst ≡ b .fst)\n(q : a .snd .fst ≡ b .snd .fst) →\nPathP (λ i → Hom C (p i) (q i)) (a .snd .snd) (b .snd .snd) → a ≡ b"},{"idAnchor":"Cat.Functor.Amnestic.html#4451","idDesc":null,"idIdent":"q","idType":"(F : Functor C D) (d-cat : is-category D) (forget : is-amnestic F)\n(A : Ob C) (B₁ : Ob C) (isom : (C ≅ A) B₁) →\nPathP (λ i → (C ≅ A) (A≡B F d-cat forget A B₁ isom i)) (id-iso C)\nisom"},{"idAnchor":"Cat.Functor.Amnestic.html#2660","idDesc":null,"idIdent":"q","idType":"(F : Functor C D) (f : C .Hom a b) (c : C .Ob)\n(p : Hom→Mor C (C .id) ≡ Hom→Mor C f) →\nHom→Mor D (D .id) ≡ Hom→Mor D (₁ F f)"},{"idAnchor":"Cat.Functor.Amnestic.html#3822","idDesc":null,"idIdent":"p","idType":"(F : Functor C D) (d-cat : is-category D) (forget : is-amnestic F)\n(A : Ob C) (B₁ : Ob C) (isom : (C ≅ A) B₁) →\nΣ (λ c → Path (Mor C) (c , c , C .id) (A , B₁ , isom .to))"},{"idAnchor":"Cat.Functor.Amnestic.html#3522","idDesc":null,"idIdent":"isom′","idType":"(F : Functor C D) (d-cat : is-category D) (forget : is-amnestic F)\n(A : Ob C) (B₁ : Ob C) (isom : (C ≅ A) B₁) →\n(D ≅ F₀ F A) (F₀ F B₁)"},{"idAnchor":"Cat.Functor.Amnestic.html#3442","idDesc":null,"idIdent":"uniq","idType":"(F : Functor C D) (d-cat : is-category D) (forget : is-amnestic F)\n(A : Ob C) (x : Σ (C ≅ A)) →\n(A , id-iso C) ≡ x"},{"idAnchor":"Cat.Functor.Amnestic.html#2439","idDesc":null,"idIdent":"action","idType":"(F : Functor C D) (f : C .Hom a b) →\nΣ (λ c → Hom→Mor C (C .id) ≡ Hom→Mor C f) →\nΣ (λ c → Hom→Mor D (D .id) ≡ Hom→Mor D (₁ F f))"},{"idAnchor":"Cat.Functor.Amnestic.html#1476","idDesc":null,"idIdent":"Mor","idType":"Precategory o ℓ → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Functor.Amnestic.html#2916","idDesc":null,"idIdent":"is-amnestic","idType":"(F : Functor C D) → Type (C.o ⊔ C.ℓ ⊔ D.o ⊔ D.ℓ)"},{"idAnchor":"Cat.Functor.Amnestic.html#3307","idDesc":null,"idIdent":"reflect-category","idType":"(F : Functor C D) → is-category D → is-amnestic F → is-category C"},{"idAnchor":"Cat.Univalent.html#2601","idDesc":null,"idIdent":"iso→path","idType":"(C : Precategory o h) → is-category C → (C ≅ A) B₁ → A ≡ B₁"},{"idAnchor":"Cat.Univalent.html#3444","idDesc":null,"idIdent":"q","idType":"(C : Precategory o h) (isc : is-category C)\n(P : (B₁ : Ob C) → (C ≅ A) B₁ → Type ℓ) (pid : P A (id-iso C))\n(p : (C ≅ A) B₁) (y : Σ (C ≅ A)) →\n(A , id-iso C) ≡ y"},{"idAnchor":"Cat.Univalent.html#3222","idDesc":null,"idIdent":"J-iso","idType":"(C : Precategory o h) →\nis-category C →\n(P : (B₁ : Ob C) → (C ≅ A) B₁ → Type ℓ) →\nP A (id-iso C) → (p : (C ≅ A) B₁) → P B₁ p"},{"idAnchor":"Cat.Univalent.html#7745","idDesc":null,"idIdent":"path→from-∙","idType":"(C : Precategory o h) (p : A ≡ B₁) (q : B₁ ≡ C₁) →\npath→iso C (p ∙ q) .from ≡\n(C ∘ path→iso C p .from) (path→iso C q .from)"},{"idAnchor":"Cat.Univalent.html#1379","idDesc":null,"idIdent":"path→iso","idType":"(C : Precategory o h) → A ≡ B₁ → (C ≅ A) B₁"},{"idAnchor":"Cat.Univalent.html#2116","idDesc":null,"idIdent":"is-equiv-total","idType":"(C : Precategory o h) (iscat : is-category C) →\nis-equiv (total (λ A → path→iso C))"},{"idAnchor":"Cat.Univalent.html#1711","idDesc":null,"idIdent":"Q","idType":"(C : Precategory o h) (iscat : is-category C) → Ob C → Type h"},{"idAnchor":"Cat.Univalent.html#6622","idDesc":null,"idIdent":"Hom-pathp-reflr-iso","idType":"(C : Precategory o h) (isc : is-category C) →\n(C ∘ q .to) h ≡ h' →\nPathP (λ i → Hom C A (iso→path C isc q i)) h h'"},{"idAnchor":"Cat.Univalent.html#3487","idDesc":null,"idIdent":"iso→path-id","idType":"(C : Precategory o h) (isc : is-category C) →\niso→path C isc (id-iso C) ≡ refl"},{"idAnchor":"Cat.Univalent.html#8312","idDesc":null,"idIdent":"Hom-pathp-id","idType":"(C : Precategory o h) →\nPathP (λ i → Hom C (p i) (q i)) (id C) h' →\n(C ∘ path→iso C q .to) (path→iso C p .from) ≡ h'"},{"idAnchor":"Cat.Univalent.html#1560","idDesc":null,"idIdent":"path→iso-is-equiv","idType":"(C : Precategory o h) → is-category C → is-equiv (path→iso C)"},{"idAnchor":"Cat.Univalent.html#7342","idDesc":null,"idIdent":"path→to-∙","idType":"(C : Precategory o h) (p : A ≡ B₁) (q : B₁ ≡ C₁) →\npath→iso C (p ∙ q) .to ≡ (C ∘ path→iso C q .to) (path→iso C p .to)"},{"idAnchor":"Cat.Univalent.html#4937","idDesc":null,"idIdent":".extendedlambda0","idType":"(C : Precategory o h) (p : A ≡ C₁) (q : B₁ ≡ D) (h : Hom C A B₁)\n(i i₁ : I) →\nPartial (~ i ∨ i) (Hom C (p (i ∨ i₁)) (q (i ∨ i₁)))"},{"idAnchor":"Cat.Univalent.html#6917","idDesc":null,"idIdent":"Hom-pathp-iso","idType":"(C : Precategory o h) (isc : is-category C) →\n(C ∘ q .to) ((C ∘ h) (p .from)) ≡ h' →\nPathP (λ i → Hom C (iso→path C isc p i) (iso→path C isc q i)) h h'"},{"idAnchor":"Cat.Univalent.html#2966","idDesc":null,"idIdent":"iso≃path→is-category","idType":"(C : Precategory o h) → (A ≡ B₁) ≃ (C ≅ A) B₁ → is-category C"},{"idAnchor":"Cat.Univalent.html#6036","idDesc":null,"idIdent":"Hom-pathp-refll-iso","idType":"(C : Precategory o h) (isc : is-category C) →\n(C ∘ h) (p .from) ≡ h' →\nPathP (λ i → Hom C (iso→path C isc p i) B₁) h h'"},{"idAnchor":"Cat.Univalent.html#6335","idDesc":null,"idIdent":"Hom-pathp-reflr","idType":"(C : Precategory o h) →\n(C ∘ path→iso C q .to) h ≡ h' → PathP (λ i → Hom C A (q i)) h h'"},{"idAnchor":"Cat.Univalent.html#5092","idDesc":null,"idIdent":".extendedlambda1","idType":"(C : Precategory o h) (p : A ≡ C₁) (q : B₁ ≡ D) (h : Hom C A B₁)\n(i : I) →\nI → Partial (~ i ∨ i) (C .Hom (p (i ∧ i)) (q (i ∧ i)))"},{"idAnchor":"Cat.Univalent.html#5329","idDesc":null,"idIdent":"q′","idType":"(C : Precategory o h) (p : A ≡ C₁) (q : B₁ ≡ D) (h : Hom C A B₁)\n(i : I) →\nPathP (λ z → Hom C B₁ (q (z ∧ z))) (id C) (path→iso C q .to)"},{"idAnchor":"Cat.Univalent.html#5814","idDesc":null,"idIdent":"Hom-pathp-refll","idType":"(C : Precategory o h) →\n(C ∘ h) (path→iso C p .from) ≡ h' →\nPathP (λ i → Hom C (p i) B₁) h h'"},{"idAnchor":"Cat.Univalent.html#4252","idDesc":null,"idIdent":"Ob-is-groupoid","idType":"(C : Precategory o h) → is-category C → is-groupoid (C .Ob)"},{"idAnchor":"Cat.Univalent.html#4670","idDesc":null,"idIdent":"Hom-transport","idType":"(C : Precategory o h) (p : A ≡ C₁) (q : B₁ ≡ D) (h : Hom C A B₁) →\ntransport (λ i → Hom C (p i) (q i)) h ≡\n(C ∘ path→iso C q .to) ((C ∘ h) (path→iso C p .from))"},{"idAnchor":"Cat.Univalent.html#946","idDesc":null,"idIdent":"is-category","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Univalent.html#1709","idDesc":null,"idIdent":"P","idType":"(C : Precategory o h) (iscat : is-category C) → Ob C → Type o"},{"idAnchor":"Cat.Univalent.html#5240","idDesc":null,"idIdent":"p′","idType":"(C : Precategory o h) (p : A ≡ C₁) (q : B₁ ≡ D) (h : Hom C A B₁)\n(i : I) →\nPathP (λ z → Hom C (p (z ∧ z)) A) (id C) (path→iso C p .from)"},{"idAnchor":"Cat.Univalent.html#5521","idDesc":null,"idIdent":"Hom-pathp","idType":"(C : Precategory o h) →\n(C ∘ path→iso C q .to) ((C ∘ h) (path→iso C p .from)) ≡ h' →\nPathP (λ i → Hom C (p i) (q i)) h h'"},{"idAnchor":"Cat.Univalent.html#8164","idDesc":null,"idIdent":"path→to-sym","idType":"(C : Precategory o h) (p : A ≡ B₁) →\npath→iso C p .from ≡ path→iso C (sym p) .to"},{"idAnchor":"Cat.Displayed.Reasoning.html#6397","idDesc":null,"idIdent":"_⟩∘′⟨refl","idType":"(E : Displayed B₁ o′′ ℓ′′) →\nPathP (λ i → Hom[ E ] (p i) b′ c′) f₁′ f₂′ →\n(E ∘′ hom[ E ] p f₁′) g′ ≡ (E ∘′ f₂′) g′"},{"idAnchor":"Cat.Displayed.Reasoning.html#4730","idDesc":null,"idIdent":"kill₁","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ g) (q : g ≡ h) →\nPathP (λ i → Hom[ E ] (p i) a′ b′) h₁′ h₂′ →\nhom[ E ] (p ∙ q) h₁′ ≡ hom[ E ] q h₂′"},{"idAnchor":"Cat.Displayed.Reasoning.html#4210","idDesc":null,"idIdent":"smashl","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ f') (q : B₁ ._∘_ f' g ≡ h) →\nhom[ E ] q ((E ∘′ hom[ E ] p f′) g′) ≡\nhom[ E ] (ap (λ section → B₁ ._∘_ section g) p ∙ q) ((E ∘′ f′) g′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#5828","idDesc":null,"idIdent":"hom[]⟩⟨_","idType":"(E : Displayed B₁ o′′ ℓ′′) →\nf′ ≡ g′ → hom[ E ] p f′ ≡ hom[ E ] p g′"},{"idAnchor":"Cat.Displayed.Reasoning.html#3600","idDesc":null,"idIdent":".extendedlambda1","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ f') (i i₁ : I) →\nPartial (~ i ∨ i) (Hom[ E ] (B₁ ._∘_ (p (i ∨ i₁)) g) a′ c′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#2769","idDesc":null,"idIdent":"whisker-r","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : g ≡ g') →\n(E ∘′ f′) (hom[ E ] p g′) ≡\nhom[ E ] (ap (B₁ ._∘_ f) p) ((E ∘′ f′) g′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#4512","idDesc":null,"idIdent":"cancel","idType":"(E : Displayed B₁ o′′ ℓ′′) (p q : f ≡ g) →\nPathP (λ i → Hom[ E ] (q i) a′ b′) f′ g′ → hom[ E ] p f′ ≡ g′"},{"idAnchor":"Cat.Displayed.Reasoning.html#3286","idDesc":null,"idIdent":"whisker-l","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ f') →\n(E ∘′ hom[ E ] p f′) g′ ≡\nhom[ E ] (ap (λ section → B₁ ._∘_ section g) p) ((E ∘′ f′) g′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#1609","idDesc":null,"idIdent":"reindex","idType":"(E : Displayed B₁ o′′ ℓ′′) (p q : f ≡ g) →\nhom[ E ] p f′ ≡ hom[ E ] q f′"},{"idAnchor":"Cat.Displayed.Reasoning.html#2090","idDesc":null,"idIdent":"hom[]-∙","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ g) (q : g ≡ h) →\nhom[ E ] q (hom[ E ] p f′) ≡ hom[ E ] (p ∙ q) f′"},{"idAnchor":"Cat.Displayed.Reasoning.html#1311","idDesc":null,"idIdent":"hom[_]⁻","idType":"(E : Displayed B₁ o′′ ℓ′′) →\ng ≡ f → Hom[ E ] f x y → Hom[ E ] g x y"},{"idAnchor":"Cat.Displayed.Reasoning.html#5988","idDesc":null,"idIdent":"_⟩∘′⟨_","idType":"(E : Displayed B₁ o′′ ℓ′′) →\nPathP (λ i → Hom[ E ] (p i) b′ c′) f₁′ f₂′ →\nPathP (λ i → Hom[ E ] (q i) a′ b′) g₁′ g₂′ →\n(E ∘′ hom[ E ] p f₁′) (hom[ E ] q g₁′) ≡ (E ∘′ f₂′) g₂′"},{"idAnchor":"Cat.Displayed.Reasoning.html#5185","idDesc":null,"idIdent":"weave","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ h) (p′ : f ≡ g) (q : g ≡ h) →\nPathP (λ i → Hom[ E ] (p′ i) a′ b′) h₁′ h₂′ →\nhom[ E ] p h₁′ ≡ hom[ E ] q h₂′"},{"idAnchor":"Cat.Displayed.Reasoning.html#1181","idDesc":null,"idIdent":"hom[_]","idType":"(E : Displayed B₁ o′′ ℓ′′) →\nf ≡ g → Hom[ E ] f x y → Hom[ E ] g x y"},{"idAnchor":"Cat.Displayed.Reasoning.html#7001","idDesc":null,"idIdent":"split⟩⟨_","idType":"(E : Displayed B₁ o′′ ℓ′′) →\n(E ∘′ hom[ E ] p f₁′) (hom[ E ] q g₁′) ≡ (E ∘′ f₂′) g₂′ →\nhom[ E ] (ap₂ (B₁ ._∘_) p q) ((E ∘′ f₁′) g₁′) ≡ (E ∘′ f₂′) g₂′"},{"idAnchor":"Cat.Displayed.Reasoning.html#3908","idDesc":null,"idIdent":"smashr","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : g ≡ g') (q : B₁ ._∘_ f g' ≡ h) →\nhom[ E ] q ((E ∘′ f′) (hom[ E ] p g′)) ≡\nhom[ E ] (ap (B₁ ._∘_ f) p ∙ q) ((E ∘′ f′) g′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#6696","idDesc":null,"idIdent":"refl⟩∘′⟨_","idType":"(E : Displayed B₁ o′′ ℓ′′) →\nPathP (λ i → Hom[ E ] (q i) a′ b′) g₁′ g₂′ →\n(E ∘′ f′) (hom[ E ] q g₁′) ≡ (E ∘′ f′) g₂′"},{"idAnchor":"Cat.Displayed.Reasoning.html#7415","idDesc":null,"idIdent":"hom[]","idType":"(E : Displayed B₁ o′′ ℓ′′) → Hom[ E ] f x y → Hom[ E ] g x y"},{"idAnchor":"Cat.Displayed.Reasoning.html#3078","idDesc":null,"idIdent":".extendedlambda0","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : g ≡ g') (i i₁ : I) →\nPartial (~ i ∨ i) (Hom[ E ] (B₁ ._∘_ f (p (i ∨ i₁))) a′ c′)"},{"idAnchor":"Cat.Displayed.Reasoning.html#5458","idDesc":null,"idIdent":"split","idType":"(E : Displayed B₁ o′′ ℓ′′) (p : f ≡ f') (q : g ≡ g') →\nhom[ E ] (ap₂ (B₁ ._∘_) p q) ((E ∘′ f′) g′) ≡\n(E ∘′ hom[ E ] p f′) (hom[ E ] q g′)"},{"idAnchor":"Data.Power.html#2161","idDesc":null,"idIdent":"_∪_","idType":"ℙ X → ℙ X → ℙ X"},{"idAnchor":"Data.Power.html#1729","idDesc":null,"idIdent":"maximal","idType":"ℙ X"},{"idAnchor":"Data.Power.html#1076","idDesc":null,"idIdent":"_⊆_","idType":"ℙ X → ℙ X → Type X.ℓ"},{"idAnchor":"Data.Power.html#1323","idDesc":null,"idIdent":"ℙ-ext","idType":"A ⊆ B₁ → B₁ ⊆ A → A ≡ B₁"},{"idAnchor":"Data.Power.html#884","idDesc":null,"idIdent":"_∈_","idType":"X → ℙ X → Type X.ℓ"},{"idAnchor":"Data.Power.html#645","idDesc":null,"idIdent":"ℙ-is-set","idType":"is-set (ℙ X)"},{"idAnchor":"Data.Power.html#1851","idDesc":null,"idIdent":"_∩_","idType":"ℙ X → ℙ X → ℙ X"},{"idAnchor":"Data.Power.html#1785","idDesc":null,"idIdent":"minimal","idType":"ℙ X"},{"idAnchor":"Data.Power.html#596","idDesc":null,"idIdent":"ℙ","idType":"Type ℓ → Type (lsuc ℓ)"},{"idAnchor":"Cat.Functor.Kan.Right.html#1749","idDesc":null,"idIdent":"σ","idType":"(r : Ran p F) → M F∘ p => F → M => r .Ext"},{"idAnchor":"Cat.Functor.Kan.Right.html#2520","idDesc":null,"idIdent":"Co-lan→Ran","idType":"(p : Functor C C′) (F : Functor C D) → Lan (op p) (op F) → Ran p F"},{"idAnchor":"Cat.Functor.Kan.Right.html#3190","idDesc":null,"idIdent":"σ′op","idType":"(p : Functor C C′) (F : Functor C D) (lan : Lan (op p) (op F))\n(p₁ : β ≡ (ran p F lan .eps ∘nt whiskerl σ′)) →\nExt lan => op M"},{"idAnchor":"Cat.Functor.Kan.Right.html#1884","idDesc":null,"idIdent":"σ-uniq","idType":"(r : Ran p F) → β ≡ (r .eps ∘nt whiskerl σ′) → r .σ β ≡ σ′"},{"idAnchor":"Cat.Functor.Kan.Right.html#2008","idDesc":null,"idIdent":"σ-uniq₂","idType":"(r : Ran p F) (β : M F∘ p => F) →\nβ ≡ (eps r ∘nt whiskerl σ₁′) →\nβ ≡ (eps r ∘nt whiskerl σ₂′) → σ₁′ ≡ σ₂′"},{"idAnchor":"Cat.Functor.Kan.Right.html#1621","idDesc":null,"idIdent":"Ran","idType":"(p : Functor C C′) (F : Functor C D) →\nType (C.o ⊔ C.ℓ ⊔ C′.o ⊔ C′.ℓ ⊔ D.o ⊔ D.ℓ)"},{"idAnchor":"Cat.Functor.Kan.Right.html#2636","idDesc":null,"idIdent":"ran","idType":"(p : Functor C C′) (F : Functor C D) (lan : Lan (op p) (op F)) →\nRan p F"},{"idAnchor":"Cat.Functor.Kan.Right.html#2832","idDesc":null,"idIdent":"α′","idType":"(p : Functor C C′) (F : Functor C D) (lan : Lan (op p) (op F))\n(α : M F∘ p => F) →\nop F => op M F∘ op p"},{"idAnchor":"Cat.Functor.Kan.Right.html#1724","idDesc":null,"idIdent":"eps","idType":"(r : Ran p F) → r .Ext F∘ p => F"},{"idAnchor":"Cat.Functor.Kan.Right.html#4045","idDesc":null,"idIdent":"complete→ran","idType":"(lims : is-complete κ κ E) (p : Functor C D) (F : Functor C E) →\nRan p F"},{"idAnchor":"Cat.Functor.Kan.Right.html#1701","idDesc":null,"idIdent":"Ext","idType":"Ran p F → Functor C′ D"},{"idAnchor":"Cat.Functor.Kan.Right.html#1805","idDesc":null,"idIdent":"σ-comm","idType":"(r : Ran p F) → (r .eps ∘nt whiskerl (r .σ β)) ≡ β"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#963","idDesc":null,"idIdent":"bwdShape","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₁')"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#9195","idDesc":null,"idIdent":"univalentRecord","idType":"(spec : Spec Nat) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#9591","idDesc":null,"idIdent":"actual-fields","idType":"(spec : Spec TypedTm) → List (∑ InternalField (λ _ → TypedTm))"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#10190","idDesc":null,"idIdent":"closure","idType":"(spec : Spec TypedTm) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#6644","idDesc":null,"idIdent":"prevPath","idType":"(spec : Spec Nat) (k : Nat) (namen : Name) (n : Nat)\n(fs : List (InternalField × Nat)) →\nTerm"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#11096","idDesc":null,"idIdent":"Derive-univalent-record","idType":"Term → Term → TC ⊤"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#5757","idDesc":null,"idIdent":"fwdClauses","idType":"(spec : Spec Nat) →\nNat →\nList (InternalField × Nat) →\nList (Name × Term) → List (Name × Term)"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#8604","idDesc":null,"idIdent":"body","idType":"(spec : Spec Nat) → List Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#3651","idDesc":null,"idIdent":"bwdClause","idType":"(spec : Spec Nat) → Vec Term 4 → Name × Name × Nat → Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#3299","idDesc":null,"idIdent":"fwdProperty","idType":"(spec : Spec Nat) → Vec Term 4 → Term → Term → Name × Nat → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#4162","idDesc":null,"idIdent":"fwdBwdDatum","idType":"(spec : Spec Nat) →\nVec Term 4 → Term → Term → Name × Name × Nat → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#1422","idDesc":null,"idIdent":"explicitUnivalentStr","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) (fwd : fwdShape S₁ ι)\n(bwd : bwdShape S₁ ι) →\nfwdBwdShape S₁ ι fwd bwd →\nbwdFwdShape S₁ ι fwd bwd → is-univalent' S₁ ι"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#1661","idDesc":null,"idIdent":"isom","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) (fwd : fwdShape S₁ ι)\n(bwd : bwdShape S₁ ι) (fwdBwd : fwdBwdShape S₁ ι fwd bwd)\n(bwdFwd : bwdFwdShape S₁ ι fwd bwd) (A B₁ : ∑ (Type ℓ) S₁)\n(e : A .fst ≃ B₁ .fst) →\nIso (ι A B₁ e) (PathP (λ i → S₁ (ua e i)) (A .snd) (B₁ .snd))"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#5171","idDesc":null,"idIdent":"bwdFwdClause","idType":"(spec : Spec Nat) → Vec Term 4 → Term → Name × Name × Nat → Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#10502","idDesc":null,"idIdent":"environment","idType":"(spec : Spec TypedTm) → List (Arg Term)"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#6849","idDesc":null,"idIdent":"body","idType":"(spec : Spec Nat) → List Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#1112","idDesc":null,"idIdent":"fwdBwdShape","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) →\nfwdShape S₁ ι → bwdShape S₁ ι → Type (lsuc ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#535","idDesc":null,"idIdent":"pathMap","idType":"(f : S₁ i → T i) → PathP S₁ x y → PathP T (f x) (f y)"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#8853","idDesc":null,"idIdent":"bwdFwdClauses","idType":"(spec : Spec Nat) → List (InternalField × Nat) → List Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#10981","idDesc":null,"idIdent":"spec→is-univalent","idType":"(spec : Spec TypedTm) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#7001","idDesc":null,"idIdent":"bwd","idType":"(spec : Spec Nat) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#1268","idDesc":null,"idIdent":"bwdFwdShape","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) →\nfwdShape S₁ ι → bwdShape S₁ ι → Type (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₁')"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#4792","idDesc":null,"idIdent":"fwdBwdProperty","idType":"(spec : Spec Nat) →\nVec Term 4 → Term → Term → Term → Name × Nat → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#7557","idDesc":null,"idIdent":"fwdBwdClauses","idType":"(spec : Spec Nat) →\nNat →\nList (InternalField × Nat) →\nList (Name × Term) → List (Name × Term)"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#814","idDesc":null,"idIdent":"fwdShape","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' S₁) →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₁')"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#7111","idDesc":null,"idIdent":"bwdClauses","idType":"(spec : Spec Nat) → List (InternalField × Nat) → List Clause"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#10770","idDesc":null,"idIdent":"closure-type","idType":"(spec : Spec TypedTm) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#8385","idDesc":null,"idIdent":"prevPath","idType":"(spec : Spec Nat) (k : Nat) (namen : Name) (n : Nat)\n(fs : List (InternalField × Nat)) →\nTerm"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#7421","idDesc":null,"idIdent":"fwdBwd","idType":"(spec : Spec Nat) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#8707","idDesc":null,"idIdent":"bwdFwd","idType":"(spec : Spec Nat) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#5647","idDesc":null,"idIdent":"fwd","idType":"(spec : Spec Nat) → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#9868","idDesc":null,"idIdent":"closed-over-spec","idType":"(spec : Spec TypedTm) → Spec Nat"},{"idAnchor":"1Lab.Univalence.SIP.Record.html#2519","idDesc":null,"idIdent":"fwdDatum","idType":"(spec : Spec Nat) → Vec Term 4 → Term → Name × Name × Nat → Term"},{"idAnchor":"1Lab.HIT.Sinfty.html#2798","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : S∞) (i j : I) → I → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → S∞"},{"idAnchor":"1Lab.HIT.Sinfty.html#548","idDesc":null,"idIdent":"merid","idType":"S∞ → N ≡ S"},{"idAnchor":"1Lab.HIT.Sinfty.html#2960","idDesc":null,"idIdent":"is-contrS∞","idType":"is-contr S∞"},{"idAnchor":"1Lab.HIT.Sinfty.html#2681","idDesc":null,"idIdent":"pathsS∞","idType":"(x : S∞) → N ≡ x"},{"idAnchor":"1Lab.HIT.Sinfty.html#517","idDesc":null,"idIdent":"S∞","idType":"Type"},{"idAnchor":"1Lab.HIT.Sinfty.html#958","idDesc":null,"idIdent":"pathsS∞′","idType":"(x : S∞) → N ≡ x"},{"idAnchor":"1Lab.HIT.Sinfty.html#537","idDesc":null,"idIdent":"S","idType":"S∞"},{"idAnchor":"1Lab.HIT.Sinfty.html#1975","idDesc":null,"idIdent":"is-contrS∞′","idType":"is-contr S∞"},{"idAnchor":"1Lab.HIT.Sinfty.html#535","idDesc":null,"idIdent":"N","idType":"S∞"},{"idAnchor":"Algebra.Lattice.html#2516","idDesc":null,"idIdent":"Lattice","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Lattice.html#6324","idDesc":null,"idIdent":"ff","idType":"(l : Lattice-on A) → is-fully-faithful (covariant-order-map l)"},{"idAnchor":"Algebra.Lattice.html#3330","idDesc":null,"idIdent":"Lattice-univalent","idType":"is-univalent (HomT→Str Lattice≃)"},{"idAnchor":"Algebra.Lattice.html#5436","idDesc":null,"idIdent":"q","idType":"(l : Lattice-on A)\n(p\n : Semilattice-on→Meet-on (Lattice-on→is-meet-semi l) .underlying\n   .Hom x y) →\ny ≡ (l L∨ x) y"},{"idAnchor":"Algebra.Lattice.html#2262","idDesc":null,"idIdent":"Lattice-on→is-meet-semi","idType":"(r : Lattice-on A) → is-semilattice (_L∧_ r)"},{"idAnchor":"Algebra.Lattice.html#2115","idDesc":null,"idIdent":"_L∨_","idType":"Lattice-on A → A → A → A"},{"idAnchor":"Algebra.Lattice.html#2816","idDesc":null,"idIdent":"Lattice→","idType":"(A B₁ : Lattice ℓ) (f : A .fst → B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Lattice.html#6694","idDesc":null,"idIdent":"eso","idType":"(l : Lattice-on A) → is-split-eso (covariant-order-map l)"},{"idAnchor":"Algebra.Lattice.html#2043","idDesc":null,"idIdent":"Lattice-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Lattice.html#4936","idDesc":null,"idIdent":"covariant-order-map","idType":"(l : Lattice-on A) →\nMonotone-map (Semilattice-on→Meet-on (Lattice-on→is-meet-semi l))\n(Semilattice-on→Join-on (Lattice-on→is-join-semi l))"},{"idAnchor":"Algebra.Lattice.html#2180","idDesc":null,"idIdent":"has-is-lattice","idType":"(r : Lattice-on A) → is-lattice (r ._L∧_) (r ._L∨_)"},{"idAnchor":"Algebra.Lattice.html#1777","idDesc":null,"idIdent":"eqv","idType":"Iso (is-lattice _∧₁_ _∨₁_)\n(∑ (is-semilattice _∧₁_)\n (λ has-meets →\n    ∑ (is-semilattice _∨₁_)\n    (λ has-joins →\n       ∑ ({x y : A} → (x ∧₁ (x ∨₁ y)) ≡ x)\n       (λ ∧-absorbs-∨ → {x y : A} → (x ∨₁ (x ∧₁ y)) ≡ x))))"},{"idAnchor":"Algebra.Lattice.html#634","idDesc":null,"idIdent":"has-joins","idType":"is-lattice _∧₁_ _∨₁_ → is-semilattice _∨₁_"},{"idAnchor":"Algebra.Lattice.html#2349","idDesc":null,"idIdent":"Lattice-on→is-join-semi","idType":"(r : Lattice-on A) → is-semilattice (_L∨_ r)"},{"idAnchor":"Algebra.Lattice.html#514","idDesc":null,"idIdent":"is-lattice","idType":"(_∧₁_ _∨₁_ : A → A → A) → Type A.ℓ"},{"idAnchor":"Algebra.Lattice.html#2094","idDesc":null,"idIdent":"_L∧_","idType":"Lattice-on A → A → A → A"},{"idAnchor":"Algebra.Lattice.html#1837","idDesc":null,"idIdent":"H-Level-is-lattice","idType":"H-Level (is-lattice M J₁) (suc n)"},{"idAnchor":"Algebra.Lattice.html#4303","idDesc":null,"idIdent":"Lattice→contravariant-on","idType":"Lattice-on A → Poset (level-of A) (level-of A)"},{"idAnchor":"Algebra.Lattice.html#4152","idDesc":null,"idIdent":"Lattice→covariant-on","idType":"Lattice-on A → Poset (level-of A) (level-of A)"},{"idAnchor":"Algebra.Lattice.html#3068","idDesc":null,"idIdent":"Lattice≃","idType":"(A B₁ : Lattice ℓ) → A .fst ≃ B₁ .fst → Type ℓ"},{"idAnchor":"Algebra.Lattice.html#5844","idDesc":null,"idIdent":"covariant-order-map-is-equivalence","idType":"(l : Lattice-on A) → is-equivalence (covariant-order-map l)"},{"idAnchor":"Algebra.Lattice.html#1436","idDesc":null,"idIdent":"∨-absorbs-∧","idType":"is-lattice _∧₁_ _∨₁_ → (x ∨₁ (x ∧₁ y)) ≡ x"},{"idAnchor":"Algebra.Lattice.html#1390","idDesc":null,"idIdent":"∧-absorbs-∨","idType":"is-lattice _∧₁_ _∨₁_ → (x ∧₁ (x ∨₁ y)) ≡ x"},{"idAnchor":"Algebra.Lattice.html#5240","idDesc":null,"idIdent":"F","idType":"(l : Lattice-on A) →\nMonotone-map (Semilattice-on→Meet-on (Lattice-on→is-meet-semi l))\n(Semilattice-on→Join-on (Lattice-on→is-join-semi l))"},{"idAnchor":"Algebra.Lattice.html#3022","idDesc":null,"idIdent":"pres-∨","idType":"Lattice→ A B₁ f →\n(x y : A .fst) → f (A .snd ._L∨_ x y) ≡ B₁ .snd ._L∨_ (f x) (f y)"},{"idAnchor":"Algebra.Lattice.html#2973","idDesc":null,"idIdent":"pres-∧","idType":"Lattice→ A B₁ f →\n(x y : A .fst) → f (A .snd ._L∧_ x y) ≡ B₁ .snd ._L∧_ (f x) (f y)"},{"idAnchor":"Algebra.Lattice.html#599","idDesc":null,"idIdent":"has-meets","idType":"is-lattice _∧₁_ _∨₁_ → is-semilattice _∧₁_"},{"idAnchor":"1Lab.Counterexamples.Russell.html#683","idDesc":null,"idIdent":"V","idType":"Type"},{"idAnchor":"1Lab.Counterexamples.Russell.html#1468","idDesc":null,"idIdent":"Ø","idType":"V"},{"idAnchor":"1Lab.Counterexamples.Russell.html#1492","idDesc":null,"idIdent":"X∉Ø","idType":"X ∈ Ø → ⊥"},{"idAnchor":"1Lab.Counterexamples.Russell.html#2300","idDesc":null,"idIdent":"Russell","idType":"⊥"},{"idAnchor":"1Lab.Counterexamples.Russell.html#1239","idDesc":null,"idIdent":"_∈_","idType":"V → V → Type"},{"idAnchor":"1Lab.Counterexamples.Russell.html#2184","idDesc":null,"idIdent":"X∉X→X∈R","idType":"(X ∈ X → ⊥) → X ∈ R"},{"idAnchor":"1Lab.Counterexamples.Russell.html#1830","idDesc":null,"idIdent":"X∈R→X∉X","idType":"X ∈ R → X ∈ X → ⊥"},{"idAnchor":"1Lab.Counterexamples.Russell.html#2064","idDesc":null,"idIdent":"R∉R","idType":"R ∈ R → ⊥"},{"idAnchor":"1Lab.Counterexamples.Russell.html#1716","idDesc":null,"idIdent":"R","idType":"V"},{"idAnchor":"1Lab.Counterexamples.Russell.html#700","idDesc":null,"idIdent":"set","idType":"(A : Type) → (A → V) → V"},{"idAnchor":"Data.Nat.Properties.html#5596","idDesc":null,"idIdent":"¬sucx≤x","idType":"(x : Nat) → suc x ≤ x → ⊥"},{"idAnchor":"Data.Nat.Properties.html#746","idDesc":null,"idIdent":"+-zeror","idType":"(x : Nat) → x + 0 ≡ x"},{"idAnchor":"Data.Nat.Properties.html#5777","idDesc":null,"idIdent":"≤-split","idType":"(x y : Nat) → x < y ⊎ y < x ⊎ x ≡ y"},{"idAnchor":"Data.Nat.Properties.html#2953","idDesc":null,"idIdent":"^-oner","idType":"(x : Nat) → x ^ 1 ≡ x"},{"idAnchor":"Data.Nat.Properties.html#2667","idDesc":null,"idIdent":"*-associative","idType":"(x y z : Nat) → x * y * z ≡ x * (y * z)"},{"idAnchor":"Data.Nat.Properties.html#6053","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\n(suc y ≤ x → ⊥) →\n(suc x ≤ y → ⊥) →\n(x₁ y₁ : Nat) → (suc x₁ ≤ y₁ → ⊥) → (suc y₁ ≤ x₁ → ⊥) → x₁ ≡ y₁"},{"idAnchor":"Data.Nat.Properties.html#2122","idDesc":null,"idIdent":"*-zeror","idType":"(x : Nat) → x * 0 ≡ 0"},{"idAnchor":"Data.Nat.Properties.html#2001","idDesc":null,"idIdent":"*-oner","idType":"(x : Nat) → x * 1 ≡ x"},{"idAnchor":"Data.Nat.Properties.html#2203","idDesc":null,"idIdent":"*-commutative","idType":"(x y : Nat) → x * y ≡ y * x"},{"idAnchor":"Data.Nat.Properties.html#7436","idDesc":null,"idIdent":"*-preserves-≤","idType":"(x y x' y' : Nat) → x ≤ y → x' ≤ y' → x * x' ≤ y * y'"},{"idAnchor":"Data.Nat.Properties.html#6642","idDesc":null,"idIdent":"+-preserves-≤r","idType":"(x y z : Nat) → x ≤ y → x + z ≤ y + z"},{"idAnchor":"Data.Nat.Properties.html#553","idDesc":null,"idIdent":"+-associative","idType":"(x y z : Nat) → x + y + z ≡ x + (y + z)"},{"idAnchor":"Data.Nat.Properties.html#1948","idDesc":null,"idIdent":"*-onel","idType":"(x : Nat) → 1 * x ≡ x"},{"idAnchor":"Data.Nat.Properties.html#6494","idDesc":null,"idIdent":"+-preserves-≤l","idType":"(x y z : Nat) → x ≤ y → z + x ≤ z + y"},{"idAnchor":"Data.Nat.Properties.html#1218","idDesc":null,"idIdent":"*-distrib-+r","idType":"(x y z : Nat) → (x + y) * z ≡ x * z + y * z"},{"idAnchor":"Data.Nat.Properties.html#3005","idDesc":null,"idIdent":"^-onel","idType":"(x : Nat) → 1 ^ x ≡ 1"},{"idAnchor":"Data.Nat.Properties.html#7999","idDesc":null,"idIdent":"max-assoc","idType":"(x y z : Nat) → max x (max y z) ≡ max (max x y) z"},{"idAnchor":"Data.Nat.Properties.html#7045","idDesc":null,"idIdent":"*-preserves-≤l","idType":"(x y z : Nat) → x ≤ y → z * x ≤ z * y"},{"idAnchor":"Data.Nat.Properties.html#1484","idDesc":null,"idIdent":"*-sucr","idType":"(m n : Nat) → m * suc n ≡ m + m * n"},{"idAnchor":"Data.Nat.Properties.html#871","idDesc":null,"idIdent":"+-sucr","idType":"(x y : Nat) → x + suc y ≡ suc (x + y)"},{"idAnchor":"Data.Nat.Properties.html#9086","idDesc":null,"idIdent":"min-≤l","idType":"(x y : Nat) → min x y ≤ x"},{"idAnchor":"Data.Nat.Properties.html#7234","idDesc":null,"idIdent":"*-preserves-≤r","idType":"(x y z : Nat) → x ≤ y → x * z ≤ y * z"},{"idAnchor":"Data.Nat.Properties.html#7637","idDesc":null,"idIdent":"+-reflects-≤l","idType":"(x y z : Nat) → z + x ≤ z + y → x ≤ y"},{"idAnchor":"Data.Nat.Properties.html#979","idDesc":null,"idIdent":"+-commutative","idType":"(x y : Nat) → x + y ≡ y + x"},{"idAnchor":"Data.Nat.Properties.html#9230","idDesc":null,"idIdent":"min-≤r","idType":"(x y : Nat) → min x y ≤ y"},{"idAnchor":"Data.Nat.Properties.html#5333","idDesc":null,"idIdent":"≤-is-partial-order","idType":"is-partial-order _≤_"},{"idAnchor":"Data.Nat.Properties.html#8530","idDesc":null,"idIdent":"max-≤r","idType":"(x y : Nat) → y ≤ max x y"},{"idAnchor":"Data.Nat.Properties.html#3142","idDesc":null,"idIdent":"^-+-hom-*r","idType":"(x y z : Nat) → x ^ (y + z) ≡ x ^ y * x ^ z"},{"idAnchor":"Data.Nat.Properties.html#8711","idDesc":null,"idIdent":"min-assoc","idType":"(x y z : Nat) → min x (min y z) ≡ min (min x y) z"},{"idAnchor":"Data.Nat.Properties.html#4009","idDesc":null,"idIdent":"^-*-adjunct","idType":"(x y z : Nat) → (x ^ y) ^ z ≡ x ^ (y * z)"},{"idAnchor":"Data.Nat.Properties.html#3416","idDesc":null,"idIdent":"^-distrib-*r","idType":"(x y z : Nat) → (x * y) ^ z ≡ x ^ z * y ^ z"},{"idAnchor":"Data.Nat.Properties.html#8374","idDesc":null,"idIdent":"max-≤l","idType":"(x y : Nat) → x ≤ max x y"},{"idAnchor":"Data.Nat.Properties.html#2414","idDesc":null,"idIdent":"*-distrib-+l","idType":"(x y z : Nat) → z * (x + y) ≡ z * x + z * y"},{"idAnchor":"Data.Nat.Properties.html#5120","idDesc":null,"idIdent":"≤-is-preorder","idType":"is-preorder _≤_"},{"idAnchor":"Data.Nat.Properties.html#6844","idDesc":null,"idIdent":"+-preserves-≤","idType":"(x y x' y' : Nat) → x ≤ y → x' ≤ y' → x + x' ≤ y + y'"},{"idAnchor":"Data.Nat.Properties.html#7781","idDesc":null,"idIdent":"+-reflects-≤r","idType":"(x y z : Nat) → x + z ≤ y + z → x ≤ y"},{"idAnchor":"Cat.Instances.Shape.Interval.html#6837","idDesc":null,"idIdent":".extendedlambda0","idType":"(F : Functor 0≤1 C) (x : 0≤1 .Ob) →\nF₀ (arrow→functor (functor→arrow F)) x ≡ F₀ F x"},{"idAnchor":"Cat.Instances.Shape.Interval.html#5318","idDesc":null,"idIdent":"fun","idType":"(A B₁ : Ob C) (f : Hom C A B₁) → Functor 0≤1 C"},{"idAnchor":"Cat.Instances.Shape.Interval.html#930","idDesc":null,"idIdent":"R","idType":"Bool → Bool → Type"},{"idAnchor":"Cat.Instances.Shape.Interval.html#831","idDesc":null,"idIdent":"Bool-poset","idType":"Poset lzero lzero"},{"idAnchor":"Cat.Instances.Shape.Interval.html#6256","idDesc":null,"idIdent":"functor→arrow","idType":"Functor 0≤1 C → Arrows C"},{"idAnchor":"Cat.Instances.Shape.Interval.html#1294","idDesc":null,"idIdent":"Rrefl","idType":"R x x"},{"idAnchor":"Cat.Instances.Shape.Interval.html#2617","idDesc":null,"idIdent":"0≤1-products","idType":"(A B₁ : Ob 0≤1) → Product 0≤1 A B₁"},{"idAnchor":"Cat.Instances.Shape.Interval.html#5233","idDesc":null,"idIdent":"arrow→functor","idType":"Arrows C → Functor 0≤1 C"},{"idAnchor":"Cat.Instances.Shape.Interval.html#1738","idDesc":null,"idIdent":"Rantisym","idType":"R x y → R y x → x ≡ y"},{"idAnchor":"Cat.Instances.Shape.Interval.html#1360","idDesc":null,"idIdent":"Rtrans","idType":"R x y → R y z → R x z"},{"idAnchor":"Cat.Instances.Shape.Interval.html#4863","idDesc":null,"idIdent":"Arrows","idType":"Precategory o ℓ → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Instances.Shape.Interval.html#7044","idDesc":null,"idIdent":"linv","idType":"is-left-inverse functor→arrow arrow→functor"},{"idAnchor":"Cat.Instances.Shape.Interval.html#7233","idDesc":null,"idIdent":"Arr","idType":"Precategory o ℓ → Precategory (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Instances.Shape.Interval.html#1930","idDesc":null,"idIdent":"Rprop","idType":"(p q : R x y) → p ≡ q"},{"idAnchor":"Cat.Instances.Shape.Interval.html#3255","idDesc":null,"idIdent":"meet","idType":"Ob 0≤1 →\nOb 0≤1 →\n(A B₁ Q : 0≤1 .Ob) →\nHom 0≤1 Q A → Hom 0≤1 Q B₁ → Hom 0≤1 Q (and A B₁)"},{"idAnchor":"Cat.Instances.Shape.Interval.html#6744","idDesc":null,"idIdent":"rinv","idType":"is-right-inverse functor→arrow arrow→functor"},{"idAnchor":"Cat.Instances.Shape.Interval.html#6631","idDesc":null,"idIdent":"arrow≃functor","idType":"is-equiv arrow→functor"},{"idAnchor":"Cat.Instances.Shape.Interval.html#2126","idDesc":null,"idIdent":"0≤1","idType":"Precategory lzero lzero"},{"idAnchor":"Cat.Instances.Shape.Interval.html#6880","idDesc":null,"idIdent":".extendedlambda1","idType":"(F : Functor 0≤1 C) (f : 0≤1 .Hom x y) →\nPathP\n(λ i →\n   C .Hom ((λ { true → refl ; false → refl }) x i)\n   ((λ { true → refl ; false → refl }) y i))\n(F₁ (arrow→functor (functor→arrow F)) f) (F₁ F f)"},{"idAnchor":"Cat.Instances.Shape.Interval.html#3888","idDesc":null,"idIdent":"0≤1-finitely-complete","idType":"Finitely-complete 0≤1"},{"idAnchor":"Cat.Instances.Shape.Interval.html#2431","idDesc":null,"idIdent":"0≤1-top","idType":"Terminal 0≤1"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#1195","idDesc":null,"idIdent":"connected","idType":"(T : Type ℓ) (b : ∑ (Type ℓ) (λ B₁ → ∥ T ≃ B₁ ∥)) → ∥ b ≡ base T ∥"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#2741","idDesc":null,"idIdent":"sq","idType":"(T : Type ℓ) (b : ∑ (Type ℓ) (λ B₁ → ∥ T ≃ B₁ ∥)) →\nua (encode T (base T) refl) ≡ refl"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#2560","idDesc":null,"idIdent":"decode∘encode","idType":"(T : Type ℓ) (b : ∑ (Type ℓ) (λ B₁ → ∥ T ≃ B₁ ∥))\n(p : base T ≡ b) →\ndecode T b (encode T b p) ≡ p"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#1927","idDesc":null,"idIdent":"decode","idType":"(T : Type ℓ) (b : BAut T) → Code T b → base T ≡ b"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#930","idDesc":null,"idIdent":"base","idType":"(T : Type ℓ) → BAut T"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#1854","idDesc":null,"idIdent":"encode","idType":"(T : Type ℓ) (b : ∑ (Type ℓ) (λ B₁ → ∥ T ≃ B₁ ∥)) →\nbase T ≡ b → Code T b"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#2948","idDesc":null,"idIdent":"encode∘decode","idType":"(T : Type ℓ) (b : BAut T) (p : Code T b) →\nencode T b (decode T b p) ≡ p"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#3268","idDesc":null,"idIdent":"Ω¹BAut","idType":"(T : Type ℓ) → (base T ≡ base T) ≃ (T ≃ T)"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#1345","idDesc":null,"idIdent":"p","idType":"(T : Type ℓ) (b : Type ℓ) →\n∥ T ≃ b ∥ → (b₁ : Type ℓ) (e : T ≃ b₁) → (b₁ , inc e) ≡ base T"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#871","idDesc":null,"idIdent":"BAut","idType":"Type ℓ → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#4246","idDesc":null,"idIdent":"BAut-is-hlevel","idType":"(T : Type ℓ) (n : Nat) → is-hlevel T n → is-hlevel (BAut T) (1 + n)"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#4420","idDesc":null,"idIdent":"extract","idType":"(T : Type ℓ) (hl : is-hlevel T zero) (x : Type ℓ) (f : ∥ T ≃ x ∥)\n(y : Type ℓ) (g : ∥ T ≃ y ∥) →\nis-prop (T ≃ X)"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#4689","idDesc":null,"idIdent":"f′","idType":"(T : Type ℓ) (hl : is-hlevel T zero) (x : Type ℓ) (f : ∥ T ≃ x ∥)\n(y : Type ℓ) (g : ∥ T ≃ y ∥) →\nT ≃ x"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#1808","idDesc":null,"idIdent":"Code","idType":"(T : Type ℓ) → BAut T → Type ℓ"},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#4728","idDesc":null,"idIdent":"g′","idType":"(T : Type ℓ) (hl : is-hlevel T zero) (x : Type ℓ) (f : ∥ T ≃ x ∥)\n(y : Type ℓ) (g : ∥ T ≃ y ∥) →\nT ≃ y"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#643","idDesc":null,"idIdent":"Cospan-ob","idType":"(ℓ : Level) → Type ℓ"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#1204","idDesc":null,"idIdent":"·→·←·","idType":"Precategory a b"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#1210","idDesc":null,"idIdent":"·←·→·","idType":"Precategory a b"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#682","idDesc":null,"idIdent":"cs-c","idType":"Cospan-ob ℓ"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#1806","idDesc":null,"idIdent":"precat","idType":"Precategory a b"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#4474","idDesc":null,"idIdent":"funct","idType":"(x y : Level) (f : Hom C a b) (g : Hom C a c) → Functor ·←·→· C"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#4342","idDesc":null,"idIdent":"span→span-diagram","idType":"(x y : Level) → Hom C a b → Hom C a c → Functor ·←·→· C"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#1305","idDesc":null,"idIdent":"compose","idType":"Cospan-hom b c → Cospan-hom a b → Cospan-hom a c"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#3449","idDesc":null,"idIdent":"cospan→cospan-diagram","idType":"(x y : Level) → Hom C a c → Hom C b c → Functor ·→·←· C"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#3577","idDesc":null,"idIdent":"funct","idType":"(x y : Level) (f : Hom C a c) (g : Hom C b c) → Functor ·→·←· C"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#702","idDesc":null,"idIdent":"Cospan-hom","idType":"Cospan-ob ℓ → Cospan-ob ℓ → Type ℓ′"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#677","idDesc":null,"idIdent":"cs-b","idType":"Cospan-ob ℓ"},{"idAnchor":"Cat.Instances.Shape.Cospan.html#672","idDesc":null,"idIdent":"cs-a","idType":"Cospan-ob ℓ"},{"idAnchor":"Cat.Functor.Adjoint.Compose.html#1507","idDesc":null,"idIdent":"path","idType":"(F⊣G : F ⊣ G) (L⊣R : L ⊣ R₁) (x y : A .Ob) (f : A .Hom x y) →\nA ._∘_ (LF⊣GR F⊣G L⊣R .unit .η y) f ≡\nA ._∘_ (₁ (G F∘ R₁) (₁ (L F∘ F) f)) (LF⊣GR F⊣G L⊣R .unit .η x)"},{"idAnchor":"Cat.Functor.Adjoint.Compose.html#2099","idDesc":null,"idIdent":"path","idType":"(F⊣G : F ⊣ G) (L⊣R : L ⊣ R₁) (x y : C .Ob) (f : C .Hom x y) →\nC ._∘_ (LF⊣GR F⊣G L⊣R .counit .η y) (₁ (L F∘ F) (₁ (G F∘ R₁) f)) ≡\nC ._∘_ f (LF⊣GR F⊣G L⊣R .counit .η x)"},{"idAnchor":"Cat.Functor.Adjoint.Compose.html#1296","idDesc":null,"idIdent":"LF⊣GR","idType":"(F⊣G : F ⊣ G) (L⊣R : L ⊣ R₁) → L F∘ F ⊣ G F∘ R₁"},{"idAnchor":"1Lab.HIT.Truncation.html#736","idDesc":null,"idIdent":"∥_∥","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.HIT.Truncation.html#6209","idDesc":null,"idIdent":"f-image","idType":"(f : A → B₁) → A → image f"},{"idAnchor":"1Lab.HIT.Truncation.html#3526","idDesc":null,"idIdent":"∥-∥-map₂","idType":"(A → B₁ → C) → ∥ A ∥ → ∥ B₁ ∥ → ∥ C ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#2109","idDesc":null,"idIdent":"go","idType":"((x : ∥ A ∥) (y : ∥ B₁ ∥) → is-prop (P x y)) →\n((x : A) (y : B₁) → P (inc x) (inc y)) →\n∥ A ∥ → ∥ B₁ ∥ → (x : ∥ A ∥) (y : ∥ B₁ ∥) → P x y"},{"idAnchor":"1Lab.HIT.Truncation.html#3129","idDesc":null,"idIdent":"beta","idType":"(bprop : is-prop B₁) → is-left-inverse (rec bprop) (inc' bprop)"},{"idAnchor":"1Lab.HIT.Truncation.html#774","idDesc":null,"idIdent":"inc","idType":"A → ∥ A ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#1408","idDesc":null,"idIdent":"∥-∥-elim","idType":"((x : ∥ A ∥) → is-prop (P x)) →\n((x : A) → P (inc x)) → (x : ∥ A ∥) → P x"},{"idAnchor":"1Lab.HIT.Truncation.html#4592","idDesc":null,"idIdent":"inv","idType":"P ≃ ∥ P ∥ → is-prop P"},{"idAnchor":"1Lab.HIT.Truncation.html#2964","idDesc":null,"idIdent":"inc'","idType":"is-prop B₁ → (∥ A ∥ → B₁) → A → B₁"},{"idAnchor":"1Lab.HIT.Truncation.html#2416","idDesc":null,"idIdent":"∥-∥-rec","idType":"is-prop P → (A → P) → ∥ A ∥ → P"},{"idAnchor":"1Lab.HIT.Truncation.html#3953","idDesc":null,"idIdent":"∃","idType":"(A : Type a) (B₁ : A → Type b) → Type (a ⊔ b)"},{"idAnchor":"1Lab.HIT.Truncation.html#1005","idDesc":null,"idIdent":"is-prop-∥-∥","idType":"is-prop ∥ A ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#4700","idDesc":null,"idIdent":"eqv-prop","idType":"is-prop (P ≃ ∥ P ∥)"},{"idAnchor":"1Lab.HIT.Truncation.html#4147","idDesc":null,"idIdent":"is-prop→equiv∥-∥","idType":"is-prop P → P ≃ ∥ P ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#3327","idDesc":null,"idIdent":"∥-∥-map","idType":"(A → B₁) → ∥ A ∥ → ∥ B₁ ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#7633","idDesc":null,"idIdent":"∥-∥-rec-set","idType":"(f : A → B₁) → ((x y : A) → f x ≡ f y) → is-set B₁ → ∥ A ∥ → B₁"},{"idAnchor":"1Lab.HIT.Truncation.html#2790","idDesc":null,"idIdent":"∥-∥-univ","idType":"is-prop B₁ → (∥ A ∥ → B₁) ≃ (A → B₁)"},{"idAnchor":"1Lab.HIT.Truncation.html#795","idDesc":null,"idIdent":"squash","idType":"is-prop ∥ A ∥"},{"idAnchor":"1Lab.HIT.Truncation.html#7444","idDesc":null,"idIdent":".extendedlambda0","idType":"(bset : is-set B₁) (f : A → B₁) (f-const : (x y : A) → f x ≡ f y)\n(a : B₁) (x : ∃ A (λ a₁ → f a₁ ≡ a)) (b : B₁)\n(y : ∃ A (λ a₁ → f a₁ ≡ b)) (x₁ : Σ (λ a₁ → f a₁ ≡ a))\n(y₁ : Σ (λ a₁ → f a₁ ≡ b)) →\nPath B₁ a b"},{"idAnchor":"1Lab.HIT.Truncation.html#4417","idDesc":null,"idIdent":"is-prop≃equiv∥-∥","idType":"is-prop P ≃ (P ≃ ∥ P ∥)"},{"idAnchor":"1Lab.HIT.Truncation.html#1852","idDesc":null,"idIdent":"∥-∥-elim₂","idType":"((x : ∥ A ∥) (y : ∥ B₁ ∥) → is-prop (P x y)) →\n((x : A) (y : B₁) → P (inc x) (inc y)) →\n(x : ∥ A ∥) (y : ∥ B₁ ∥) → P x y"},{"idAnchor":"1Lab.HIT.Truncation.html#3021","idDesc":null,"idIdent":"rec","idType":"is-prop B₁ → (A → B₁) → ∥ A ∥ → B₁"},{"idAnchor":"1Lab.HIT.Truncation.html#6551","idDesc":null,"idIdent":"is-constant→image-is-prop","idType":"is-set B₁ →\n(f : A → B₁) → ((x y : A) → f x ≡ f y) → is-prop (image f)"},{"idAnchor":"1Lab.HIT.Truncation.html#5706","idDesc":null,"idIdent":"image","idType":"(A → B₁) → Type (ℓ ⊔ ℓ')"},{"idAnchor":"1Lab.HIT.Truncation.html#1104","idDesc":null,"idIdent":"H-Level-truncation","idType":"H-Level ∥ A ∥ (suc n)"},{"idAnchor":"Cat.Thin.Completion.html#1827","idDesc":null,"idIdent":"p1","idType":"(C : Proset o h) (a : Ob C)\n(.patternInTele0 : Σ (λ x → Σ (C ~ x))) →\nPath (Prop h)\n(Hom C (.patternInTele0 .fst) a ,\n Hom-is-prop C (.patternInTele0 .fst) a)\n(Hom C (.patternInTele0 .snd .fst) a ,\n Hom-is-prop C (.patternInTele0 .snd .fst) a)"},{"idAnchor":"Cat.Thin.Completion.html#2878","idDesc":null,"idIdent":"Hom′-prop","idType":"(C : Proset o h) (x y : Ob′ C) (f g : ∣ Hom′ C x y ∣) → f ≡ g"},{"idAnchor":"Cat.Thin.Completion.html#6673","idDesc":null,"idIdent":"Poset-completion-embedding","idType":"(X Y : Proset o h) (F : Functor (X .underlying) (Y .underlying)) →\nFunctor (completed X .underlying) (completed Y .underlying)"},{"idAnchor":"Cat.Thin.Completion.html#6043","idDesc":null,"idIdent":"F′₁-id","idType":"(X Y : Proset o h) (F : Functor (X .underlying) (Y .underlying))\n(a : Ob (completed X)) →\nF′₁ X Y F a a (id (completed X)) ≡ id (completed Y)"},{"idAnchor":"Cat.Thin.Completion.html#1375","idDesc":null,"idIdent":"Ob′","idType":"Proset o h → Type (o ⊔ h)"},{"idAnchor":"Cat.Thin.Completion.html#5497","idDesc":null,"idIdent":"F′₀","idType":"(X Y : Proset o h) (F : Functor (X .underlying) (Y .underlying)) →\nOb (completed X) → Ob (completed Y)"},{"idAnchor":"Cat.Thin.Completion.html#3695","idDesc":null,"idIdent":"completed","idType":"(C : Proset o h) → Poset (o ⊔ h) h"},{"idAnchor":"Cat.Thin.Completion.html#3289","idDesc":null,"idIdent":"trans′","idType":"(C : Proset o h) (x y z : Ob′ C) →\n∣ Hom′ C x y ∣ → ∣ Hom′ C y z ∣ → ∣ Hom′ C x z ∣"},{"idAnchor":"Cat.Thin.Completion.html#3201","idDesc":null,"idIdent":"id′","idType":"(C : Proset o h) (x : Ob′ C) → ∣ Hom′ C x x ∣"},{"idAnchor":"Cat.Thin.Completion.html#4616","idDesc":null,"idIdent":"Complete-is-fully-faithful","idType":"is-fully-faithful Complete"},{"idAnchor":"Cat.Thin.Completion.html#1311","idDesc":null,"idIdent":"_~_","idType":"(C : Proset o h) → Ob C → Ob C → Type h"},{"idAnchor":"Cat.Thin.Completion.html#4262","idDesc":null,"idIdent":"Complete","idType":"Functor (X .underlying) (completed X .underlying)"},{"idAnchor":"Cat.Thin.Completion.html#3477","idDesc":null,"idIdent":"antisym′","idType":"(C : Proset o h) (x y : Ob′ C) →\n∣ Hom′ C x y ∣ → ∣ Hom′ C y x ∣ → x ≡ y"},{"idAnchor":"Cat.Thin.Completion.html#6211","idDesc":null,"idIdent":"F′₁-∘","idType":"(X Y : Proset o h) (F : Functor (X .underlying) (Y .underlying))\n(x y z : Ob (completed X)) (f : Hom (completed X) y z)\n(g : Hom (completed X) x y) →\nF′₁ X Y F x z ((completed X ∘ f) g) ≡\n(completed Y ∘ F′₁ X Y F y z f) (F′₁ X Y F x y g)"},{"idAnchor":"Cat.Thin.Completion.html#2105","idDesc":null,"idIdent":"p2","idType":"(C : Proset o h) (a : Ob C)\n(.patternInTele0 : Σ (λ x → Σ (C ~ x))) →\nPath (Prop h)\n(Hom C a (.patternInTele0 .fst) ,\n Hom-is-prop C a (.patternInTele0 .fst))\n(Hom C a (.patternInTele0 .snd .fst) ,\n Hom-is-prop C a (.patternInTele0 .snd .fst))"},{"idAnchor":"Cat.Thin.Completion.html#5853","idDesc":null,"idIdent":"F′₁","idType":"(X Y : Proset o h) (F : Functor (X .underlying) (Y .underlying))\n(a b : Ob (completed X)) →\nHom (completed X) a b →\nHom (completed Y) (F′₀ X Y F a) (F′₀ X Y F b)"},{"idAnchor":"Cat.Thin.Completion.html#2763","idDesc":null,"idIdent":"Hom′","idType":"(C : Proset o h) → Ob′ C → Ob′ C → Prop h"},{"idAnchor":"Algebra.Group.Homotopy.html#4986","idDesc":null,"idIdent":"path-unit","idType":"(G : Group ℓ) → path (unit G) ≡ refl"},{"idAnchor":"Algebra.Group.Homotopy.html#9873","idDesc":null,"idIdent":"encode→decode","idType":"(G : Group ℓ) (p : base ≡ x) → decode G x (encode G x p) ≡ p"},{"idAnchor":"Algebra.Group.Homotopy.html#10302","idDesc":null,"idIdent":"decode→encode","idType":"(G : Group ℓ) (x : Deloop G) (c : ∣ Code G x ∣) →\nencode G x (decode G x c) ≡ c"},{"idAnchor":"Algebra.Group.Homotopy.html#3483","idDesc":null,"idIdent":"H-Level-Deloop","idType":"(G : Group ℓ) → H-Level (Deloop G) (3 + n)"},{"idAnchor":"Algebra.Group.Homotopy.html#3280","idDesc":null,"idIdent":"Deloop","idType":"(G : Group ℓ) → Type ℓ"},{"idAnchor":"Algebra.Group.Homotopy.html#4621","idDesc":null,"idIdent":"path-∙","idType":"(G : Group ℓ) (x y : G .fst) → path ((G ⋆ x) y) ≡ path x ∙ path y"},{"idAnchor":"Algebra.Group.Homotopy.html#3306","idDesc":null,"idIdent":"base","idType":"Deloop G"},{"idAnchor":"Algebra.Group.Homotopy.html#8021","idDesc":null,"idIdent":"p","idType":"(G : Group ℓ) (x : G .fst) → is-iso (λ section → (G ⋆ section) x)"},{"idAnchor":"Algebra.Group.Homotopy.html#1105","idDesc":null,"idIdent":"πₙ₊₁","idType":"Nat → Type∙ ℓ → Group ℓ"},{"idAnchor":"Algebra.Group.Homotopy.html#3327","idDesc":null,"idIdent":"squash","idType":"is-groupoid (Deloop G)"},{"idAnchor":"Algebra.Group.Homotopy.html#7923","idDesc":null,"idIdent":"map","idType":"(G : Group ℓ) → G .fst → G .fst ≃ G .fst"},{"idAnchor":"Algebra.Group.Homotopy.html#3395","idDesc":null,"idIdent":"path-sq","idType":"(x y : G .fst) → Square refl (path x) (path ((G ⋆ x) y)) (path y)"},{"idAnchor":"Algebra.Group.Homotopy.html#5693","idDesc":null,"idIdent":"Deloop-elim","idType":"(G : Group ℓ) (P : Deloop G → Type ℓ') →\n((x : Deloop G) → is-hlevel (P x) 3) →\n(p : P base)\n(ploop : (x : G .fst) → PathP (λ i → P (path x i)) p p) →\n((x y : G .fst) →\n SquareP (λ i j → P (path-sq x y i j)) (λ _ → p) (ploop x)\n (ploop ((G ⋆ x) y)) (ploop y)) →\n(x : Deloop G) → P x"},{"idAnchor":"Algebra.Group.Homotopy.html#6431","idDesc":null,"idIdent":"Deloop-elim-prop","idType":"(G : Group ℓ) (P : Deloop G → Type ℓ') →\n((x : Deloop G) → is-prop (P x)) → P base → (x : Deloop G) → P x"},{"idAnchor":"Algebra.Group.Homotopy.html#8472","idDesc":null,"idIdent":"lemma","idType":"(G : Group ℓ) (x y : G .fst) →\nua (map G x) ∙ ua (map G y) ≡ ua (map G ((G ⋆ x) y))"},{"idAnchor":"Algebra.Group.Homotopy.html#10807","idDesc":null,"idIdent":"G≡π₁B","idType":"(G : Group ℓ) → G ≡ πₙ₊₁ 0 (Deloop G , base)"},{"idAnchor":"Algebra.Group.Homotopy.html#9019","idDesc":null,"idIdent":"encode","idType":"(G : Group ℓ) (x : Deloop G) → base ≡ x → ∣ Code G x ∣"},{"idAnchor":"Algebra.Group.Homotopy.html#3360","idDesc":null,"idIdent":"path","idType":"G .fst → base ≡ base"},{"idAnchor":"Algebra.Group.Homotopy.html#2537","idDesc":null,"idIdent":"πₙ₊₂-is-abelian-group","idType":"(n : Nat) → is-abelian-group (πₙ₊₁ (1 + n) A)"},{"idAnchor":"Algebra.Group.Homotopy.html#10693","idDesc":null,"idIdent":"G≃ΩB","idType":"(G : Group ℓ) → G .fst ≃ (base ≡ base)"},{"idAnchor":"Algebra.Group.Homotopy.html#616","idDesc":null,"idIdent":"Ω^","idType":"Nat → Type∙ ℓ → Type∙ ℓ"},{"idAnchor":"Algebra.Group.Homotopy.html#2074","idDesc":null,"idIdent":"Ωⁿ⁺²-is-abelian-group","idType":"(n : Nat) (p q : Ω^ (2 + n) A .fst) → p ∙ q ≡ q ∙ p"},{"idAnchor":"Algebra.Group.Homotopy.html#9106","idDesc":null,"idIdent":"decode","idType":"(G : Group ℓ) (x : Deloop G) → ∣ Code G x ∣ → base ≡ x"},{"idAnchor":"Algebra.Group.Homotopy.html#7180","idDesc":null,"idIdent":"Code","idType":"(G : Group ℓ) → Deloop G → Set ℓ"},{"idAnchor":"Algebra.Group.Homotopy.html#6392","idDesc":null,"idIdent":"g","idType":"(G : Group ℓ) (P : Deloop G → Type ℓ')\n(grpd : (x : Deloop G) → is-hlevel (P x) 3) (pp : P base)\n(ploop : (x : G .fst) → PathP (λ i → P (path x i)) pp pp)\n(psq\n : (x y : G .fst) →\n   SquareP (λ i j → P (path-sq x y i j)) (λ _ → pp) (ploop x)\n   (ploop ((G ⋆ x) y)) (ploop y))\n(a b : Deloop G) (p q : Path (Deloop G) a b)\n(r s : Path (Path (Deloop G) a b) p q) (i j k : I) (x : Deloop G) →\nP x"},{"idAnchor":"Cat.Thin.Limits.html#3047","idDesc":null,"idIdent":"indexed-join→indexed-coproduct","idType":"(ι : (i : I₁) → (P ≤ F i) J₁) →\n(((i : I₁) → (P ≤ F i) B₁) → (P ≤ J₁) B₁) →\nis-indexed-coproduct (underlying P) F ι"},{"idAnchor":"Cat.Thin.Limits.html#1682","idDesc":null,"idIdent":"indexed-meet→indexed-product","idType":"(π : (i : I₁) → (P ≤ P) (F i)) →\n(((i : I₁) → (P ≤ B₁) (F i)) → (P ≤ B₁) P) →\nis-indexed-product (underlying P) F π"},{"idAnchor":"Cat.Thin.Limits.html#2437","idDesc":null,"idIdent":"has-indexed-coproducts→proset-is-cocomplete","idType":"has-indexed-coproducts (underlying P) o' →\nis-cocomplete o' ℓ' (underlying P)"},{"idAnchor":"Cat.Thin.Limits.html#2671","idDesc":null,"idIdent":"ic","idType":"(has-ips : has-indexed-coproducts (underlying P) o')\n(F : Functor D (underlying P)) →\nIndexed-coproduct (underlying P) (₀ F)"},{"idAnchor":"Cat.Thin.Limits.html#3403","idDesc":null,"idIdent":"is-ic","idType":"(ι : (i : I₁) → (P ≤ F i) J₁)\n(is-join : ((i : I₁) → (P ≤ F i) B₁) → (P ≤ J₁) B₁) →\nis-indexed-coproduct (underlying P) F ι"},{"idAnchor":"Cat.Thin.Limits.html#2030","idDesc":null,"idIdent":"is-ip","idType":"(π : (i : I₁) → (P ≤ P) (F i))\n(is-meet : ((i : I₁) → (P ≤ B₁) (F i)) → (P ≤ B₁) P) →\nis-indexed-product (underlying P) F π"},{"idAnchor":"Cat.Thin.Limits.html#983","idDesc":null,"idIdent":"ip","idType":"(has-ips : has-indexed-products (underlying P) o')\n(F : Functor D (underlying P)) →\nIndexed-product (underlying P) (₀ F)"},{"idAnchor":"Cat.Thin.Limits.html#763","idDesc":null,"idIdent":"has-indexed-products→proset-is-complete","idType":"has-indexed-products (underlying P) o' →\nis-complete o' ℓ' (underlying P)"},{"idAnchor":"Cat.Thin.Limits.html#1245","idDesc":null,"idIdent":"lim","idType":"(has-ips : has-indexed-products (underlying P) o')\n(F : Functor D (underlying P)) →\nLimit F"},{"idAnchor":"Cat.Thin.Limits.html#2760","idDesc":null,"idIdent":"colim","idType":"(has-ips : has-indexed-coproducts (underlying P) o')\n(F : Functor D (underlying P)) →\nColimit F"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#4417","idDesc":null,"idIdent":"idl′","idType":"(alg : Algebra-on (Sets ℓ) T G) (x : ∣ G ∣) →\nmult alg (ν alg nil) x ≡ x"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#2258","idDesc":null,"idIdent":"mult","idType":"(alg : Algebra-on (Sets ℓ) T G) → ∣ G ∣ → ∣ G ∣ → ∣ G ∣"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#2112","idDesc":null,"idIdent":"Algebra-on→group-on","idType":"Algebra-on (Sets ℓ) T G → Group-on ∣ G ∣"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#3491","idDesc":null,"idIdent":"invl","idType":"(alg : Algebra-on (Sets ℓ) T G) (x : ∣ G ∣) →\nmult alg (ν alg (inv (inc x))) x ≡ ν alg nil"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#5654","idDesc":null,"idIdent":"Group-is-monadic","idType":"is-monadic F⊣U"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#7240","idDesc":null,"idIdent":"go","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) →\nrec x .fst ≡ x .snd .ν"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#6843","idDesc":null,"idIdent":"ext","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) →\n(∣ x .fst ∣ , x .fst .is-tr) ≡ x .fst"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#561","idDesc":null,"idIdent":"F⊣U","idType":"F ⊣ Forget"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#2847","idDesc":null,"idIdent":"assoc","idType":"(alg : Algebra-on (Sets ℓ) T G) (x y z : ∣ G ∣) →\nmult alg (mult alg x y) z ≡ mult alg x (mult alg y z)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#666","idDesc":null,"idIdent":"T","idType":"Monad (Sets ℓ)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#462","idDesc":null,"idIdent":"F","idType":"Functor (Sets ℓ) (Groups ℓ)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#7092","idDesc":null,"idIdent":"alg-gh","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) →\nGroup-hom (Free-Group ∣ x .fst ∣) (∣ x .fst ∣ , grp x) (x .snd .ν)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#6552","idDesc":null,"idIdent":"isom","idType":"is-iso (₀ K)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#4800","idDesc":null,"idIdent":"grp","idType":"(alg : Algebra-on (Sets ℓ) T G) → Group-on ∣ G ∣"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#644","idDesc":null,"idIdent":"K","idType":"Functor (Groups ℓ) (Eilenberg-Moore (Sets ℓ) (L∘R F⊣U))"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#6970","idDesc":null,"idIdent":"grp","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) → Group-on ∣ x .fst ∣"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#5846","idDesc":null,"idIdent":"k₁inv","idType":"Algebra-hom (Sets ℓ) T (₀ K G) (₀ K H) → Hom G H"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#6953","idDesc":null,"idIdent":"alg","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) →\nAlgebra-on (Sets ℓ) (L∘R F⊣U) (x .fst)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#3954","idDesc":null,"idIdent":"invr","idType":"(alg : Algebra-on (Sets ℓ) T G) (x : ∣ G ∣) →\nmult alg x (ν alg (inv (inc x))) ≡ ν alg nil"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#7004","idDesc":null,"idIdent":"rec","idType":"(x : Eilenberg-Moore (Sets ℓ) (L∘R F⊣U) .Ob) →\nHom (Free-Group ∣ x .fst ∣) (∣ x .fst ∣ , grp x)"},{"idAnchor":"Algebra.Group.Cat.Monadic.html#6036","idDesc":null,"idIdent":"ff","idType":"is-fully-faithful K"},{"idAnchor":"Cat.Diagram.Congruence.html#5747","idDesc":null,"idIdent":"trans-factors","idType":"(r : is-congruence fc m) →\n⟨ products fc A A ,\nC ._∘_ (C ._∘_ (products fc A A .π₁) m)\n(pullbacks fc (C ._∘_ (products fc A A .π₁) m)\n (C ._∘_ (products fc A A .π₂) m) .p₂)\n⟩\n(C ._∘_ (C ._∘_ (products fc A A .π₂) m)\n (pullbacks fc (C ._∘_ (products fc A A .π₁) m)\n  (C ._∘_ (products fc A A .π₂) m) .p₁))\n≡ C ._∘_ m (r .has-trans)"},{"idAnchor":"Cat.Diagram.Congruence.html#5214","idDesc":null,"idIdent":"rel₂","idType":"(r : is-congruence fc m) → C .Hom R₁ A"},{"idAnchor":"Cat.Diagram.Congruence.html#5610","idDesc":null,"idIdent":"has-trans","idType":"is-congruence fc m →\nC .Hom\n(pullbacks fc (C ._∘_ (products fc A A .π₁) m)\n (C ._∘_ (products fc A A .π₂) m) .apex)\nR₁"},{"idAnchor":"Cat.Diagram.Congruence.html#10090","idDesc":null,"idIdent":"path","idType":"(fc : Finitely-complete C) (f : C .Hom a b) →\nC ._∘_ f\n(C ._∘_ (pullbacks fc f f .p₁)\n (pullbacks fc (C ._∘_ (products fc a a .π₁) (kernel-pair fc f))\n  (C ._∘_ (products fc a a .π₂) (kernel-pair fc f)) .p₂))\n≡\nC ._∘_ f\n(C ._∘_ (pullbacks fc f f .p₂)\n (pullbacks fc (C ._∘_ (products fc a a .π₁) (kernel-pair fc f))\n  (C ._∘_ (products fc a a .π₂) (kernel-pair fc f)) .p₁))"},{"idAnchor":"Cat.Diagram.Congruence.html#12193","idDesc":null,"idIdent":"quotient-regular-epi","idType":"(fc : Finitely-complete C) →\nis-quotient-of fc R₁ f → is-regular-epi C f"},{"idAnchor":"Cat.Diagram.Congruence.html#5640","idDesc":null,"idIdent":"source-target","idType":"(r : is-congruence fc m) →\nC .Hom (pullbacks fc (rel₁ r) (rel₂ r) .apex)\n(products fc A A .apex)"},{"idAnchor":"Cat.Diagram.Congruence.html#5519","idDesc":null,"idIdent":"sym-p₁","idType":"(r : is-congruence fc m) →\nC ._∘_ (C ._∘_ (products fc A A .π₁) m) (r .has-sym) ≡\nC ._∘_ (products fc A A .π₂) m"},{"idAnchor":"Cat.Diagram.Congruence.html#5801","idDesc":null,"idIdent":"Congruence-on","idType":"(fc : Finitely-complete C) (A : C .Ob) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Congruence.html#4880","idDesc":null,"idIdent":"_⊗_","idType":"(fc : Finitely-complete C) → C .Ob → C .Ob → C .Ob"},{"idAnchor":"Cat.Diagram.Congruence.html#5889","idDesc":null,"idIdent":"inclusion","idType":"(r : Congruence-on fc A) → C .Hom (r .domain) ((fc ⊗ A) A)"},{"idAnchor":"Cat.Diagram.Congruence.html#7035","idDesc":null,"idIdent":"diagonal-congruence","idType":"(fc : Finitely-complete C) → is-congruence fc (diagonal fc)"},{"idAnchor":"Cat.Diagram.Congruence.html#5554","idDesc":null,"idIdent":"sym-p₂","idType":"(r : is-congruence fc m) →\nC ._∘_ (C ._∘_ (products fc A A .π₂) m) (r .has-sym) ≡\nC ._∘_ (products fc A A .π₁) m"},{"idAnchor":"Cat.Diagram.Congruence.html#8479","idDesc":null,"idIdent":"kernel-pair-is-monic","idType":"(fc : Finitely-complete C) (f : C .Hom a b) →\nis-monic C (kernel-pair fc f)"},{"idAnchor":"Cat.Diagram.Congruence.html#13034","idDesc":null,"idIdent":"quotient","idType":"(r : is-effective-congruence fc R₁) → C .Hom A (r .A/R)"},{"idAnchor":"Cat.Diagram.Congruence.html#11601","idDesc":null,"idIdent":"is-quotient-of","idType":"(fc : Finitely-complete C) (R₁ : Congruence-on fc A) →\nC .Hom A A/R → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Congruence.html#14075","idDesc":null,"idIdent":"kp-effective-congruence→effective-epi","idType":"(fc : Finitely-complete C)\n(eff : is-effective-congruence fc (Kernel-pair fc f)) →\nis-effective-epi C (eff .quotient)"},{"idAnchor":"Cat.Diagram.Congruence.html#5335","idDesc":null,"idIdent":"has-is-monic","idType":"is-congruence fc m → is-monic C m"},{"idAnchor":"Cat.Diagram.Congruence.html#13011","idDesc":null,"idIdent":"A/R","idType":"is-effective-congruence fc R₁ → C .Ob"},{"idAnchor":"Cat.Diagram.Congruence.html#8925","idDesc":null,"idIdent":"cg","idType":"(fc : Finitely-complete C) (f : C .Hom a b) →\nis-congruence fc (kernel-pair fc f)"},{"idAnchor":"Cat.Diagram.Congruence.html#7268","idDesc":null,"idIdent":"cong","idType":"(fc : Finitely-complete C) → is-congruence fc (diagonal fc)"},{"idAnchor":"Cat.Diagram.Congruence.html#13402","idDesc":null,"idIdent":"kernel-pair-is-effective","idType":"(fc : Finitely-complete C) →\nis-quotient-of fc (Kernel-pair fc f) f →\nis-effective-congruence fc (Kernel-pair fc f)"},{"idAnchor":"Cat.Diagram.Congruence.html#14388","idDesc":null,"idIdent":"epi","idType":"(fc : Finitely-complete C)\n(cong : is-effective-congruence fc (Kernel-pair fc f)) →\nis-effective-epi C (cong .quotient)"},{"idAnchor":"Cat.Diagram.Congruence.html#5444","idDesc":null,"idIdent":"refl-p₂","idType":"(r : is-congruence fc m) →\nC ._∘_ (C ._∘_ (products fc A A .π₂) m) (r .has-refl) ≡ C .id"},{"idAnchor":"Cat.Diagram.Congruence.html#13744","idDesc":null,"idIdent":"eff","idType":"(fc : Finitely-complete C)\n(quot₁ : is-quotient-of fc (Kernel-pair fc f) f) →\nis-effective-congruence fc (Kernel-pair fc f)"},{"idAnchor":"Cat.Diagram.Congruence.html#6396","idDesc":null,"idIdent":"diagonal-is-monic","idType":"(fc : Finitely-complete C) → is-monic C (diagonal fc)"},{"idAnchor":"Cat.Diagram.Congruence.html#8299","idDesc":null,"idIdent":"kernel-pair","idType":"(fc : Finitely-complete C) (f : C .Hom a b) →\nC .Hom (pullbacks fc f f .apex) (products fc a a .apex)"},{"idAnchor":"Cat.Diagram.Congruence.html#13112","idDesc":null,"idIdent":"is-kernel-pair","idType":"(r : is-effective-congruence fc R₁) →\nis-pullback C (rel₁ R₁) (r .quotient) (rel₂ R₁) (r .quotient)"},{"idAnchor":"Cat.Diagram.Congruence.html#5497","idDesc":null,"idIdent":"has-sym","idType":"is-congruence fc m → C .Hom R₁ R₁"},{"idAnchor":"Cat.Diagram.Congruence.html#4955","idDesc":null,"idIdent":"is-congruence","idType":"(fc : Finitely-complete C) (m : C .Hom R₁ ((fc ⊗ A) A)) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Congruence.html#12890","idDesc":null,"idIdent":"is-effective-congruence","idType":"(fc : Finitely-complete C) (R₁ : Congruence-on fc A) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Congruence.html#10880","idDesc":null,"idIdent":"Kernel-pair","idType":"(fc : Finitely-complete C) (f : C .Hom a b) → Congruence-on fc a"},{"idAnchor":"Cat.Diagram.Congruence.html#5177","idDesc":null,"idIdent":"rel₁","idType":"(r : is-congruence fc m) → C .Hom R₁ A"},{"idAnchor":"Cat.Diagram.Congruence.html#6179","idDesc":null,"idIdent":"diagonal","idType":"(fc : Finitely-complete C) → C .Hom A ((fc ⊗ A) A)"},{"idAnchor":"Cat.Diagram.Congruence.html#8828","idDesc":null,"idIdent":"kernel-pair-is-congruence","idType":"(fc : Finitely-complete C) (f : C .Hom a b) →\nis-congruence fc (kernel-pair fc f)"},{"idAnchor":"Cat.Diagram.Congruence.html#5869","idDesc":null,"idIdent":"domain","idType":"Congruence-on fc A → C .Ob"},{"idAnchor":"Cat.Diagram.Congruence.html#5386","idDesc":null,"idIdent":"has-refl","idType":"is-congruence fc m → C .Hom A R₁"},{"idAnchor":"Cat.Diagram.Congruence.html#5926","idDesc":null,"idIdent":"has-is-cong","idType":"(r : Congruence-on fc A) → is-congruence fc (r .inclusion)"},{"idAnchor":"Cat.Diagram.Congruence.html#5409","idDesc":null,"idIdent":"refl-p₁","idType":"(r : is-congruence fc m) →\nC ._∘_ (C ._∘_ (products fc A A .π₁) m) (r .has-refl) ≡ C .id"},{"idAnchor":"Cat.Diagram.Congruence.html#13065","idDesc":null,"idIdent":"has-quotient","idType":"(r : is-effective-congruence fc R₁) →\nis-quotient-of fc R₁ (r .quotient)"},{"idAnchor":"Cat.Functor.Equivalence.html#1378","idDesc":null,"idIdent":"F∘F⁻¹≅Id","idType":"(r : is-equivalence F) → (Cat[ D , D ] ≅ (F F∘ F⁻¹ r)) Id"},{"idAnchor":"Cat.Functor.Equivalence.html#9051","idDesc":null,"idIdent":"ffx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : C .Ob)\n(f : C .Hom x y) →\nHom D (F₀ F x) (F₀ F (eso (F₀ F x) .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#17655","idDesc":null,"idIdent":"ff+eso→is-equivalence","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) →\nis-eso F → is-equivalence F"},{"idAnchor":"Cat.Functor.Equivalence.html#14873","idDesc":null,"idIdent":"Essential-fibre-between-cats-is-prop","idType":"(F : Functor C D) →\nis-category C →\nis-category D →\nis-fully-faithful F → (y : D .Ob) → is-prop (Essential-fibre F y)"},{"idAnchor":"Cat.Functor.Equivalence.html#11693","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D (F₀ F (eso x .fst)) x"},{"idAnchor":"Cat.Functor.Equivalence.html#10270","idDesc":null,"idIdent":"ff+split-eso→F⊣inverse","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) → F ⊣ G ff eso"},{"idAnchor":"Cat.Functor.Equivalence.html#17357","idDesc":null,"idIdent":"Theorem-of-choice","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) →\nis-eso F → is-split-eso F"},{"idAnchor":"Cat.Functor.Equivalence.html#1740","idDesc":null,"idIdent":"F⁻¹⊣F","idType":"(r : is-equivalence F) → F⁻¹ r ⊣ F"},{"idAnchor":"Cat.Functor.Equivalence.html#2904","idDesc":null,"idIdent":"zag′","idType":"(r : is-equivalence F) →\nD ._∘_ (F .F₁ (unit⁻¹ r .η b)) (counit⁻¹ r .η (F₀ F b)) ≡ D .id"},{"idAnchor":"Cat.Functor.Equivalence.html#18211","idDesc":null,"idIdent":"has-is-iso","idType":"is-precat-iso F → is-equiv (F₀ F)"},{"idAnchor":"Cat.Functor.Equivalence.html#1043","idDesc":null,"idIdent":"F⁻¹","idType":"is-equivalence F → Functor D C"},{"idAnchor":"Cat.Functor.Equivalence.html#2302","idDesc":null,"idIdent":"zig′","idType":"(r : is-equivalence F) →\nC ._∘_ (η (unit⁻¹ r) (F₀ (F⁻¹ r) a)) (F⁻¹ r .F₁ (counit⁻¹ r .η a))\n≡ C .id"},{"idAnchor":"Cat.Functor.Equivalence.html#18101","idDesc":null,"idIdent":"is-precat-iso","idType":"(F : Functor C D) → Type (C.o ⊔ C.h ⊔ D.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Equivalence.html#13344","idDesc":null,"idIdent":"ffx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x : C .Ob) →\nHom D (F₀ F x) (F₀ F (eso (F₀ F x) .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#4853","idDesc":null,"idIdent":"ff+split-eso→inverse","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) → Functor D C"},{"idAnchor":"Cat.Functor.Equivalence.html#1650","idDesc":null,"idIdent":"unit⁻¹","idType":"(r : is-equivalence F) → Hom Cat[ C , C ] (F⁻¹ r F∘ F) Id"},{"idAnchor":"Cat.Functor.Equivalence.html#1685","idDesc":null,"idIdent":"counit⁻¹","idType":"(r : is-equivalence F) → Hom Cat[ D , D ] Id (F F∘ F⁻¹ r)"},{"idAnchor":"Cat.Functor.Equivalence.html#10012","idDesc":null,"idIdent":"fty","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : D .Ob)\n(f : D .Hom x y) →\nHom D (F₀ F (eso y .fst)) y"},{"idAnchor":"Cat.Functor.Equivalence.html#18641","idDesc":null,"idIdent":"is-precat-iso→is-split-eso","idType":"(p : is-precat-iso F) → is-split-eso F"},{"idAnchor":"Cat.Functor.Equivalence.html#9363","idDesc":null,"idIdent":"ff+split-eso→counit","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nF F∘ G ff eso => Id"},{"idAnchor":"Cat.Functor.Equivalence.html#13373","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x : C .Ob) →\nHom D (F₀ F (eso (F₀ F x) .fst)) (F₀ F x)"},{"idAnchor":"Cat.Functor.Equivalence.html#1127","idDesc":null,"idIdent":"unit-iso","idType":"(r : is-equivalence F) (x : C .Ob) →\nis-invertible C (η (r .F⊣F⁻¹) x)"},{"idAnchor":"Cat.Functor.Equivalence.html#10696","idDesc":null,"idIdent":"ffx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D (F₀ F x) (F₀ F (eso (F₀ F x) .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#11752","idDesc":null,"idIdent":"fftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D (F₀ F (eso (F₀ F (eso x .fst)) .fst)) (F₀ F (eso x .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#1936","idDesc":null,"idIdent":"p","idType":"(r : is-equivalence F) →\nη (unit⁻¹ r) (F₀ (F⁻¹ r) a) ≡ F₁ (F⁻¹ r) (ε (F⊣F⁻¹ r) a)"},{"idAnchor":"Cat.Functor.Equivalence.html#1070","idDesc":null,"idIdent":"F⊣F⁻¹","idType":"(r : is-equivalence F) → F ⊣ r .F⁻¹"},{"idAnchor":"Cat.Functor.Equivalence.html#16625","idDesc":null,"idIdent":"square","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\nap (F₀ F) (x≡y F ccat dcat ff z x i y j) ≡\nFx≡Fy F ccat dcat ff z x i y j"},{"idAnchor":"Cat.Functor.Equivalence.html#6827","idDesc":null,"idIdent":"fty","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (f : D .Hom y z)\n(g : D .Hom x y) →\nHom D (F₀ F (eso y .fst)) y"},{"idAnchor":"Cat.Functor.Equivalence.html#804","idDesc":null,"idIdent":"is-equivalence","idType":"(F : Functor C D) → Type (C.o ⊔ C.h ⊔ D.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Equivalence.html#15432","idDesc":null,"idIdent":"Fx≅Fy","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\n(D ≅ F₀ F x) (F₀ F y)"},{"idAnchor":"Cat.Functor.Equivalence.html#10725","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D (F₀ F (eso (F₀ F x) .fst)) (F₀ F x)"},{"idAnchor":"Cat.Functor.Equivalence.html#11818","idDesc":null,"idIdent":"ff+split-eso→is-equivalence","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nis-equivalence F"},{"idAnchor":"Cat.Functor.Equivalence.html#4356","idDesc":null,"idIdent":"ff⁻¹","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nD .Hom (F .F₀ x) (F .F₀ y) → C .Hom x y"},{"idAnchor":"Cat.Functor.Equivalence.html#18764","idDesc":null,"idIdent":"isom","idType":"(p : is-precat-iso F) (ob : D .Ob) →\n(D ≅ F₀ F (equiv→inverse (has-is-iso p) ob)) ob"},{"idAnchor":"Cat.Functor.Equivalence.html#11664","idDesc":null,"idIdent":"ffx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D x (F₀ F (eso x .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#7372","idDesc":null,"idIdent":"G","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) → Functor D C"},{"idAnchor":"Cat.Functor.Equivalence.html#7780","idDesc":null,"idIdent":"ff+split-eso→unit","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nId => G ff eso F∘ F"},{"idAnchor":"Cat.Functor.Equivalence.html#1177","idDesc":null,"idIdent":"counit-iso","idType":"(r : is-equivalence F) (x : D .Ob) →\nis-invertible D (ε (r .F⊣F⁻¹) x)"},{"idAnchor":"Cat.Functor.Equivalence.html#11720","idDesc":null,"idIdent":"fffx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) →\nHom D (F₀ F (eso x .fst)) (F₀ F (eso (F₀ F (eso x .fst)) .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#6883","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (f : D .Hom y z)\n(g : D .Hom x y) →\nHom D (F₀ F (eso x .fst)) x"},{"idAnchor":"Cat.Functor.Equivalence.html#8995","idDesc":null,"idIdent":"ffy","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : C .Ob)\n(f : C .Hom x y) →\nHom D (F₀ F y) (F₀ F (eso (F₀ F y) .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#18174","idDesc":null,"idIdent":"has-is-ff","idType":"is-precat-iso F → is-fully-faithful F"},{"idAnchor":"Cat.Functor.Equivalence.html#18903","idDesc":null,"idIdent":"is-precat-iso→is-equivalence","idType":"(p : is-precat-iso F) → is-equivalence F"},{"idAnchor":"Cat.Functor.Equivalence.html#10039","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : D .Ob)\n(f : D .Hom x y) →\nHom D (F₀ F (eso x .fst)) x"},{"idAnchor":"Cat.Functor.Equivalence.html#17321","idDesc":null,"idIdent":"they're-equal","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\n(x , i) ≡ (y , j)"},{"idAnchor":"Cat.Functor.Equivalence.html#1516","idDesc":null,"idIdent":"Id≅F⁻¹∘F","idType":"(r : is-equivalence F) → (Cat[ C , C ] ≅ Id) (F⁻¹ r F∘ F)"},{"idAnchor":"Cat.Functor.Equivalence.html#9983","idDesc":null,"idIdent":"ffy","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : D .Ob)\n(f : D .Hom x y) →\nHom D y (F₀ F (eso y .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#16925","idDesc":null,"idIdent":"over","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\nPathP (λ i₁ → (D ≅ F₀ F (x≡y F ccat dcat ff z x i y j i₁)) z) i j"},{"idAnchor":"Cat.Functor.Equivalence.html#3093","idDesc":null,"idIdent":"inverse-equivalence","idType":"(r : is-equivalence F) → is-equivalence (F⁻¹ r)"},{"idAnchor":"Cat.Functor.Equivalence.html#9080","idDesc":null,"idIdent":"ftx","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : C .Ob)\n(f : C .Hom x y) →\nHom D (F₀ F (eso (F₀ F x) .fst)) (F₀ F x)"},{"idAnchor":"Cat.Functor.Equivalence.html#15496","idDesc":null,"idIdent":"x≅y","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\n(C ≅ x) y"},{"idAnchor":"Cat.Functor.Equivalence.html#2541","idDesc":null,"idIdent":"p","idType":"(r : is-equivalence F) →\ncounit⁻¹ r .η (F₀ F b) ≡ F .F₁ (η (F⊣F⁻¹ r) b)"},{"idAnchor":"Cat.Functor.Equivalence.html#1821","idDesc":null,"idIdent":"adj′","idType":"(r : is-equivalence F) → F⁻¹ r ⊣ F"},{"idAnchor":"Cat.Functor.Equivalence.html#6742","idDesc":null,"idIdent":"ffz","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (f : D .Hom y z)\n(g : D .Hom x y) →\nHom D z (F₀ F (eso z .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#16291","idDesc":null,"idIdent":"over′","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\nPathP (λ i₁ → (D ≅ Fx≡Fy F ccat dcat ff z x i y j i₁) z) i j"},{"idAnchor":"Cat.Functor.Equivalence.html#6798","idDesc":null,"idIdent":"ffy","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (f : D .Hom y z)\n(g : D .Hom x y) →\nHom D y (F₀ F (eso y .fst))"},{"idAnchor":"Cat.Functor.Equivalence.html#9108","idDesc":null,"idIdent":"x→f*x","idType":"(ff : is-fully-faithful F) (eso : is-split-eso F) (x y : C .Ob)\n(f : C .Hom x y) →\nC .Hom x (eso (F₀ F x) .fst)"},{"idAnchor":"Cat.Functor.Equivalence.html#15966","idDesc":null,"idIdent":"Fx≡Fy","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\nF₀ F x ≡ F₀ F y"},{"idAnchor":"Cat.Functor.Equivalence.html#15919","idDesc":null,"idIdent":"x≡y","idType":"(F : Functor C D) (ccat : is-category C) (dcat : is-category D)\n(ff : is-fully-faithful F) (z : D .Ob) (x : C .Ob)\n(i : (D ≅ F₀ F x) z) (y : C .Ob) (j : (D ≅ F₀ F y) z) →\nx ≡ y"},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#1628","idDesc":null,"idIdent":"zag","idType":"(r : (B₁ ⊣ f) g) →\nid B₁ ≡\n(B₁ ⊗ ρ← B₁ g)\n((B₁ ⊗ (B₁ ▶ g) (r .ε))\n ((B₁ ⊗ α→ B₁ g f g) ((B₁ ⊗ (B₁ ◀ r .η) g) (λ→ B₁ g))))"},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#1514","idDesc":null,"idIdent":"ε","idType":"(B₁ ⊣ f) g → (B₁ ⇒ (B₁ ∘ f) g) (id B₁)"},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#1408","idDesc":null,"idIdent":"_⊣_","idType":"(B₁ : Prebicategory o ℓ ℓ′) (f : (B₁ ↦ a) b) (g : (B₁ ↦ b) a) →\nType ℓ′"},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#1485","idDesc":null,"idIdent":"η","idType":"(B₁ ⊣ f) g → (B₁ ⇒ id B₁) ((B₁ ∘ g) f)"},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#1544","idDesc":null,"idIdent":"zig","idType":"(r : (B₁ ⊣ f) g) →\nid B₁ ≡\n(B₁ ⊗ λ← B₁ f)\n((B₁ ⊗ (B₁ ◀ r .ε) f)\n ((B₁ ⊗ α← B₁ f g f) ((B₁ ⊗ (B₁ ▶ f) (r .η)) (ρ→ B₁ f))))"},{"idAnchor":"Cat.Instances.Sets.Complete.html#5979","idDesc":null,"idIdent":"Sets-finitely-complete","idType":"Finitely-complete (Sets ℓ)"},{"idAnchor":"Cat.Instances.Sets.Complete.html#828","idDesc":null,"idIdent":"comm-prop","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (f : (x : D .Ob) → ₀ F x .∣_∣) →\nis-prop ((x y : D .Ob) (g : D .Hom x y) → ₁ F g (f x) ≡ f y)"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2793","idDesc":null,"idIdent":"map-unique","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (K : Cones F .Ob)\n(m : Cone-hom F K (cone F)) →\nmap F K ≡ m"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2668","idDesc":null,"idIdent":"map","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (K : Cones F .Ob) →\nCone-hom F K (cone F)"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2549","idDesc":null,"idIdent":"lim","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Limit F"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2069","idDesc":null,"idIdent":".extendedlambda0","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (x : D .Ob) →\n∣ cone F .apex ∣ → ∣ ₀ F x ∣"},{"idAnchor":"Cat.Instances.Sets.Complete.html#5042","idDesc":null,"idIdent":"Sets-pullbacks","idType":"(f : Sets ℓ .Hom A C) (g : Sets ℓ .Hom B₁ C) →\nPullback (Sets ℓ) f g"},{"idAnchor":"Cat.Instances.Sets.Complete.html#3679","idDesc":null,"idIdent":"Sets-terminal","idType":"Terminal (Sets ℓ)"},{"idAnchor":"Cat.Instances.Sets.Complete.html#1415","idDesc":null,"idIdent":"f-apex","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Set (ι ⊔ κ ⊔ o)"},{"idAnchor":"Cat.Instances.Sets.Complete.html#5212","idDesc":null,"idIdent":"pb","idType":"(f : Sets ℓ .Hom A C) (g : Sets ℓ .Hom B₁ C) →\nPullback (Sets ℓ) f g"},{"idAnchor":"Cat.Instances.Sets.Complete.html#3906","idDesc":null,"idIdent":"Sets-products","idType":"(A B₁ : Set ℓ) → Product (Sets ℓ) A B₁"},{"idAnchor":"Cat.Instances.Sets.Complete.html#4441","idDesc":null,"idIdent":"Sets-equalisers","idType":"(f g : Sets ℓ .Hom A B₁) → Equaliser (Sets ℓ) f g"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2119","idDesc":null,"idIdent":".extendedlambda1","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (o : D .Hom x y)\n(x : ∣ cone F .apex ∣) →\nSets (ι ⊔ κ ⊔ o₁) ._∘_ (₁ F o) (cone F .ψ x₁) x ≡ cone F .ψ y x"},{"idAnchor":"Cat.Instances.Sets.Complete.html#4560","idDesc":null,"idIdent":"eq","idType":"(f g : Sets ℓ .Hom A B₁) → Equaliser (Sets ℓ) f g"},{"idAnchor":"Cat.Instances.Sets.Complete.html#2002","idDesc":null,"idIdent":"cone","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Cone F"},{"idAnchor":"Cat.Instances.Sets.Complete.html#670","idDesc":null,"idIdent":"Sets-is-complete","idType":"is-complete ι κ (Sets (ι ⊔ κ ⊔ o))"},{"idAnchor":"Topoi.Base.html#26217","idDesc":null,"idIdent":"Geom[_↪_]","idType":"(E : Precategory o ℓ) (F : Precategory o′ ℓ′) →\nType (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Topoi.Base.html#10801","idDesc":null,"idIdent":"sets","idType":"Topos κ (Sets κ)"},{"idAnchor":"Topoi.Base.html#23977","idDesc":null,"idIdent":"Inv[_]","idType":"Geom[ E , F ] → Functor F E"},{"idAnchor":"Topoi.Base.html#26381","idDesc":null,"idIdent":"Geometric-embeddings-compose","idType":"Geom[ F ↪ G ] → Geom[ E ↪ F ] → Geom[ E ↪ G ]"},{"idAnchor":"Topoi.Base.html#3813","idDesc":null,"idIdent":"L⊣ι","idType":"(r : Topos κ 𝓣) → r .L ⊣ r .ι"},{"idAnchor":"Topoi.Base.html#3695","idDesc":null,"idIdent":"ι","idType":"(r : Topos κ 𝓣) → Functor 𝓣 (PSh κ (r .site))"},{"idAnchor":"Topoi.Base.html#19105","idDesc":null,"idIdent":"mangle","idType":"(ct : Topos ℓ C) →\n((h : C .Hom (₀ (L ct) (よ₀ (site ct) A)) X) →\n C ._∘_ f h ≡ C ._∘_ g h) →\nPSh ℓ (site ct) ._∘_ (₁ (ι ct) f) h ≡\nPSh ℓ (site ct) ._∘_\n(₁ (ι ct) (C ._∘_ f (C ._∘_ (ε (L⊣ι ct) X) (₁ (L ct) h))))\n(η (L⊣ι ct) Z)"},{"idAnchor":"Topoi.Base.html#3726","idDesc":null,"idIdent":"has-ff","idType":"(r : Topos κ 𝓣) → is-fully-faithful (r .ι)"},{"idAnchor":"Topoi.Base.html#23868","idDesc":null,"idIdent":"Geom[_,_]","idType":"(E : Precategory o ℓ) (F : Precategory o′ ℓ′) →\nType (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Topoi.Base.html#26308","idDesc":null,"idIdent":"morphism","idType":"Geom[ E ↪ F ] → Geom[ E , F ]"},{"idAnchor":"Topoi.Base.html#11291","idDesc":null,"idIdent":"isic","idType":"is-iso (incl .F₁)"},{"idAnchor":"Topoi.Base.html#14351","idDesc":null,"idIdent":"Presheaf","idType":"(C : Precategory κ κ) → Topos κ (PSh κ C)"},{"idAnchor":"Topoi.Base.html#16659","idDesc":null,"idIdent":"psh-colim","idType":"(T : Topos κ 𝓣) (F : Functor D 𝓣) → Colimit (ι T F∘ F)"},{"idAnchor":"Topoi.Base.html#12290","idDesc":null,"idIdent":"func","idType":"(psh-terminal : is-terminal (PSh κ (sets .site)) T)\n(set₁ : Sets κ .Ob) →\nOb (PSh κ (Lift-cat κ κ ⊤Cat))"},{"idAnchor":"Topoi.Base.html#14467","idDesc":null,"idIdent":"psh","idType":"(C : Precategory κ κ) → Topos κ (PSh κ (psh C .site))"},{"idAnchor":"Topoi.Base.html#26337","idDesc":null,"idIdent":"has-ff","idType":"(r : Geom[ E ↪ F ]) → is-fully-faithful Dir[ r .morphism ]"},{"idAnchor":"Topoi.Base.html#12451","idDesc":null,"idIdent":"f′","idType":"(psh-terminal : is-terminal (PSh κ (sets .site)) T)\n(set₁ : Sets κ .Ob)\n(f\n : ∣ ₀ (func psh-terminal set₁) (lift tt) ∣ → ∣ ₀ T (lift tt) ∣) →\nfunc psh-terminal set₁ => T"},{"idAnchor":"Topoi.Base.html#3667","idDesc":null,"idIdent":"site","idType":"Topos κ 𝓣 → Precategory κ κ"},{"idAnchor":"Topoi.Base.html#24029","idDesc":null,"idIdent":"Inv-lex","idType":"(r : Geom[ E , F ]) → is-lex (r .Inv[_])"},{"idAnchor":"Topoi.Base.html#12314","idDesc":null,"idIdent":"cent","idType":"(psh-terminal : is-terminal (PSh κ (sets .site)) T)\n(set₁ : Sets κ .Ob) →\nHom (PSh κ (sets .site)) (func psh-terminal set₁) T"},{"idAnchor":"Topoi.Base.html#24311","idDesc":null,"idIdent":"Idg","idType":"Geom[ E , E ]"},{"idAnchor":"Topoi.Base.html#26623","idDesc":null,"idIdent":"Topos→geometric-embedding","idType":"(T : Topos κ E) → Geom[ E ↪ PSh κ (T .site) ]"},{"idAnchor":"Topoi.Base.html#10513","idDesc":null,"idIdent":"incl","idType":"Functor (Sets κ) (PSh κ (Lift-cat κ κ ⊤Cat))"},{"idAnchor":"Topoi.Base.html#25311","idDesc":null,"idIdent":"mk","idType":"(f : Geom[ F , G ]) (g : Geom[ E , F ]) → Geom[ E , G ]"},{"idAnchor":"Topoi.Base.html#24579","idDesc":null,"idIdent":"adj","idType":"Id ⊣ Id"},{"idAnchor":"Topoi.Base.html#24003","idDesc":null,"idIdent":"Dir[_]","idType":"Geom[ E , F ] → Functor E F"},{"idAnchor":"Topoi.Base.html#10242","idDesc":null,"idIdent":"𝟙","idType":"Topos κ (Sets κ)"},{"idAnchor":"Topoi.Base.html#24493","idDesc":null,"idIdent":"lex","idType":"is-lex Id"},{"idAnchor":"Topoi.Base.html#3791","idDesc":null,"idIdent":"L-lex","idType":"(r : Topos κ 𝓣) → is-lex (r .L)"},{"idAnchor":"Topoi.Base.html#3593","idDesc":null,"idIdent":"Topos","idType":"(κ : Level) (𝓣 : Precategory o κ) → Type (lsuc o ⊔ lsuc κ)"},{"idAnchor":"Topoi.Base.html#15539","idDesc":null,"idIdent":"Sheafify","idType":"(T : Topos κ 𝓣) → Monad (PSh κ (site T))"},{"idAnchor":"Topoi.Base.html#15700","idDesc":null,"idIdent":"Topos-is-complete","idType":"(T : Topos κ 𝓣) → is-complete κ κ 𝓣"},{"idAnchor":"Topoi.Base.html#16477","idDesc":null,"idIdent":"Topos-is-cocomplete","idType":"(T : Topos κ 𝓣) → is-cocomplete κ κ 𝓣"},{"idAnchor":"Topoi.Base.html#22097","idDesc":null,"idIdent":"Slice-topos","idType":"(T : Topos ℓ C) (X : Ob C) → Topos ℓ (Slice C X)"},{"idAnchor":"Topoi.Base.html#14669","idDesc":null,"idIdent":"adj","idType":"(C : Precategory κ κ) → Id ⊣ Id"},{"idAnchor":"Topoi.Base.html#12351","idDesc":null,"idIdent":"uniq","idType":"(psh-terminal : is-terminal (PSh κ (sets .site)) T)\n(set₁ : Sets κ .Ob)\n(f\n : ∣ ₀ (func psh-terminal set₁) (lift tt) ∣ → ∣ ₀ T (lift tt) ∣) →\ncent psh-terminal set₁ .η (lift tt) ≡ f"},{"idAnchor":"Topoi.Base.html#15606","idDesc":null,"idIdent":"Sheafify-monadic","idType":"(T : Topos κ 𝓣) → is-monadic (L⊣ι T)"},{"idAnchor":"Topoi.Base.html#24057","idDesc":null,"idIdent":"Inv⊣Dir","idType":"(r : Geom[ E , F ]) → r .Inv[_] ⊣ r .Dir[_]"},{"idAnchor":"Topoi.Base.html#12985","idDesc":null,"idIdent":"p2'","idType":"(pb : is-pullback (PSh κ (sets .site)) p1 f p2 g)\n(p : (Sets κ ∘ ₁ (sets .L) f) p₁' ≡ (Sets κ ∘ ₁ (sets .L) g) p₂') →\nincl .F₀ P' => Y"},{"idAnchor":"Topoi.Base.html#16778","idDesc":null,"idIdent":"sheafified","idType":"(T : Topos κ 𝓣) (F : Functor D 𝓣) → Colimit ((L T F∘ ι T) F∘ F)"},{"idAnchor":"Topoi.Base.html#13353","idDesc":null,"idIdent":"l′","idType":"(pb : is-pullback (PSh κ (sets .site)) p1 f p2 g)\n(p1 : (Sets κ ∘ ₁ (sets .L) p2) lim' ≡ p₁')\n(p2 : (Sets κ ∘ ₁ (sets .L) p3) lim' ≡ p₂') →\nincl .F₀ P′ => P"},{"idAnchor":"Topoi.Base.html#12884","idDesc":null,"idIdent":"p1'","idType":"(pb : is-pullback (PSh κ (sets .site)) p1 f p2 g)\n(p : (Sets κ ∘ ₁ (sets .L) f) p₁' ≡ (Sets κ ∘ ₁ (sets .L) g) p₂') →\nincl .F₀ P' => X"},{"idAnchor":"Topoi.Base.html#18487","idDesc":null,"idIdent":"Representables-generate","idType":"(ct : Topos ℓ C) →\n((h : C .Hom (₀ (L ct) (よ₀ (site ct) A)) X) →\n C ._∘_ f h ≡ C ._∘_ g h) →\nf ≡ g"},{"idAnchor":"Topoi.Base.html#25173","idDesc":null,"idIdent":"_G∘_","idType":"Geom[ F , G ] → Geom[ E , F ] → Geom[ E , G ]"},{"idAnchor":"Topoi.Base.html#26745","idDesc":null,"idIdent":"emb","idType":"(T : Topos κ E) → Geom[ E ↪ PSh κ (T .site) ]"},{"idAnchor":"Topoi.Base.html#12633","idDesc":null,"idIdent":"pb′","idType":"(pb : is-pullback (PSh κ (sets .site)) p1 f p2 g) →\nis-pullback (Sets κ) (₁ (sets .L) p1) (₁ (sets .L) f)\n(₁ (sets .L) p2) (₁ (sets .L) g)"},{"idAnchor":"Topoi.Base.html#3760","idDesc":null,"idIdent":"L","idType":"(r : Topos κ 𝓣) → Functor (PSh κ (r .site)) 𝓣"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#2230","idDesc":null,"idIdent":"pb","idType":"(Cat₁ : Precategory o h) (lim : Limit F) →\nPullback Cat₁ (₁ F (lift tt)) (₁ F (lift tt))"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#592","idDesc":null,"idIdent":"Square→Cone","idType":"(Cat₁ : Precategory o h) (p1 : Hom Cat₁ P (F .F₀ cs-a))\n(p2 : Hom Cat₁ P (F .F₀ cs-b)) →\n(Cat₁ ∘ F .F₁ (lift tt)) p1 ≡ (Cat₁ ∘ F .F₁ (lift tt)) p2 → Cone F"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#1318","idDesc":null,"idIdent":"Pullback→Limit","idType":"(Cat₁ : Precategory o h) →\nPullback Cat₁ f g → Limit (cospan→cospan-diagram x y f g)"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#1524","idDesc":null,"idIdent":"lim","idType":"(Cat₁ : Precategory o h) (pb : Pullback Cat₁ f g) →\nLimit (cospan→cospan-diagram x y f g)"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#2020","idDesc":null,"idIdent":"Limit→Pullback","idType":"(Cat₁ : Precategory o h) →\nLimit F → Pullback Cat₁ (F .F₁ (lift tt)) (F .F₁ (lift tt))"},{"idAnchor":"Cat.Diagram.Limit.Pullback.html#2811","idDesc":null,"idIdent":"other","idType":"(Cat₁ : Precategory o h) (lim : Limit F)\n(a : (Cat₁ ∘ pb Cat₁ lim .p₁) lim' ≡ p₁')\n(b : (Cat₁ ∘ pb Cat₁ lim .p₂) lim' ≡ p₂') →\nCone-hom F (Square→Cone Cat₁ p₁' p₂' p) (lim .top)"},{"idAnchor":"Data.Fin.Properties.html#1689","idDesc":null,"idIdent":"squish-skip-comm","idType":"(i : Fin (suc n)) (j : Fin n) →\ni < fsuc j →\n(x : Fin (suc n)) →\nsquish (fsuc j) (skip (weaken i) x) ≡ skip i (squish j x)"},{"idAnchor":"Data.Fin.Properties.html#1271","idDesc":null,"idIdent":"drop-comm","idType":"(i j : Fin n) →\ni ≤ j →\n(x : Fin (suc (suc n))) →\nsquish j (squish (weaken i) x) ≡ squish i (squish (fsuc j) x)"},{"idAnchor":"Data.Fin.Properties.html#2014","idDesc":null,"idIdent":"squish-skip","idType":"(i j : Fin n) →\ni ≡ j → (x : Fin n) → squish j (skip (weaken j) x) ≡ x"},{"idAnchor":"Data.Fin.Properties.html#2367","idDesc":null,"idIdent":"squish-skip-fsuc","idType":"(i : Fin (suc n)) (j : Fin n) →\ni ≡ fsuc j → (x : Fin n) → squish j (skip i x) ≡ x"},{"idAnchor":"Data.Fin.Properties.html#987","idDesc":null,"idIdent":"skip-comm","idType":"(i j : Fin (suc n)) →\ni ≤ j →\n(x : Fin n) → skip (weaken i) (skip j x) ≡ skip (fsuc j) (skip i x)"},{"idAnchor":"Cat.Thin.html#8896","idDesc":null,"idIdent":"Posets","idType":"(o h : Level) → Precategory (lsuc (o ⊔ h)) (o ⊔ h)"},{"idAnchor":"Cat.Thin.html#4641","idDesc":null,"idIdent":"antisym","idType":"(r : Poset o h) → (r ≤ x) y → (r ≤ y) x → x ≡ y"},{"idAnchor":"Cat.Thin.html#7109","idDesc":null,"idIdent":"isp","idType":"(Rrefl : R₁ x x) (Rtrans : R₁ x y → R₁ y z → R₁ x z)\n(Rantisym : R₁ x y → R₁ y x → x ≡ y) (Rprop : is-prop (R₁ x y))\n(A B₁ : Ob (tc Rrefl Rtrans Rantisym Rprop .underlying)) →\n(tc Rrefl Rtrans Rantisym Rprop .underlying ≅ A) B₁ →\n(x\n : Ob\n   (underlying\n    (make-proset (Aset Rrefl Rtrans Rantisym Rprop) Rrefl Rtrans\n     Rprop))) →\nis-prop\n((make-proset (Aset Rrefl Rtrans Rantisym Rprop) Rrefl Rtrans Rprop\n  ≅ A)\n x)"},{"idAnchor":"Cat.Thin.html#10154","idDesc":null,"idIdent":"pro","idType":"(C : Strict-Cat o h .Ob) → Proset o h"},{"idAnchor":"Cat.Thin.html#667","idDesc":null,"idIdent":"is-thin","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Thin.html#9576","idDesc":null,"idIdent":"Forget","idType":"Functor (Prosets o h) (Strict-Cat o h)"},{"idAnchor":"Cat.Thin.html#4260","idDesc":null,"idIdent":"_≤_","idType":"(r : Poset o h) → Ob r → Ob r → Type h"},{"idAnchor":"Cat.Thin.html#3568","idDesc":null,"idIdent":"underlying","idType":"Poset o h → Precategory o h"},{"idAnchor":"Cat.Thin.html#1103","idDesc":null,"idIdent":"has-is-thin","idType":"(r : Proset o h) → is-thin (r .underlying)"},{"idAnchor":"Cat.Thin.html#3606","idDesc":null,"idIdent":"has-is-thin","idType":"(r : Poset o h) → is-thin (r .underlying)"},{"idAnchor":"Cat.Thin.html#795","idDesc":null,"idIdent":"Hom-is-prop","idType":"is-thin C → (A B₁ : C .Ob) → is-prop (Hom C A B₁)"},{"idAnchor":"Cat.Thin.html#8369","idDesc":null,"idIdent":"Monotone-map","idType":"Poset o h → Poset o′ h′ → Type (o ⊔ h ⊔ o′ ⊔ h′)"},{"idAnchor":"Cat.Thin.html#4298","idDesc":null,"idIdent":"reflexive","idType":"(r : Poset o h) → (r ≤ x) x"},{"idAnchor":"Cat.Thin.html#769","idDesc":null,"idIdent":"Ob-is-set","idType":"is-thin C → is-set (Ob C)"},{"idAnchor":"Cat.Thin.html#1221","idDesc":null,"idIdent":"_≤_","idType":"(r : Proset o h) → Ob r → Ob r → Type h"},{"idAnchor":"Cat.Thin.html#4968","idDesc":null,"idIdent":"→Proset","idType":"(r : Poset o h) → Proset o h"},{"idAnchor":"Cat.Thin.html#2346","idDesc":null,"idIdent":"tc","idType":"(Aset : is-set A) (Rrefl : R₁ x x)\n(Rtrans : R₁ x y → R₁ y z → R₁ x z) (Rprop : is-prop (R₁ x y)) →\nProset ℓ ℓ'"},{"idAnchor":"Cat.Thin.html#1392","idDesc":null,"idIdent":"Prosets","idType":"(o h : Level) → Precategory (lsuc (o ⊔ h)) (o ⊔ h)"},{"idAnchor":"Cat.Thin.html#10053","idDesc":null,"idIdent":"Free","idType":"Functor (Strict-Cat o h) (Prosets o h)"},{"idAnchor":"Cat.Thin.html#4344","idDesc":null,"idIdent":"transitive","idType":"(r : Poset o h) → (r ≤ x) y → (r ≤ y) z → (r ≤ x) z"},{"idAnchor":"Cat.Thin.html#7764","idDesc":null,"idIdent":"ob-set","idType":"(C : Precategory o ℓ)\n(hprop : (A B₁ : C .Ob) → is-prop (Hom C A B₁))\n(cat : is-category C) →\nis-set (C .Ob)"},{"idAnchor":"Cat.Thin.html#3916","idDesc":null,"idIdent":"H-Level-Hom","idType":"(r : Poset o h) → H-Level (Hom r x y) (suc n)"},{"idAnchor":"Cat.Thin.html#6470","idDesc":null,"idIdent":"tc","idType":"(Rrefl : R₁ x x) (Rtrans : R₁ x y → R₁ y z → R₁ x z)\n(Rantisym : R₁ x y → R₁ y x → x ≡ y) (Rprop : is-prop (R₁ x y)) →\nPoset ℓ ℓ'"},{"idAnchor":"Cat.Thin.html#6151","idDesc":null,"idIdent":"Aset","idType":"(Rrefl : R₁ x x) (Rtrans : R₁ x y → R₁ y z → R₁ x z)\n(Rantisym : R₁ x y → R₁ y x → x ≡ y) (Rprop : is-prop (R₁ x y)) →\nis-set A"},{"idAnchor":"Cat.Thin.html#5521","idDesc":null,"idIdent":"make-poset","idType":"R₁ x x →\n(R₁ x y → R₁ y z → R₁ x z) →\n(R₁ x y → R₁ y x → x ≡ y) → is-prop (R₁ x y) → Poset ℓ ℓ'"},{"idAnchor":"Cat.Thin.html#3489","idDesc":null,"idIdent":"Poset","idType":"(o h : Level) → Type (lsuc o ⊔ lsuc h)"},{"idAnchor":"Cat.Thin.html#3648","idDesc":null,"idIdent":"has-is-univalent","idType":"(r : Poset o h) → is-category (r .underlying)"},{"idAnchor":"Cat.Thin.html#1508","idDesc":null,"idIdent":"proset","idType":"(o h : Level) → Precategory (lsuc o ⊔ lsuc h) (o ⊔ h)"},{"idAnchor":"Cat.Thin.html#7910","idDesc":null,"idIdent":"pos","idType":"(C : Precategory o ℓ)\n(hprop : (A B₁ : C .Ob) → is-prop (Hom C A B₁))\n(cat : is-category C) →\nPoset o ℓ"},{"idAnchor":"Cat.Thin.html#11256","idDesc":null,"idIdent":"Free⊣Forget","idType":"Free ⊣ Forget"},{"idAnchor":"Cat.Thin.html#7511","idDesc":null,"idIdent":"univalent-thin-precat→Poset","idType":"(C : Precategory o ℓ) →\n((A B₁ : C .Ob) → is-prop (Hom C A B₁)) → is-category C → Poset o ℓ"},{"idAnchor":"Cat.Thin.html#8481","idDesc":null,"idIdent":"make-monotone-map","idType":"(C : Poset o h) (D : Poset o′ h′) (f : Ob C → Ob D) →\n((x y : underlying C .Ob) → Hom C x y → Hom D (f x) (f y)) →\nMonotone-map C D"},{"idAnchor":"Cat.Thin.html#989","idDesc":null,"idIdent":"Proset","idType":"(o h : Level) → Type (lsuc o ⊔ lsuc h)"},{"idAnchor":"Cat.Thin.html#2025","idDesc":null,"idIdent":"make-proset","idType":"is-set A →\nR₁ x x →\n(R₁ x y → R₁ y z → R₁ x z) → is-prop (R₁ x y) → Proset ℓ ℓ'"},{"idAnchor":"Cat.Thin.html#1069","idDesc":null,"idIdent":"underlying","idType":"Proset o h → Precategory o h"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#5577","idDesc":null,"idIdent":"is-monic→is-pullback","idType":"is-monic C f → is-pullback C (id C) f (id C) f"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#4194","idDesc":null,"idIdent":"pasting-left→outer-is-pullback","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f) →\nis-pullback C a→b b→e a→d d→e →\n(C ∘ c→f) ((C ∘ b→c) a→b) ≡ (C ∘ (C ∘ e→f) d→e) a→d →\nis-pullback C ((C ∘ b→c) a→b) c→f a→d ((C ∘ e→f) d→e)"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#6409","idDesc":null,"idIdent":"q","idType":"(mono : is-monic C f) (pb : is-pullback C p1 f p2 g)\n(h j : Hom C c p) (p : (C ∘ p2) h ≡ (C ∘ p2) j) →\n(C ∘ f) ((C ∘ p1) h) ≡ (C ∘ f) ((C ∘ p1) j)"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#7108","idDesc":null,"idIdent":"is-pullback-iso","idType":"(i : (C ≅ p) p′) →\nis-pullback C p1 f p2 g →\nis-pullback C ((C ∘ p1) (from i)) f ((C ∘ p2) (from i)) g"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#8130","idDesc":null,"idIdent":"il","idType":"(pb : is-pullback C p1 f p2 g) (pb′ : is-pullback C p1′ f p2′ g) →\n(C ∘ pb′ .limiting (pb .square)) (pb .limiting (pb′ .square)) ≡\nC .id"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#6715","idDesc":null,"idIdent":"rotate-pullback","idType":"is-pullback C p1 f p2 g → is-pullback C p2 g p1 f"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#8090","idDesc":null,"idIdent":"pb′→pb","idType":"(pb : is-pullback C p1 f p2 g) (pb′ : is-pullback C p1′ f p2′ g) →\nHom C p′ p"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#4981","idDesc":null,"idIdent":"s","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f)\n(left : is-pullback C a→b b→e a→d d→e)\n(square₁ : (C ∘ c→f) ((C ∘ b→c) a→b) ≡ (C ∘ (C ∘ e→f) d→e) a→d)\n(q : (C ∘ (C ∘ b→c) a→b) lim' ≡ P→c) (r : (C ∘ a→d) lim' ≡ P→d) →\n(C ∘ b→e) ((C ∘ a→b) lim') ≡ (C ∘ d→e) P→d"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#2184","idDesc":null,"idIdent":"pasting-outer→left-is-pullback","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f) →\nis-pullback C ((C ∘ b→c) a→b) c→f a→d ((C ∘ e→f) d→e) →\n(C ∘ b→e) a→b ≡ (C ∘ d→e) a→d → is-pullback C a→b b→e a→d d→e"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#6584","idDesc":null,"idIdent":"r","idType":"(mono : is-monic C f) (pb : is-pullback C p1 f p2 g)\n(h j : Hom C c p) (p : (C ∘ p2) h ≡ (C ∘ p2) j) →\n(C ∘ p1) h ≡ (C ∘ p1) j"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#2800","idDesc":null,"idIdent":"path","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f) →\nis-pullback C ((C ∘ b→c) a→b) c→f a→d ((C ∘ e→f) d→e) →\n(C ∘ b→e) a→b ≡ (C ∘ d→e) a→d →\n(C ∘ b→e) P→b ≡ (C ∘ d→e) P→d →\n(C ∘ c→f) ((C ∘ b→c) P→b) ≡ (C ∘ (C ∘ e→f) d→e) P→d"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#8050","idDesc":null,"idIdent":"pb→pb′","idType":"(pb : is-pullback C p1 f p2 g) (pb′ : is-pullback C p1′ f p2′ g) →\nHom C p p′"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#7376","idDesc":null,"idIdent":"pb′","idType":"(i : (C ≅ p) p′) (pb : is-pullback C p1 f p2 g) →\nis-pullback C ((C ∘ p1) (i .from)) f ((C ∘ p2) (i .from)) g"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#5916","idDesc":null,"idIdent":"is-pullback→is-monic","idType":"is-pullback C (id C) f (id C) f → is-monic C f"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#8293","idDesc":null,"idIdent":"ir","idType":"(pb : is-pullback C p1 f p2 g) (pb′ : is-pullback C p1′ f p2′ g) →\n(C ∘ pb .limiting (pb′ .square)) (pb′ .limiting (pb .square)) ≡\nC .id"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#6133","idDesc":null,"idIdent":"is-monic→pullback-is-monic","idType":"is-monic C f → is-pullback C p1 f p2 g → is-monic C p2"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#6628","idDesc":null,"idIdent":"eq","idType":"(mono : is-monic C f) (pb : is-pullback C p1 f p2 g)\n(h j : Hom C c p) (p : (C ∘ p2) h ≡ (C ∘ p2) j) →\nh ≡ j"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#3122","idDesc":null,"idIdent":"pb","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f)\n(outer : is-pullback C ((C ∘ b→c) a→b) c→f a→d ((C ∘ e→f) d→e))\n(square₁ : (C ∘ b→e) a→b ≡ (C ∘ d→e) a→d) →\nis-pullback C a→b b→e a→d d→e"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#7750","idDesc":null,"idIdent":"pullback-unique","idType":"is-pullback C p1 f p2 g → is-pullback C p1′ f p2′ g → (C ≅ p) p′"},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#4458","idDesc":null,"idIdent":"pb","idType":"(right-pullback : is-pullback C b→c c→f b→e e→f)\n(left : is-pullback C a→b b→e a→d d→e)\n(square₁ : (C ∘ c→f) ((C ∘ b→c) a→b) ≡ (C ∘ (C ∘ e→f) d→e) a→d) →\nis-pullback C ((C ∘ b→c) a→b) c→f a→d ((C ∘ e→f) d→e)"},{"idAnchor":"Cat.Functor.Slice.html#2142","idDesc":null,"idIdent":"isom","idType":"(eqv : is-fully-faithful F) → is-iso (F₁ (Sliced F X))"},{"idAnchor":"Cat.Functor.Slice.html#2898","idDesc":null,"idIdent":"Sliced-lex","idType":"is-lex F → is-lex (Sliced F X)"},{"idAnchor":"Cat.Functor.Slice.html#986","idDesc":null,"idIdent":"sh′","idType":"(F : Functor C D) (X : Ob C) (sh : Slice C X .Hom x y) →\n/-Hom (Sliced F X .F₀ x) (Sliced F X .F₀ y)"},{"idAnchor":"Cat.Functor.Slice.html#1908","idDesc":null,"idIdent":"Sliced-faithful","idType":"is-faithful F → is-faithful (Sliced F X)"},{"idAnchor":"Cat.Functor.Slice.html#5019","idDesc":null,"idIdent":"adj′","idType":"(adj : L ⊣ R₁) →\nΣf (adj .counit .η X) F∘ Sliced L (R₁ .F₀ X) ⊣ Sliced R₁ X"},{"idAnchor":"Cat.Functor.Slice.html#3237","idDesc":null,"idIdent":"lex","idType":"(flex : is-lex F) → is-lex (Sliced F X)"},{"idAnchor":"Cat.Functor.Slice.html#4612","idDesc":null,"idIdent":"Sliced-adjoints","idType":"(adj : L ⊣ R₁) →\nΣf (adj .counit .η X) F∘ Sliced L (R₁ .F₀ X) ⊣ Sliced R₁ X"},{"idAnchor":"Cat.Functor.Slice.html#2028","idDesc":null,"idIdent":"Sliced-ff","idType":"is-fully-faithful F → is-fully-faithful (Sliced F X)"},{"idAnchor":"Cat.Functor.Slice.html#735","idDesc":null,"idIdent":"Sliced","idType":"(F : Functor C D) (X : Ob C) →\nFunctor (Slice C X) (Slice D (F .F₀ X))"},{"idAnchor":"Data.Int.Inductive.html#2218","idDesc":null,"idIdent":"suc-pred","idType":"(x : Int) → suc-int (pred-int x) ≡ x"},{"idAnchor":"Data.Int.Inductive.html#2351","idDesc":null,"idIdent":"pred-suc","idType":"(x : Int) → pred-int (suc-int x) ≡ x"},{"idAnchor":"Data.Int.Inductive.html#1486","idDesc":null,"idIdent":".extendedlambda0","idType":"(x y : Nat) (¬p : x ≡ y → ⊥) (path₁ : negsuc x ≡ negsuc y)\n(x₁ : Int) →\nNat"},{"idAnchor":"Data.Int.Inductive.html#1779","idDesc":null,"idIdent":".extendedlambda0","idType":"(x y : Nat) (path₁ : negsuc x ≡ pos y) → Int → Type"},{"idAnchor":"Data.Int.Inductive.html#1317","idDesc":null,"idIdent":".extendedlambda0","idType":"(x y : Nat) (¬p : x ≡ y → ⊥) (path₁ : pos x ≡ pos y) (x₁ : Int) →\nNat"},{"idAnchor":"Data.Int.Inductive.html#1680","idDesc":null,"idIdent":".extendedlambda0","idType":"(x y : Nat) (path₁ : pos x ≡ negsuc y) → Int → Type"},{"idAnchor":"Data.Int.Inductive.html#2487","idDesc":null,"idIdent":"suc-equiv","idType":"Int ≃ Int"},{"idAnchor":"Data.Int.Inductive.html#1175","idDesc":null,"idIdent":"Discrete-Int","idType":"Discrete Int"},{"idAnchor":"Data.Int.Inductive.html#2088","idDesc":null,"idIdent":"pred-int","idType":"Int → Int"},{"idAnchor":"Data.Int.Inductive.html#856","idDesc":null,"idIdent":"_ℕ-_","idType":"Nat → Nat → Int"},{"idAnchor":"Data.Int.Inductive.html#1956","idDesc":null,"idIdent":"suc-int","idType":"Int → Int"},{"idAnchor":"1Lab.Reflection.Record.html#4027","idDesc":null,"idIdent":".extendedlambda0","idType":"Bool → TC Name → Name → Definition → TC Name"},{"idAnchor":"1Lab.Reflection.Record.html#936","idDesc":null,"idIdent":"go","idType":"(namen : Name) (unfolded : List (Arg Term) → TC Term) →\nList ArgInfo → Term → TC Term"},{"idAnchor":"1Lab.Reflection.Record.html#3706","idDesc":null,"idIdent":"instantiate′","idType":"Term → Term → Term"},{"idAnchor":"1Lab.Reflection.Record.html#2544","idDesc":null,"idIdent":"undo-redo-clauses","idType":"Fields → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#787","idDesc":null,"idIdent":"record→iso","idType":"Name → (List (Arg Term) → TC Term) → TC Term"},{"idAnchor":"1Lab.Reflection.Record.html#2950","idDesc":null,"idIdent":"redo-undo-clauses","idType":"Fields → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#524","idDesc":null,"idIdent":"field-names→paths","idType":"List (Arg Name) → Fields"},{"idAnchor":"1Lab.Reflection.Record.html#245","idDesc":null,"idIdent":"field-names→sigma","idType":"List A → Term"},{"idAnchor":"1Lab.Reflection.Record.html#1557","idDesc":null,"idIdent":"implicitArgs","idType":"(namen : Name) (unfolded : List (Arg Term) → TC Term)\n(acc : List ArgInfo) (s : Sort) →\nNat → List (Arg Term) → List ArgInfo → List (Arg Term)"},{"idAnchor":"1Lab.Reflection.Record.html#1878","idDesc":null,"idIdent":"go","idType":"List (Name × List Name) → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#5272","idDesc":null,"idIdent":"define-record-iso","idType":"Name → Name → TC ⊤"},{"idAnchor":"1Lab.Reflection.Record.html#3867","idDesc":null,"idIdent":"make-record-iso-sigma","idType":"Bool → TC Name → Name → TC Name"},{"idAnchor":"1Lab.Reflection.Record.html#1128","idDesc":null,"idIdent":"i'","idType":"(namen : Name) (unfolded : List (Arg Term) → TC Term)\n(acc : List ArgInfo) (i : ArgInfo) (argTy : Type) (s : String)\n(ty : Type) →\nArgInfo"},{"idAnchor":"1Lab.Reflection.Record.html#5139","idDesc":null,"idIdent":"declare-record-iso","idType":"Name → Name → TC ⊤"},{"idAnchor":"1Lab.Reflection.Record.html#1816","idDesc":null,"idIdent":"undo-clauses","idType":"Fields → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#2616","idDesc":null,"idIdent":"go","idType":"Fields → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#2212","idDesc":null,"idIdent":"redo-clauses","idType":"Fields → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#3022","idDesc":null,"idIdent":"go","idType":"List (Name × List Name) → List Clause"},{"idAnchor":"1Lab.Reflection.Record.html#1371","idDesc":null,"idIdent":"makeArgs","idType":"(namen : Name) (unfolded : List (Arg Term) → TC Term)\n(acc : List ArgInfo) (s : Sort) →\nNat → List (Arg Term) → List ArgInfo → List (Arg Term)"},{"idAnchor":"1Lab.Reflection.Record.html#4343","idDesc":null,"idIdent":".extendedlambda1","idType":"(declare? : Bool) (getName₁ : TC Name) (`R : Name) (`R-con : Name)\n(fields : List (Arg Name)) (`R-ty con-ty : Type) (ty : Term)\n(nm : Name) →\nBool → TC ⊤"},{"idAnchor":"1Lab.Reflection.Record.html#3403","idDesc":null,"idIdent":"pi-term→sigma","idType":"Term → TC Term"},{"idAnchor":"1Lab.Reflection.Record.html#476","idDesc":null,"idIdent":"Fields","idType":"Type"},{"idAnchor":"1Lab.Reflection.Record.html#2274","idDesc":null,"idIdent":"go","idType":"List (Name × List Name) → List Clause"},{"idAnchor":"1Lab.Rewrite.html#78","idDesc":null,"idIdent":"_≡rw_","idType":"A → A → SSet ℓ"},{"idAnchor":"1Lab.Rewrite.html#189","idDesc":null,"idIdent":"make-rewrite","idType":"Path A x y → x ≡rw y"},{"idAnchor":"1Lab.Rewrite.html#130","idDesc":null,"idIdent":"idrw","idType":"x ≡rw x"},{"idAnchor":"Cat.Instances.FinSet.html#1081","idDesc":null,"idIdent":"FinSets","idType":"Precategory lzero lzero"},{"idAnchor":"Cat.Diagram.Sieve.html#850","idDesc":null,"idIdent":"Sieve","idType":"(C : Precategory o κ) (c : Ob C) → Type (o ⊔ lsuc κ)"},{"idAnchor":"Cat.Diagram.Sieve.html#2985","idDesc":null,"idIdent":"to-presheaf↪よ","idType":"(C : Precategory o κ) (c : Ob C) →\n(PSh κ C ↪ to-presheaf C c S₁) (よ₀ C c)"},{"idAnchor":"Cat.Diagram.Sieve.html#934","idDesc":null,"idIdent":"closed","idType":"(r : Sieve C c) (g : C .Hom y z) →\nf ∈ r .arrows → C ._∘_ f g ∈ r .arrows"},{"idAnchor":"Cat.Diagram.Sieve.html#1572","idDesc":null,"idIdent":"intersect","idType":"(C : Precategory o κ) (c : Ob C) → (I₁ → Sieve C c) → Sieve C c"},{"idAnchor":"Cat.Diagram.Sieve.html#1473","idDesc":null,"idIdent":"maximal′","idType":"(C : Precategory o κ) (c : Ob C) → Sieve C c"},{"idAnchor":"Cat.Diagram.Sieve.html#2173","idDesc":null,"idIdent":"to-presheaf","idType":"(C : Precategory o κ) (c : Ob C) → Sieve C c → PSh κ C .Ob"},{"idAnchor":"Cat.Diagram.Sieve.html#894","idDesc":null,"idIdent":"arrows","idType":"Sieve C c → ℙ (C .Hom y c)"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#3098","idDesc":null,"idIdent":"monad′","idType":"(monad : Monad (Cat o ℓ) C) → Monad C"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#855","idDesc":null,"idIdent":"η","idType":"(r : Monad B₁ a) → (B₁ ⇒ id B₁) (r .M)"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#811","idDesc":null,"idIdent":"M","idType":"Monad B₁ a → (B₁ ↦ a) a"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#2965","idDesc":null,"idIdent":"Bicat-monad→monad","idType":"Monad (Cat o ℓ) C → Monad C"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#829","idDesc":null,"idIdent":"μ","idType":"(r : Monad B₁ a) → (B₁ ⇒ (B₁ ∘ r .M) (r .M)) (r .M)"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#1336","idDesc":null,"idIdent":"μ-assoc","idType":"(r : Monad B₁ a) →\n(B₁ ⊗ r .μ) ((B₁ ▶ r .M) (r .μ)) ≡\n(B₁ ⊗ r .μ)\n((B₁ ⊗ (B₁ ◀ r .μ) (r .M)) (α← B₁ (r .M) (r .M) (r .M)))"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#3737","idDesc":null,"idIdent":"monad′","idType":"(monad : Monad C) → Monad (Cat o ℓ) C"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#756","idDesc":null,"idIdent":"Monad","idType":"(B₁ : Prebicategory o ℓ ℓ′) (a : Ob B₁) → Type (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#1401","idDesc":null,"idIdent":"μ-unitr","idType":"(r : Monad B₁ a) → (B₁ ⊗ r .μ) ((B₁ ▶ r .M) (r .η)) ≡ ρ← B₁ (r .M)"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#3600","idDesc":null,"idIdent":"Monad→bicat-monad","idType":"Monad C → Monad (Cat o ℓ) C"},{"idAnchor":"Cat.Bi.Diagram.Monad.html#1442","idDesc":null,"idIdent":"μ-unitl","idType":"(r : Monad B₁ a) → (B₁ ⊗ r .μ) ((B₁ ◀ r .η) (r .M)) ≡ λ← B₁ (r .M)"},{"idAnchor":"Data.Power.Lattice.html#7945","idDesc":null,"idIdent":"ℙ-cocomplete","idType":"is-cocomplete ℓ ℓ (ℙ⊆ X .underlying)"},{"idAnchor":"Data.Power.Lattice.html#1798","idDesc":null,"idIdent":".extendedlambda3","idType":"(x : X) → x ∈ (y ∩ x₁) → x ∈ (x₁ ∩ y)"},{"idAnchor":"Data.Power.Lattice.html#7686","idDesc":null,"idIdent":"ic","idType":"(F : I₁ → ℙ X) → Indexed-coproduct (ℙ⊆ X .underlying) F"},{"idAnchor":"Data.Power.Lattice.html#2988","idDesc":null,"idIdent":".extendedlambda1","idType":"(x : X) (x₁ : ∣ (y ∪ z) x ∣) (x₂ : ∣ y x ∣ ⊎ ∣ z x ∣) →\n∥ ∣ (x₃ ∪ y) x ∣ ⊎ ∣ z x ∣ ∥"},{"idAnchor":"Data.Power.Lattice.html#3239","idDesc":null,"idIdent":".extendedlambda1","idType":"(x : X) (x₁ : ∣ (x₂ ∪ y) x ∣) (x₂ : ∣ x₃ x ∣ ⊎ ∣ y x ∣) →\n∥ ∣ x₃ x ∣ ⊎ ∣ (y ∪ z) x ∣ ∥"},{"idAnchor":"Data.Power.Lattice.html#1093","idDesc":null,"idIdent":"ℙ⊆","idType":"Type ℓ → Poset (lsuc ℓ) ℓ"},{"idAnchor":"Data.Power.Lattice.html#1875","idDesc":null,"idIdent":".extendedlambda5","idType":"(x : X) → x ∈ x₁ → x ∈ (x₁ ∩ x₁)"},{"idAnchor":"Data.Power.Lattice.html#4445","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : A) → x ∈ (X ∩ (X ∪ Y)) → x ∈ X"},{"idAnchor":"Data.Power.Lattice.html#4885","idDesc":null,"idIdent":"Power","idType":"(X : Type ℓ) → Lattice-on (ℙ X)"},{"idAnchor":"Data.Power.Lattice.html#2115","idDesc":null,"idIdent":"∪-semilattice","idType":"is-semilattice _∪_"},{"idAnchor":"Data.Power.Lattice.html#2863","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) (x₁ : ∣ x₂ x ∣ ⊎ ∣ (y ∪ z) x ∣) → x ∈ ((x₂ ∪ y) ∪ z)"},{"idAnchor":"Data.Power.Lattice.html#1853","idDesc":null,"idIdent":".extendedlambda4","idType":"(x : X) → x ∈ (x₁ ∩ x₁) → x ∈ x₁"},{"idAnchor":"Data.Power.Lattice.html#6884","idDesc":null,"idIdent":"ip","idType":"(F : I₁ → ℙ X) → Indexed-product (ℙ⊆ X .underlying) F"},{"idAnchor":"Data.Power.Lattice.html#3169","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) (x₁ : ∣ (x₂ ∪ y) x ∣ ⊎ ∣ z x ∣) → x ∈ (x₂ ∪ (y ∪ z))"},{"idAnchor":"Data.Power.Lattice.html#7917","idDesc":null,"idIdent":".extendedlambda1","idType":"(F : I₁ → ℙ X) →\n((i : I₁) → (→Proset (ℙ⊆ X) ≤ F i) B₁) →\n(x : X) (x₁ : Σ (λ x₂ → x ∈ F x₂)) → x ∈ B₁"},{"idAnchor":"Data.Power.Lattice.html#1706","idDesc":null,"idIdent":".extendedlambda1","idType":"(x : X) → x ∈ ((x₁ ∩ y) ∩ z) → x ∈ (x₁ ∩ (y ∩ z))"},{"idAnchor":"Data.Power.Lattice.html#1772","idDesc":null,"idIdent":".extendedlambda2","idType":"(x : X) → x ∈ (x₁ ∩ y) → x ∈ (y ∩ x₁)"},{"idAnchor":"Data.Power.Lattice.html#6190","idDesc":null,"idIdent":"from","idType":"X ≡ (X ∩ Y) → X ⊆ Y"},{"idAnchor":"Data.Power.Lattice.html#1397","idDesc":null,"idIdent":"∩-semilattice","idType":"is-semilattice _∩_"},{"idAnchor":"Data.Power.Lattice.html#3643","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) → ∣ x₁ x ∣ ⊎ ∣ y x ∣ → ∣ y x ∣ ⊎ ∣ x₁ x ∣"},{"idAnchor":"Data.Power.Lattice.html#4361","idDesc":null,"idIdent":"∩-absorbs-∪","idType":"(X ∩ (X ∪ Y)) ≡ X"},{"idAnchor":"Data.Power.Lattice.html#4491","idDesc":null,"idIdent":"∪-absorbs-∩","idType":"(X ∪ (X ∩ Y)) ≡ X"},{"idAnchor":"Data.Power.Lattice.html#4174","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) (x₁ : ∣ X x ∣ ⊎ ∣ X x ∣) → x ∈ X"},{"idAnchor":"Data.Power.Lattice.html#7100","idDesc":null,"idIdent":"ℙ-complete","idType":"is-complete ℓ ℓ (ℙ⊆ X .underlying)"},{"idAnchor":"Data.Power.Lattice.html#3736","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) → ∣ y x ∣ ⊎ ∣ x₁ x ∣ → ∣ x₁ x ∣ ⊎ ∣ y x ∣"},{"idAnchor":"Data.Power.Lattice.html#2688","idDesc":null,"idIdent":"r","idType":"is-semilattice _∪_"},{"idAnchor":"Data.Power.Lattice.html#6763","idDesc":null,"idIdent":"ℙ-indexed-meet","idType":"(F : I₁ → ℙ X) → Indexed-product (ℙ⊆ X .underlying) F"},{"idAnchor":"Data.Power.Lattice.html#7563","idDesc":null,"idIdent":"ℙ-indexed-join","idType":"(F : I₁ → ℙ X) → Indexed-coproduct (ℙ⊆ X .underlying) F"},{"idAnchor":"Data.Power.Lattice.html#1532","idDesc":null,"idIdent":"r","idType":"is-semilattice _∩_"},{"idAnchor":"Data.Power.Lattice.html#4643","idDesc":null,"idIdent":".extendedlambda1","idType":"(x : A) (x₁ : ∣ X x ∣ ⊎ ∣ (X ∩ Y) x ∣) → x ∈ X"},{"idAnchor":"Data.Power.Lattice.html#5397","idDesc":null,"idIdent":"subset-∩","idType":"(X ⊆ Y) ≃ (X ≡ (X ∩ Y))"},{"idAnchor":"Data.Power.Lattice.html#5879","idDesc":null,"idIdent":"to","idType":"X ⊆ Y → X ≡ (X ∩ Y)"},{"idAnchor":"Data.Power.Lattice.html#1660","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : X) → x ∈ (x₁ ∩ (y ∩ z)) → x ∈ ((x₁ ∩ y) ∩ z)"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#4367","idDesc":null,"idIdent":"nat₁","idType":"(F : Functor A B₁) (R₁ : Ran F F) → Ext R₁ => Ext R₁"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#5539","idDesc":null,"idIdent":"mult′","idType":"(F : Functor A B₁) (R₁ : Ran F F) →\n(Ext R₁ F∘ Ext R₁ F∘ Ext R₁) F∘ F => F"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#5149","idDesc":null,"idIdent":"path","idType":"(F : Functor A B₁) (R₁ : Ran F F) → nat₁ F R₁ .η x ≡ B₁ .id"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#3482","idDesc":null,"idIdent":"mult-nt","idType":"(F : Functor A B₁) (R₁ : Ran F F) → (Ext R₁ F∘ Ext R₁) F∘ F => F"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#5765","idDesc":null,"idIdent":"sig₁","idType":"(F : Functor A B₁) (R₁ : Ran F F) →\nExt R₁ F∘ Ext R₁ F∘ Ext R₁ => Ext R₁"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#5999","idDesc":null,"idIdent":"sig₂","idType":"(F : Functor A B₁) (R₁ : Ran F F) →\nExt R₁ F∘ Ext R₁ F∘ Ext R₁ => Ext R₁"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#4917","idDesc":null,"idIdent":"nat₁","idType":"(F : Functor A B₁) (R₁ : Ran F F) → Ext R₁ => Ext R₁"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#6246","idDesc":null,"idIdent":"path","idType":"(F : Functor A B₁) (R₁ : Ran F F) → sig₁ F R₁ .η x ≡ sig₂ F R₁ .η x"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#3871","idDesc":null,"idIdent":"Codensity","idType":"(F : Functor A B₁) (R₁ : Ran F F) → Monad B₁"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#3065","idDesc":null,"idIdent":"unit-nt","idType":"(F : Functor A B₁) (R₁ : Ran F F) → Id F∘ F => F"},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#4601","idDesc":null,"idIdent":"path","idType":"(F : Functor A B₁) (R₁ : Ran F F) → nat₁ F R₁ .η x ≡ B₁ .id"},{"idAnchor":"1Lab.HLevel.Sets.html#3041","idDesc":null,"idIdent":"prop","idType":"(((x ≡ y → ⊥) → ⊥) → x ≡ y) → is-prop ((x ≡ y → ⊥) → ⊥)"},{"idAnchor":"1Lab.HLevel.Sets.html#702","idDesc":null,"idIdent":"hasK","idType":"Type ℓ → Typeω"},{"idAnchor":"1Lab.HLevel.Sets.html#1790","idDesc":null,"idIdent":"equiv","idType":"R₁ x x →\n(toid : R₁ x y → x ≡ y) →\nis-prop (R₁ x y) → is-equiv (total (λ y → toid))"},{"idAnchor":"1Lab.HLevel.Sets.html#1921","idDesc":null,"idIdent":".extendedlambda0","idType":"(refl₁ : R₁ x x) (toid : R₁ x y → x ≡ y)\n(isprop : is-prop (R₁ x y)) (x : ∑ A (R₁ x₁)) →\n(x₁ , refl₁) ≡ x"},{"idAnchor":"1Lab.HLevel.Sets.html#860","idDesc":null,"idIdent":"K→is-set","idType":"hasK A → is-set A"},{"idAnchor":"1Lab.HLevel.Sets.html#3333","idDesc":null,"idIdent":"sep","idType":"Discrete A → ((x ≡ y → ⊥) → ⊥) → x ≡ y"},{"idAnchor":"1Lab.HLevel.Sets.html#2391","idDesc":null,"idIdent":"Rijke-is-set","idType":"R₁ x x → (R₁ x y → x ≡ y) → is-prop (R₁ x y) → is-set A"},{"idAnchor":"1Lab.HLevel.Sets.html#2871","idDesc":null,"idIdent":"¬¬-separated→is-set","idType":"(((x ≡ y → ⊥) → ⊥) → x ≡ y) → is-set A"},{"idAnchor":"1Lab.HLevel.Sets.html#975","idDesc":null,"idIdent":"is-set→K","idType":"is-set A → hasK A"},{"idAnchor":"1Lab.HLevel.Sets.html#1992","idDesc":null,"idIdent":".extendedlambda1","idType":"(refl₁ : R₁ x x) (toid : R₁ x y → x ≡ y)\n(isprop : is-prop (R₁ x y)) (x : ∑ A (_≡_ x₁)) →\n(x₁ , (λ i → x₁)) ≡ x"},{"idAnchor":"1Lab.HLevel.Sets.html#3231","idDesc":null,"idIdent":"Discrete→is-set","idType":"Discrete A → is-set A"},{"idAnchor":"1Lab.HLevel.Sets.html#1454","idDesc":null,"idIdent":"Rijke-equivalence","idType":"R₁ x x → (toid : R₁ x y → x ≡ y) → is-prop (R₁ x y) → is-equiv toid"},{"idAnchor":"1Lab.Reflection.html#695","idDesc":null,"idIdent":"equivInv","idType":"A ≃ B₁ → B₁ → A"},{"idAnchor":"1Lab.Reflection.html#1013","idDesc":null,"idIdent":"newMeta","idType":"Term → TC Term"},{"idAnchor":"1Lab.Reflection.html#2853","idDesc":null,"idIdent":"_arginfo=?_","idType":"ArgInfo → ArgInfo → Bool"},{"idAnchor":"1Lab.Reflection.html#407","idDesc":null,"idIdent":"_>>_","idType":"TC A → TC B₁ → TC B₁"},{"idAnchor":"1Lab.Reflection.html#3171","idDesc":null,"idIdent":"abs=?","idType":"(A → A → Bool) → Abs A → Abs A → Bool"},{"idAnchor":"1Lab.Reflection.html#560","idDesc":null,"idIdent":"idfun","idType":"(A : Type ℓ) → A → A"},{"idAnchor":"1Lab.Reflection.html#1555","idDesc":null,"idIdent":"tApply","idType":"Term → List (Arg Term) → Term"},{"idAnchor":"1Lab.Reflection.html#2553","idDesc":null,"idIdent":"_visibility=?_","idType":"Visibility → Visibility → Bool"},{"idAnchor":"1Lab.Reflection.html#1495","idDesc":null,"idIdent":"“Type”","idType":"Term → Term"},{"idAnchor":"1Lab.Reflection.html#1169","idDesc":null,"idIdent":"vlam","idType":"String → Term → Term"},{"idAnchor":"1Lab.Reflection.html#1067","idDesc":null,"idIdent":"varg","idType":"A → Arg A"},{"idAnchor":"1Lab.Reflection.html#610","idDesc":null,"idIdent":"equivFun","idType":"A ≃ B₁ → A → B₁"},{"idAnchor":"1Lab.Reflection.html#1792","idDesc":null,"idIdent":"Vec","idType":"Type ℓ → Nat → Type ℓ"},{"idAnchor":"1Lab.Reflection.html#2229","idDesc":null,"idIdent":"_name=?_","idType":"Name → Name → Bool"},{"idAnchor":"1Lab.Reflection.html#902","idDesc":null,"idIdent":"equivRet","idType":"(e : A ≃ B₁) (x : A) → equiv→inverse (e .snd) (e .fst x) ≡ x"},{"idAnchor":"1Lab.Reflection.html#493","idDesc":null,"idIdent":"Fun","idType":"Type ℓ → Type ℓ' → Type (ℓ ⊔ ℓ')"},{"idAnchor":"1Lab.Reflection.html#3980","idDesc":null,"idIdent":"debug!","idType":"Term → TC A"},{"idAnchor":"1Lab.Reflection.html#2956","idDesc":null,"idIdent":"arg=?","idType":"(A → A → Bool) → Arg A → Arg A → Bool"},{"idAnchor":"1Lab.Reflection.html#794","idDesc":null,"idIdent":"equivSec","idType":"(e : A ≃ B₁) (x : B₁) → e .fst (equiv→inverse (e .snd) x) ≡ x"},{"idAnchor":"1Lab.Reflection.html#2295","idDesc":null,"idIdent":"findName","idType":"Term → TC Name"},{"idAnchor":"1Lab.Reflection.html#1897","idDesc":null,"idIdent":"makeVarsFrom","idType":"Nat → Vec Term n"},{"idAnchor":"1Lab.Reflection.html#2126","idDesc":null,"idIdent":"getName","idType":"Term → Maybe Name"},{"idAnchor":"1Lab.Reflection.html#1710","idDesc":null,"idIdent":"tStrProj","idType":"Term → Name → Term"},{"idAnchor":"1Lab.Reflection.html#2028","idDesc":null,"idIdent":"iter","idType":"Nat → (A → A) → A → A"},{"idAnchor":"1Lab.Reflection.html#1854","idDesc":null,"idIdent":"_∷_","idType":"A → Vec A n → Vec A (suc n)"},{"idAnchor":"1Lab.Reflection.html#3344","idDesc":null,"idIdent":"_term=?_","idType":"Term → Term → Bool"},{"idAnchor":"1Lab.Reflection.html#1632","idDesc":null,"idIdent":"tStrMap","idType":"Term → Term → Term"},{"idAnchor":"1Lab.Reflection.html#1424","idDesc":null,"idIdent":"“_↦_”","idType":"Term → Term → Term"},{"idAnchor":"1Lab.Reflection.html#1836","idDesc":null,"idIdent":"[]","idType":"Vec A zero"},{"idAnchor":"Agda.Builtin.Word.html#238","idDesc":null,"idIdent":"primWord64ToNat","idType":"Word64 → Nat"},{"idAnchor":"Agda.Builtin.Word.html#273","idDesc":null,"idIdent":"primWord64FromNat","idType":"Nat → Word64"},{"idAnchor":"Agda.Builtin.Word.html#182","idDesc":null,"idIdent":"Word64","idType":"Type"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1386","idDesc":null,"idIdent":"unique","idType":"(r : is-indexed-product C F π) (f : (i : Idx) → Hom C Y (F i)) →\n((i : Idx) → (C ∘ π i) h ≡ f i) → h ≡ r .⟨_⟩ f"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1782","idDesc":null,"idIdent":"Indexed-product","idType":"(C : Precategory o ℓ) (F : Idx → Ob C) → Type (o ⊔ ℓ ⊔ Idx.ℓ')"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1258","idDesc":null,"idIdent":"⟨_⟩","idType":"is-indexed-product C F π → ((i : Idx) → Hom C Y (F i)) → Hom C Y P"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#3047","idDesc":null,"idIdent":"lim","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁) (F : I₁ → Ob C)\n(IP : Indexed-product C F) →\nLimit (Disc-adjunct F)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#3767","idDesc":null,"idIdent":"the-ip","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) (lim : Limit F) →\nIndexed-product C (₀ F)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1939","idDesc":null,"idIdent":"has-is-ip","idType":"(r : Indexed-product C F) → is-indexed-product C F (r .π)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#4107","idDesc":null,"idIdent":"other","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) (lim : Limit F)\n(f : (i : Disc I₁ isg .Ob) → Hom C Y (₀ F i))\n(p : (i : Disc I₁ isg .Ob) → (C ∘ the-ip C isg F lim .π i) h ≡ f i)\n(i : I) →\nCone-hom F (Proj→Cone C isg F f) (lim .top)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1128","idDesc":null,"idIdent":"is-indexed-product","idType":"(C : Precategory o ℓ) (F : Idx → Ob C)\n(π : (i : Idx) → Hom C P (F i)) →\nType (o ⊔ ℓ ⊔ Idx.ℓ')"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1314","idDesc":null,"idIdent":"commute","idType":"(r : is-indexed-product C F π) → (C ∘ π i) (r .⟨_⟩ f) ≡ f i"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#2699","idDesc":null,"idIdent":"IP→Limit","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁)\n(F : I₁ → Ob C) →\nIndexed-product C F → Limit (Disc-adjunct F)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#3466","idDesc":null,"idIdent":"Proj→Cone","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) →\n((i : Disc I₁ isg .Ob) → Hom C Y (₀ F i)) → Cone F"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#2018","idDesc":null,"idIdent":"has-indexed-products","idType":"(C : Precategory o ℓ) (ℓ : Level) → Type (o ⊔ ℓ₁ ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1902","idDesc":null,"idIdent":"π","idType":"(r : Indexed-product C F) (i : Idx) → Hom C (r .ΠF) (F i)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1882","idDesc":null,"idIdent":"ΠF","idType":"Indexed-product C F → Ob C"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#2845","idDesc":null,"idIdent":"thelim","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁) (F : I₁ → Ob C)\n(IP : Indexed-product C F) →\nCone (Disc-adjunct F)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#3650","idDesc":null,"idIdent":"Limit→IP","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) →\nLimit F → Indexed-product C (₀ F)"},{"idAnchor":"Cat.Diagram.Product.Indexed.html#1509","idDesc":null,"idIdent":"eta","idType":"(r : is-indexed-product C F π) (h : Hom C Y P) →\nh ≡ ⟨ r ⟩ (λ i → (C ∘ π i) h)"},{"idAnchor":"Algebra.Semigroup.html#2829","idDesc":null,"idIdent":"Semigroup-on","idType":"Type ℓ → Type ℓ"},{"idAnchor":"Algebra.Semigroup.html#194","idDesc":null,"idIdent":"is-semigroup","idType":"(_⋆₁_ : A → A → A) → Type ℓ"},{"idAnchor":"Algebra.Semigroup.html#3503","idDesc":null,"idIdent":"Semigroup-str","idType":"Structure ℓ Semigroup-on"},{"idAnchor":"Algebra.Semigroup.html#3592","idDesc":null,"idIdent":"Semigroup-str-is-univalent","idType":"is-univalent Semigroup-str"},{"idAnchor":"Algebra.Semigroup.html#453","idDesc":null,"idIdent":"associative","idType":"is-semigroup _⋆₁_ → (x ⋆₁ (y ⋆₁ z)) ≡ ((x ⋆₁ y) ⋆₁ z)"},{"idAnchor":"Algebra.Semigroup.html#2527","idDesc":null,"idIdent":"H-Level-is-semigroup","idType":"H-Level (is-semigroup _*₁_) (suc n)"},{"idAnchor":"Algebra.Semigroup.html#3296","idDesc":null,"idIdent":"sg-desc","idType":"Str-desc ℓ ℓ (λ X → X → X → X) ℓ"},{"idAnchor":"Algebra.Semigroup.html#2199","idDesc":null,"idIdent":"is-semigroup-is-prop","idType":"is-prop (is-semigroup _⋆₁_)"},{"idAnchor":"Algebra.Semigroup.html#4363","idDesc":null,"idIdent":"Nat-min","idType":"is-semigroup min"},{"idAnchor":"Algebra.Semigroup.html#421","idDesc":null,"idIdent":"has-is-magma","idType":"is-semigroup _⋆₁_ → is-magma _⋆₁_"},{"idAnchor":"Cat.Abelian.Images.html#3176","idDesc":null,"idIdent":"factor","idType":"(A : is-abelian C) (f : Hom A A₁ B₁)\n(other : (cut f ↙ Forget-full-subcat) .Ob) →\n↓Hom (const! (cut f)) Forget-full-subcat (the-img A f) other"},{"idAnchor":"Cat.Abelian.Images.html#1482","idDesc":null,"idIdent":"images","idType":"(A : is-abelian C) (f : Hom A A₁ B₁) → Image A f"},{"idAnchor":"Cat.Abelian.Images.html#3078","idDesc":null,"idIdent":"im","idType":"(A : is-abelian C) (f : Hom A A₁ B₁) → Image A f"},{"idAnchor":"Cat.Abelian.Images.html#3733","idDesc":null,"idIdent":"path","idType":"(A : is-abelian C) (f : Hom A A₁ B₁)\n(other : (cut f ↙ Forget-full-subcat) .Ob) →\n(A ∘ other .map .map) (0m A) ≡\n(A ∘ other .map .map) (kernel A f .kernel)"},{"idAnchor":"Cat.Abelian.Images.html#5104","idDesc":null,"idIdent":"unique","idType":"(A : is-abelian C) (f : Hom A A₁ B₁)\n(other : (cut f ↙ Forget-full-subcat) .Ob)\n(x\n : ↓Hom (const! (cut f)) Forget-full-subcat (the-img A f) other) →\nfactor A f other ≡ x"},{"idAnchor":"Cat.Abelian.Images.html#1545","idDesc":null,"idIdent":"the-img","idType":"(A : is-abelian C) (f : Hom A A₁ B₁) →\n↓Obj (const! (cut f)) Forget-full-subcat"},{"idAnchor":"Cat.Functor.Reasoning.html#2455","idDesc":null,"idIdent":"insertr","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ id F → f ≡ (F ∘ (F ∘ f) (F₁ F a)) (F₁ F b)"},{"idAnchor":"Cat.Functor.Reasoning.html#1533","idDesc":null,"idIdent":"pushl","idType":"(F : Functor 𝒞 𝒟) →\nc ≡ (F ∘ a) b → (F ∘ F₁ F c) f ≡ (F ∘ F₁ F a) ((F ∘ F₁ F b) f)"},{"idAnchor":"Cat.Functor.Reasoning.html#2527","idDesc":null,"idIdent":"cancel-inner","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ id F →\n(F ∘ (F ∘ f) (F₁ F a)) ((F ∘ F₁ F b) g) ≡ (F ∘ f) g"},{"idAnchor":"Cat.Functor.Reasoning.html#2239","idDesc":null,"idIdent":"cancell","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ id F → (F ∘ F₁ F a) ((F ∘ F₁ F b) f) ≡ f"},{"idAnchor":"Cat.Functor.Reasoning.html#936","idDesc":null,"idIdent":"eliml","idType":"(F : Functor 𝒞 𝒟) → a ≡ id F → (F ∘ F₁ F a) f ≡ f"},{"idAnchor":"Cat.Functor.Reasoning.html#2750","idDesc":null,"idIdent":"⟨_⟩","idType":"(F : Functor 𝒞 𝒟) → a ≡ b → F₁ F a ≡ F₁ F b"},{"idAnchor":"Cat.Functor.Reasoning.html#1206","idDesc":null,"idIdent":"collapse","idType":"(F : Functor 𝒞 𝒟) (ab≡c : (F ∘ a) b ≡ c) →\n(F ∘ F₁ F a) (F₁ F b) ≡ F₁ F c"},{"idAnchor":"Cat.Functor.Reasoning.html#1087","idDesc":null,"idIdent":"intror","idType":"(F : Functor 𝒞 𝒟) → a ≡ id F → f ≡ (F ∘ f) (F₁ F a)"},{"idAnchor":"Cat.Functor.Reasoning.html#1973","idDesc":null,"idIdent":"extend-inner","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) c ≡ (F ∘ b) d →\n(F ∘ f) ((F ∘ F₁ F a) ((F ∘ F₁ F c) g)) ≡\n(F ∘ f) ((F ∘ F₁ F b) ((F ∘ F₁ F d) g))"},{"idAnchor":"Cat.Functor.Reasoning.html#2154","idDesc":null,"idIdent":"annihilate","idType":"(F : Functor 𝒞 𝒟) (inv₁ : (F ∘ a) b ≡ id F) →\n(F ∘ F₁ F a) (F₁ F b) ≡ id F"},{"idAnchor":"Cat.Functor.Reasoning.html#2383","idDesc":null,"idIdent":"insertl","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ id F → f ≡ (F ∘ F₁ F a) ((F ∘ F₁ F b) f)"},{"idAnchor":"Cat.Functor.Reasoning.html#1886","idDesc":null,"idIdent":"extendr","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) c ≡ (F ∘ b) d →\n(F ∘ (F ∘ f) (F₁ F a)) (F₁ F c) ≡ (F ∘ (F ∘ f) (F₁ F b)) (F₁ F d)"},{"idAnchor":"Cat.Functor.Reasoning.html#1714","idDesc":null,"idIdent":"weave","idType":"(F : Functor 𝒞 𝒟) (p : (F ∘ a) c ≡ (F ∘ b) d) →\n(F ∘ F₁ F a) (F₁ F c) ≡ (F ∘ F₁ F b) (F₁ F d)"},{"idAnchor":"Cat.Functor.Reasoning.html#1354","idDesc":null,"idIdent":"pullr","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ c → (F ∘ (F ∘ f) (F₁ F a)) (F₁ F b) ≡ (F ∘ f) (F₁ F c)"},{"idAnchor":"Cat.Functor.Reasoning.html#887","idDesc":null,"idIdent":"elim","idType":"(F : Functor 𝒞 𝒟) (a≡id : a ≡ id F) → F₁ F a ≡ id F"},{"idAnchor":"Cat.Functor.Reasoning.html#986","idDesc":null,"idIdent":"elimr","idType":"(F : Functor 𝒞 𝒟) → a ≡ id F → (F ∘ f) (F₁ F a) ≡ f"},{"idAnchor":"Cat.Functor.Reasoning.html#2311","idDesc":null,"idIdent":"cancelr","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ id F → (F ∘ (F ∘ f) (F₁ F a)) (F₁ F b) ≡ f"},{"idAnchor":"Cat.Functor.Reasoning.html#1281","idDesc":null,"idIdent":"pulll","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) b ≡ c → (F ∘ F₁ F a) ((F ∘ F₁ F b) f) ≡ (F ∘ F₁ F c) f"},{"idAnchor":"Cat.Functor.Reasoning.html#1035","idDesc":null,"idIdent":"introl","idType":"(F : Functor 𝒞 𝒟) → a ≡ id F → f ≡ (F ∘ F₁ F a) f"},{"idAnchor":"Cat.Functor.Reasoning.html#1463","idDesc":null,"idIdent":"expand","idType":"(F : Functor 𝒞 𝒟) (c≡ab : c ≡ (F ∘ a) b) →\nF₁ F c ≡ (F ∘ F₁ F a) (F₁ F b)"},{"idAnchor":"Cat.Functor.Reasoning.html#1799","idDesc":null,"idIdent":"extendl","idType":"(F : Functor 𝒞 𝒟) →\n(F ∘ a) c ≡ (F ∘ b) d →\n(F ∘ F₁ F a) ((F ∘ F₁ F c) f) ≡ (F ∘ F₁ F b) ((F ∘ F₁ F d) f)"},{"idAnchor":"Cat.Functor.Reasoning.html#1604","idDesc":null,"idIdent":"pushr","idType":"(F : Functor 𝒞 𝒟) →\nc ≡ (F ∘ a) b → (F ∘ f) (F₁ F c) ≡ (F ∘ (F ∘ f) (F₁ F a)) (F₁ F b)"},{"idAnchor":"Algebra.Group.Ab.html#10575","idDesc":null,"idIdent":"from-multilinear-map","idType":"(f : ₀ A → ₀ B₁ → ₀ C) →\n((x y : A .object .fst) (z : ₀ B₁) →\n f ((A ⋆ x) y) z ≡ (C ⋆ f x z) (f y z)) →\n((x y : B₁ .object .fst) (z : ₀ A) →\n f z ((B₁ ⋆ x) y) ≡ (C ⋆ f z x) (f z y)) →\nHom (A ⊗ B₁) C"},{"idAnchor":"Algebra.Group.Ab.html#8178","idDesc":null,"idIdent":"t-fixl","idType":"((x :, y) :+ (x :, z)) ≡ (x :, (B₁ ⋆ y) z)"},{"idAnchor":"Algebra.Group.Ab.html#8886","idDesc":null,"idIdent":"go","idType":"(A B₁ : AbGroup ℓ) →\n((x : Tensor A B₁) → is-prop (P x)) →\n((x : ₀ A) (y : ₀ B₁) → P (x :, y)) →\n(P x → P y → P (x :+ y)) →\n(P x → P (:inv x)) → P :0 → (x : Tensor A B₁) → P x"},{"idAnchor":"Algebra.Group.Ab.html#7554","idDesc":null,"idIdent":":0","idType":"Tensor A B₁"},{"idAnchor":"Algebra.Group.Ab.html#7756","idDesc":null,"idIdent":"t-idl","idType":"(:0 :+ x) ≡ x"},{"idAnchor":"Algebra.Group.Ab.html#13836","idDesc":null,"idIdent":"to′","idType":"Group-hom (Hom-group (A ⊗ B₁) C .object)\n(Hom-group A (Hom-group B₁ C) .object) to-ab-hom"},{"idAnchor":"Algebra.Group.Ab.html#11744","idDesc":null,"idIdent":"from-ab-hom","idType":"Hom A (Hom-group B₁ C) → Hom (A ⊗ B₁) C"},{"idAnchor":"Algebra.Group.Ab.html#8610","idDesc":null,"idIdent":"Tensor-elim-prop","idType":"(A B₁ : AbGroup ℓ) →\n((x : Tensor A B₁) → is-prop (P x)) →\n((x : ₀ A) (y : ₀ B₁) → P (x :, y)) →\n(P x → P y → P (x :+ y)) →\n(P x → P (:inv x)) → P :0 → (x : Tensor A B₁) → P x"},{"idAnchor":"Algebra.Group.Ab.html#14670","idDesc":null,"idIdent":"path","idType":"(f g : Hom-group A (Hom-group B₁ C) .object .fst)\n(x y : (A ⊗ B₁) .object .fst) →\n(C ⋆ (C ⋆ f′ f g .fst x) (g′ f g .fst x))\n((C ⋆ f′ f g .fst y) (g′ f g .fst y))\n≡ (C ⋆ f′ f g .fst (x :+ y)) (g′ f g .fst (x :+ y))"},{"idAnchor":"Algebra.Group.Ab.html#12755","idDesc":null,"idIdent":"invr","idType":"is-right-inverse from-ab-hom to-ab-hom"},{"idAnchor":"Algebra.Group.Ab.html#7791","idDesc":null,"idIdent":"t-assoc","idType":"((x :+ y) :+ z) ≡ (x :+ (y :+ z))"},{"idAnchor":"Algebra.Group.Ab.html#7304","idDesc":null,"idIdent":"_:,_","idType":"₀ A → ₀ B₁ → Tensor A B₁"},{"idAnchor":"Algebra.Group.Ab.html#1602","idDesc":null,"idIdent":"AbGroup","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Group.Ab.html#7930","idDesc":null,"idIdent":"t-comm","idType":"(x :+ y) ≡ (y :+ x)"},{"idAnchor":"Algebra.Group.Ab.html#1491","idDesc":null,"idIdent":"Ab","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Group.Ab.html#1950","idDesc":null,"idIdent":"₀","idType":"AbGroup ℓ → Type ℓ"},{"idAnchor":"Algebra.Group.Ab.html#5725","idDesc":null,"idIdent":"f′","idType":"(x : Ob (Ab ℓ ^op)) (y : Ob (Ab ℓ)) (x′ : Ob (Ab ℓ ^op))\n(y′ : Ob (Ab ℓ)) (fh : Hom (Ab ℓ ^op) x x′)\n(gh : Hom (Ab ℓ) y y′) →\nHom (Hom-group x y .object) (Hom-group x′ y′ .object)"},{"idAnchor":"Algebra.Group.Ab.html#2026","idDesc":null,"idIdent":"commutative","idType":"(G : AbGroup ℓ) → (G ⋆ x) y ≡ (G ⋆ y) x"},{"idAnchor":"Algebra.Group.Ab.html#7616","idDesc":null,"idIdent":":inv","idType":"Tensor A B₁ → Tensor A B₁"},{"idAnchor":"Algebra.Group.Ab.html#8245","idDesc":null,"idIdent":"t-fixr","idType":"((x :, z) :+ (y :, z)) ≡ ((A ⋆ x) y :, z)"},{"idAnchor":"Algebra.Group.Ab.html#3606","idDesc":null,"idIdent":"T","idType":"(A B₁ : AbGroup ℓ) → Type ℓ"},{"idAnchor":"Algebra.Group.Ab.html#5554","idDesc":null,"idIdent":"Ab-hom","idType":"Functor (Ab ℓ ^op ×ᶜ Ab ℓ) (Ab ℓ)"},{"idAnchor":"Algebra.Group.Ab.html#1668","idDesc":null,"idIdent":"Ab-is-category","idType":"is-category (Ab ℓ)"},{"idAnchor":"Algebra.Group.Ab.html#14643","idDesc":null,"idIdent":"g′","idType":"(f g : Hom-group A (Hom-group B₁ C) .object .fst) → Hom (A ⊗ B₁) C"},{"idAnchor":"Algebra.Group.Ab.html#5244","idDesc":null,"idIdent":"abel","idType":"(A B₁ : AbGroup ℓ) → is-abelian-group (T A B₁ , grp A B₁)"},{"idAnchor":"Algebra.Group.Ab.html#3709","idDesc":null,"idIdent":"zero-map","idType":"(A B₁ : AbGroup ℓ) → T A B₁"},{"idAnchor":"Algebra.Group.Ab.html#4911","idDesc":null,"idIdent":"grp","idType":"(A B₁ : AbGroup ℓ) → Group-on (T A B₁)"},{"idAnchor":"Algebra.Group.Ab.html#7576","idDesc":null,"idIdent":"_:+_","idType":"Tensor A B₁ → Tensor A B₁ → Tensor A B₁"},{"idAnchor":"Algebra.Group.Ab.html#12614","idDesc":null,"idIdent":"tensor⊣hom","idType":"Hom (A ⊗ B₁) C ≃ Hom A (Hom-group B₁ C)"},{"idAnchor":"Algebra.Group.Ab.html#3543","idDesc":null,"idIdent":"Hom-group","idType":"(A B₁ : AbGroup ℓ) → AbGroup ℓ"},{"idAnchor":"Algebra.Group.Ab.html#14015","idDesc":null,"idIdent":"from′","idType":"Group-hom (Hom-group A (Hom-group B₁ C) .object)\n(Hom-group (A ⊗ B₁) C .object) from-ab-hom"},{"idAnchor":"Algebra.Group.Ab.html#4644","idDesc":null,"idIdent":"inv-map","idType":"(A B₁ : AbGroup ℓ) → T A B₁ → T A B₁"},{"idAnchor":"Algebra.Group.Ab.html#14616","idDesc":null,"idIdent":"f′","idType":"(f g : Hom-group A (Hom-group B₁ C) .object .fst) → Hom (A ⊗ B₁) C"},{"idAnchor":"Algebra.Group.Ab.html#12087","idDesc":null,"idIdent":"go","idType":"(map₁ : Hom (A ⊗ B₁) C) → Hom A (Hom-group B₁ C)"},{"idAnchor":"Algebra.Group.Ab.html#7716","idDesc":null,"idIdent":"t-invr","idType":"(x :+ :inv x) ≡ :0"},{"idAnchor":"Algebra.Group.Ab.html#12877","idDesc":null,"idIdent":"invl","idType":"is-left-inverse from-ab-hom to-ab-hom"},{"idAnchor":"Algebra.Group.Ab.html#12000","idDesc":null,"idIdent":"to-ab-hom","idType":"Hom (A ⊗ B₁) C → Hom A (Hom-group B₁ C)"},{"idAnchor":"Algebra.Group.Ab.html#1837","idDesc":null,"idIdent":"Ab→Grp","idType":"Functor (Ab ℓ) (Groups ℓ)"},{"idAnchor":"Algebra.Group.Ab.html#10832","idDesc":null,"idIdent":"go","idType":"(f : ₀ A → ₀ B₁ → ₀ C)\n(fixr\n : (x y : A .object .fst) (z : ₀ B₁) →\n   f ((A ⋆ x) y) z ≡ (C ⋆ f x z) (f y z))\n(fixl\n : (x y : B₁ .object .fst) (z : ₀ A) →\n   f z ((B₁ ⋆ x) y) ≡ (C ⋆ f z x) (f z y)) →\nTensor A B₁ → ₀ C"},{"idAnchor":"Algebra.Group.Ab.html#13353","idDesc":null,"idIdent":"Tensor⊣Hom","idType":"Hom-group (A ⊗ B₁) C ≡ Hom-group A (Hom-group B₁ C)"},{"idAnchor":"Algebra.Group.Ab.html#8396","idDesc":null,"idIdent":"_⊗_","idType":"(A B₁ : AbGroup ℓ) → AbGroup ℓ"},{"idAnchor":"Algebra.Group.Ab.html#3809","idDesc":null,"idIdent":"add-map","idType":"(A B₁ : AbGroup ℓ) → T A B₁ → T A B₁ → T A B₁"},{"idAnchor":"Algebra.Group.Ab.html#7647","idDesc":null,"idIdent":"t-squash","idType":"is-set (Tensor A B₁)"},{"idAnchor":"Algebra.Group.Ab.html#7278","idDesc":null,"idIdent":"Tensor","idType":"(A B₁ : AbGroup ℓ) → Type ℓ"},{"idAnchor":"Algebra.Group.Ab.html#7676","idDesc":null,"idIdent":"t-invl","idType":"(:inv x :+ x) ≡ :0"},{"idAnchor":"Cat.Abelian.Functors.html#978","idDesc":null,"idIdent":"Ab-functor","idType":"(A : Ab-category C) (B₁ : Ab-category D) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Abelian.Functors.html#1036","idDesc":null,"idIdent":"functor","idType":"Ab-functor A B₁ → Functor C D"},{"idAnchor":"Cat.Abelian.Functors.html#1524","idDesc":null,"idIdent":"F-0m","idType":"(r : Ab-functor A B₁) → F₁ r (0m A) ≡ 0m B₁"},{"idAnchor":"Cat.Abelian.Functors.html#2174","idDesc":null,"idIdent":"Ab-functor-pres-∅","idType":"(F : Ab-functor A B₁) (∅A : Zero C) → is-zero D (F₀ F (∅ ∅A))"},{"idAnchor":"Cat.Abelian.Functors.html#1604","idDesc":null,"idIdent":"F-diff","idType":"(r : Ab-functor A B₁) (f g : Hom A a b) →\nF₁ r ((A - f) g) ≡ (B₁ - F₁ r f) (F₁ r g)"},{"idAnchor":"Cat.Abelian.Functors.html#1406","idDesc":null,"idIdent":"F-hom","idType":"(r : Ab-functor A B₁) →\nGroup-hom (Hom-grp A a b .object)\n(Hom-grp B₁ (functor r .F₀ a) (functor r .F₀ b) .object) (F₁ r)"},{"idAnchor":"Cat.Abelian.Functors.html#1718","idDesc":null,"idIdent":"F-inv","idType":"(r : Ab-functor A B₁) (f : Hom A a b) →\nF₁ r ((A ⁻¹) f) ≡ (B₁ ⁻¹) (F₁ r f)"},{"idAnchor":"Cat.Abelian.Functors.html#1108","idDesc":null,"idIdent":"F-+","idType":"(r : Ab-functor A B₁) (f g : Hom A a b) →\nF₁ (r .functor) ((A + f) g) ≡\n(B₁ + F₁ (r .functor) f) (F₁ (r .functor) g)"},{"idAnchor":"Cat.Functor.Bifunctor.html#849","idDesc":null,"idIdent":"second","idType":"(F : Functor (C ×ᶜ D) E) →\nD .Hom a b → E .Hom (F₀ F (x , a)) (F₀ F (x , b))"},{"idAnchor":"Cat.Functor.Bifunctor.html#1525","idDesc":null,"idIdent":"second∘second","idType":"(F : Functor (C ×ᶜ D) E) →\nsecond F (D ._∘_ f g) ≡ E ._∘_ (second F f) (second F g)"},{"idAnchor":"Cat.Functor.Bifunctor.html#758","idDesc":null,"idIdent":"first","idType":"(F : Functor (C ×ᶜ D) E) →\nC .Hom a b → E .Hom (F₀ F (a , x)) (F₀ F (b , x))"},{"idAnchor":"Cat.Functor.Bifunctor.html#1116","idDesc":null,"idIdent":"second-id","idType":"(F : Functor (C ×ᶜ D) E) → second F (D .id) ≡ E .id"},{"idAnchor":"Cat.Functor.Bifunctor.html#1045","idDesc":null,"idIdent":"first-id","idType":"(F : Functor (C ×ᶜ D) E) → first F (C .id) ≡ E .id"},{"idAnchor":"Cat.Functor.Bifunctor.html#2738","idDesc":null,"idIdent":"Flip","idType":"(F : Functor (C ×ᶜ D) E) → Functor (D ×ᶜ C) E"},{"idAnchor":"Cat.Functor.Bifunctor.html#1871","idDesc":null,"idIdent":"first∘second","idType":"(F : Functor (C ×ᶜ D) E) →\nE ._∘_ (first F f) (second F g) ≡ E ._∘_ (second F g) (first F f)"},{"idAnchor":"Cat.Functor.Bifunctor.html#2568","idDesc":null,"idIdent":"Right","idType":"(F : Functor (C ×ᶜ D) E) → C .Ob → Functor D E"},{"idAnchor":"Cat.Functor.Bifunctor.html#1190","idDesc":null,"idIdent":"first∘first","idType":"(F : Functor (C ×ᶜ D) E) →\nfirst F (C ._∘_ f g) ≡ E ._∘_ (first F f) (first F g)"},{"idAnchor":"Cat.Functor.Bifunctor.html#2397","idDesc":null,"idIdent":"Left","idType":"(F : Functor (C ×ᶜ D) E) → D .Ob → Functor C E"},{"idAnchor":"Cat.Bi.Base.html#16400","idDesc":null,"idIdent":"Pseudofunctor","idType":"(B₁ : Prebicategory o ℓ ℓ′) (C : Prebicategory o₁ ℓ₁ ℓ₁′) →\nType (o ⊔ ℓ ⊔ ℓ′ ⊔ o₁ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#14493","idDesc":null,"idIdent":"₁","idType":"(r : Lax-functor B₁ C) → (B₁ ↦ a) b → (C ↦ P₀ r a) (P₀ r b)"},{"idAnchor":"Cat.Bi.Base.html#6213","idDesc":null,"idIdent":"unitor-r","idType":"(r : Prebicategory o ℓ ℓ′) →\n(Cat[ r .Hom A B₁ , r .Hom A B₁ ] ≅ Id) (Left (r .compose) (r .id))"},{"idAnchor":"Cat.Bi.Base.html#14353","idDesc":null,"idIdent":"unitor","idType":"(r : Lax-functor B₁ C) → Id => r .P₁ F∘ Const (B₁ .id)"},{"idAnchor":"Cat.Bi.Base.html#16956","idDesc":null,"idIdent":"υ←","idType":"(r : Pseudofunctor B₁ C) → (C ⇒ ₁ r (B₁ .id)) (C .id)"},{"idAnchor":"Cat.Bi.Base.html#19192","idDesc":null,"idIdent":"ν-unitor","idType":"(r : Lax-transfor F G) →\n(C ⊗ r .naturator .η (B₁ .id)) ((C ◀ υ→ G) (r .σ a)) ≡\n(C ⊗ (C ▶ r .σ a) (υ→ F)) ((C ⊗ ρ→ C (r .σ a)) (λ← C (r .σ a)))"},{"idAnchor":"Cat.Bi.Base.html#19640","idDesc":null,"idIdent":"ν←","idType":"(r : Pseudonatural F G) (f : (B₁ ↦ a) b) →\n(C ⇒ (C ∘ σ r b) (₁ F f)) ((C ∘ ₁ G f) (σ r a))"},{"idAnchor":"Cat.Bi.Base.html#7085","idDesc":null,"idIdent":"α←","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ C) D) (g : (r ↦ B₁) C)\n(h : (r ↦ A) B₁) →\n(r ⇒ (r ∘ f) ((r ∘ g) h)) ((r ∘ (r ∘ f) g) h)"},{"idAnchor":"Cat.Bi.Base.html#19884","idDesc":null,"idIdent":"_=>ₗ_","idType":"(F G : Lax-functor B₁ C) → Type (o ⊔ ℓ ⊔ ℓ′ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#16669","idDesc":null,"idIdent":"unitor-inv","idType":"(r : Pseudofunctor B₁ C) → is-invertible C (υ→ r)"},{"idAnchor":"Cat.Bi.Base.html#21041","idDesc":null,"idIdent":"is-natural","idType":"(r : Modification σ σ′) →\n(C ⊗ ν→ σ′ f) ((C ▶ ₁ G f) (r .Γ a)) ≡\n(C ⊗ (C ◀ r .Γ b) (₁ F f)) (ν→ σ f)"},{"idAnchor":"Cat.Bi.Base.html#19431","idDesc":null,"idIdent":"Pseudonatural","idType":"(F G : Lax-functor B₁ C) → Type (o ⊔ ℓ ⊔ ℓ′ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#18403","idDesc":null,"idIdent":"σ","idType":"Lax-transfor F G → (A : B₁ .Ob) → (C ↦ ₀ F A) (₀ G A)"},{"idAnchor":"Cat.Bi.Base.html#19568","idDesc":null,"idIdent":"naturator-inv","idType":"(r : Pseudonatural F G) (f : (B₁ ↦ a) b) → is-invertible C (ν→ r f)"},{"idAnchor":"Cat.Bi.Base.html#5517","idDesc":null,"idIdent":"_◀_","idType":"(r : Prebicategory o ℓ ℓ′) →\n(r ⇒ a) b → (f : (r ↦ A) B₁) → (r ⇒ (r ∘ a) f) ((r ∘ b) f)"},{"idAnchor":"Cat.Bi.Base.html#13921","idDesc":null,"idIdent":"P₀","idType":"Lax-functor B₁ C → B₁ .Ob → Ob C"},{"idAnchor":"Cat.Bi.Base.html#6131","idDesc":null,"idIdent":"unitor-l","idType":"(r : Prebicategory o ℓ ℓ′) →\n(Cat[ r .Hom A B₁ , r .Hom A B₁ ] ≅ Id)\n(Right (r .compose) (r .id))"},{"idAnchor":"Cat.Bi.Base.html#8110","idDesc":null,"idIdent":"pentagon","idType":"(r : Prebicategory o ℓ ℓ′) (f : Ob (r .Hom D E))\n(g : Ob (r .Hom C D)) (h : Ob (r .Hom B₁ C))\n(i : Ob (r .Hom A B₁)) →\nr .Hom A E ._∘_\n(r .compose .F₁\n (r .associator .from .η (f , g , h) , r .Hom A B₁ .id))\n(r .Hom A E ._∘_\n (r .associator .from .η (f , r .compose .F₀ (g , h) , i))\n (r .compose .F₁\n  (r .Hom D E .id , r .associator .from .η (g , h , i))))\n≡\nr .Hom A E ._∘_\n(r .associator .from .η (r .compose .F₀ (f , g) , h , i))\n(r .associator .from .η (f , g , r .compose .F₀ (h , i)))"},{"idAnchor":"Cat.Bi.Base.html#19498","idDesc":null,"idIdent":"lax","idType":"Pseudonatural F G → Lax-transfor F G"},{"idAnchor":"Cat.Bi.Base.html#9987","idDesc":null,"idIdent":"pb","idType":"(o ℓ : Level) →\nPrebicategory (lsuc o ⊔ lsuc ℓ) (o ⊔ o ⊔ ℓ ⊔ ℓ) (o ⊔ ℓ ⊔ ℓ)"},{"idAnchor":"Cat.Bi.Base.html#3657","idDesc":null,"idIdent":"compose","idType":"(r : Prebicategory o ℓ ℓ′) →\nFunctor (r .Hom B₁ C ×ᶜ r .Hom A B₁) (r .Hom A C)"},{"idAnchor":"Cat.Bi.Base.html#9079","idDesc":null,"idIdent":"preaction","idType":"(B₁ : Prebicategory o ℓ ℓ′) →\n(B₁ ↦ a) b → Functor (Hom B₁ b c) (Hom B₁ a c)"},{"idAnchor":"Cat.Bi.Base.html#3018","idDesc":null,"idIdent":"Prebicategory","idType":"(o ℓ ℓ′ : Level) → Type (lsuc o ⊔ lsuc ℓ ⊔ lsuc ℓ′)"},{"idAnchor":"Cat.Bi.Base.html#3119","idDesc":null,"idIdent":"Hom","idType":"(r : Prebicategory o ℓ ℓ′) → r .Ob → r .Ob → Precategory ℓ ℓ′"},{"idAnchor":"Cat.Bi.Base.html#15920","idDesc":null,"idIdent":"left-unit","idType":"(r : Lax-functor B₁ C) (f : (B₁ ↦ a) b) →\n(C ⊗ r .P₁ .F₁ (λ← B₁ f))\n((C ⊗ r .compositor .η (B₁ .id , f))\n ((C ◀ r .unitor .η (id C)) (r .P₁ .F₀ f)))\n≡ λ← C (r .P₁ .F₀ f)"},{"idAnchor":"Cat.Bi.Base.html#21007","idDesc":null,"idIdent":"Γ","idType":"Modification σ σ′ → (a : B₁ .Ob) → (C ⇒ σ .σ a) (σ σ′ a)"},{"idAnchor":"Cat.Bi.Base.html#8735","idDesc":null,"idIdent":"postaction","idType":"(B₁ : Prebicategory o ℓ ℓ′) →\n(B₁ ↦ a) b → Functor (Hom B₁ c a) (Hom B₁ c b)"},{"idAnchor":"Cat.Bi.Base.html#15811","idDesc":null,"idIdent":"right-unit","idType":"(r : Lax-functor B₁ C) (f : (B₁ ↦ a) b) →\n(C ⊗ r .P₁ .F₁ (ρ← B₁ f))\n((C ⊗ r .compositor .η (f , B₁ .id))\n ((C ▶ r .P₁ .F₀ f) (r .unitor .η (id C))))\n≡ ρ← C (r .P₁ .F₀ f)"},{"idAnchor":"Cat.Bi.Base.html#341","idDesc":null,"idIdent":"compose-assocˡ","idType":"Functor (H B₁ C ×ᶜ H A B₁) (H A C) →\nFunctor (H C D ×ᶜ H B₁ C ×ᶜ H A B₁) (H A D)"},{"idAnchor":"Cat.Bi.Base.html#16824","idDesc":null,"idIdent":"γ←","idType":"(r : Pseudofunctor B₁ C) (f : (B₁ ↦ b) c) (g : (B₁ ↦ a) b) →\n(C ⇒ ₁ r ((B₁ ∘ f) g)) ((C ∘ ₁ r f) (₁ r g))"},{"idAnchor":"Cat.Bi.Base.html#14613","idDesc":null,"idIdent":"γ→","idType":"(r : Lax-functor B₁ C) (f : (B₁ ↦ b) c) (g : (B₁ ↦ a) b) →\n(C ⇒ (C ∘ ₁ r f) (₁ r g)) (₁ r ((B₁ ∘ f) g))"},{"idAnchor":"Cat.Bi.Base.html#18337","idDesc":null,"idIdent":"Lax-transfor","idType":"(F G : Lax-functor B₁ C) → Type (o ⊔ ℓ ⊔ ℓ′ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#6731","idDesc":null,"idIdent":"λ→","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ A) B₁) →\n(r ⇒ f) ((r ∘ id r) f)"},{"idAnchor":"Cat.Bi.Base.html#18435","idDesc":null,"idIdent":"naturator","idType":"(r : Lax-transfor F G) →\npreaction C (r .σ b) F∘ P₁ G => postaction C (r .σ a) F∘ F .P₁"},{"idAnchor":"Cat.Bi.Base.html#18534","idDesc":null,"idIdent":"ν→","idType":"(r : Lax-transfor F G) (f : (B₁ ↦ a) b) →\n(C ⇒ (C ∘ ₁ G f) (σ r a)) ((C ∘ σ r b) (₁ F f))"},{"idAnchor":"Cat.Bi.Base.html#14234","idDesc":null,"idIdent":"compositor","idType":"(r : Lax-functor B₁ C) →\ncompose C F∘ Cat⟨ r .P₁ F∘ Fst , r .P₁ F∘ Snd ⟩ =>\nr .P₁ F∘ B₁ .compose"},{"idAnchor":"Cat.Bi.Base.html#15602","idDesc":null,"idIdent":"hexagon","idType":"(r : Lax-functor B₁ C) (f : (B₁ ↦ c) d) (g : (B₁ ↦ b) c)\n(h : (B₁ ↦ a) b) →\n(C ⊗ r .P₁ .F₁ (α→ B₁ f g h))\n((C ⊗ r .compositor .η ((B₁ ∘ f) g , h))\n ((C ◀ r .compositor .η (f , g)) (r .P₁ .F₀ h)))\n≡\n(C ⊗ r .compositor .η (f , (B₁ ∘ g) h))\n((C ⊗ (C ▶ r .P₁ .F₀ f) (r .compositor .η (g , h)))\n (α→ C (r .P₁ .F₀ f) (r .P₁ .F₀ g) (r .P₁ .F₀ h)))"},{"idAnchor":"Cat.Bi.Base.html#6658","idDesc":null,"idIdent":"λ←","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ A) B₁) → (r ⇒ (r ∘ id r) f) f"},{"idAnchor":"Cat.Bi.Base.html#3102","idDesc":null,"idIdent":"Ob","idType":"Prebicategory o ℓ ℓ′ → Type o"},{"idAnchor":"Cat.Bi.Base.html#13942","idDesc":null,"idIdent":"P₁","idType":"(r : Lax-functor B₁ C) →\nFunctor (B₁ .Hom A B₁) (Hom C (r .P₀ A) (r .P₀ B₁))"},{"idAnchor":"Cat.Bi.Base.html#9867","idDesc":null,"idIdent":"Cat","idType":"(o ℓ : Level) → Prebicategory (lsuc o ⊔ lsuc ℓ) (o ⊔ ℓ) (o ⊔ ℓ)"},{"idAnchor":"Cat.Bi.Base.html#16603","idDesc":null,"idIdent":"lax","idType":"Pseudofunctor B₁ C → Lax-functor B₁ C"},{"idAnchor":"Cat.Bi.Base.html#14546","idDesc":null,"idIdent":"₂","idType":"(r : Lax-functor B₁ C) → (B₁ ⇒ f) g → (C ⇒ ₁ r f) (₁ r g)"},{"idAnchor":"Cat.Bi.Base.html#14465","idDesc":null,"idIdent":"₀","idType":"(r : Lax-functor B₁ C) → B₁ .Ob → C .Ob"},{"idAnchor":"Cat.Bi.Base.html#13720","idDesc":null,"idIdent":"Lax-functor","idType":"(B₁ : Prebicategory o ℓ ℓ′) (C : Prebicategory o₁ ℓ₁ ℓ₁′) →\nType (o ⊔ ℓ ⊔ ℓ′ ⊔ o₁ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#824","idDesc":null,"idIdent":"compose-assocʳ","idType":"Functor (H B₁ C ×ᶜ H A B₁) (H A C) →\nFunctor (H C D ×ᶜ H B₁ C ×ᶜ H A B₁) (H A D)"},{"idAnchor":"Cat.Bi.Base.html#6802","idDesc":null,"idIdent":"ρ←","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ A) B₁) →\n(r ⇒ (r ∘ f) (id r)) f"},{"idAnchor":"Cat.Bi.Base.html#4752","idDesc":null,"idIdent":"_↦_","idType":"(r : Prebicategory o ℓ ℓ′) → Ob r → Ob r → Type ℓ"},{"idAnchor":"Cat.Bi.Base.html#19907","idDesc":null,"idIdent":"_=>ₚ_","idType":"(F G : Lax-functor B₁ C) → Type (o ⊔ ℓ ⊔ ℓ′ ⊔ ℓ₁ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#8012","idDesc":null,"idIdent":"triangle","idType":"(r : Prebicategory o ℓ ℓ′) (f : Ob (r .Hom B₁ C))\n(g : Ob (r .Hom A B₁)) →\nr .Hom A C ._∘_\n(r .compose .F₁ (r .unitor-r .from .η f , r .Hom A B₁ .id))\n(r .associator .from .η (f , r .id , g))\n≡ r .compose .F₁ (r .Hom B₁ C .id , r .unitor-l .from .η g)"},{"idAnchor":"Cat.Bi.Base.html#4813","idDesc":null,"idIdent":"_⇒_","idType":"(r : Prebicategory o ℓ ℓ′) → (r ↦ A) B₁ → (r ↦ A) B₁ → Type ℓ′"},{"idAnchor":"Cat.Bi.Base.html#16729","idDesc":null,"idIdent":"compositor-inv","idType":"(r : Pseudofunctor B₁ C) (f : (B₁ ↦ b) c) (g : (B₁ ↦ a) b) →\nis-invertible C (γ→ r f g)"},{"idAnchor":"Cat.Bi.Base.html#6946","idDesc":null,"idIdent":"α→","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ C) D) (g : (r ↦ B₁) C)\n(h : (r ↦ A) B₁) →\n(r ⇒ (r ∘ (r ∘ f) g) h) ((r ∘ f) ((r ∘ g) h))"},{"idAnchor":"Cat.Bi.Base.html#5148","idDesc":null,"idIdent":"_◆_","idType":"(r : Prebicategory o ℓ ℓ′) →\n(r ⇒ f₁) f₂ → (r ⇒ g₁) g₂ → (r ⇒ (r ∘ f₁) g₁) ((r ∘ f₂) g₂)"},{"idAnchor":"Cat.Bi.Base.html#6295","idDesc":null,"idIdent":"associator","idType":"(r : Prebicategory o ℓ ℓ′) →\n(Cat[ r .Hom C D ×ᶜ r .Hom B₁ C ×ᶜ r .Hom A B₁ , r .Hom A D ] ≅\n compose-assocˡ (r .compose))\n(compose-assocʳ (r .compose))"},{"idAnchor":"Cat.Bi.Base.html#14727","idDesc":null,"idIdent":"υ→","idType":"(r : Lax-functor B₁ C) → (C ⇒ C .id) (₁ r (B₁ .id))"},{"idAnchor":"Cat.Bi.Base.html#20951","idDesc":null,"idIdent":"Modification","idType":"(σ σ′ : F =>ₗ G) → Type (o ⊔ ℓ ⊔ ℓ₁′)"},{"idAnchor":"Cat.Bi.Base.html#5359","idDesc":null,"idIdent":"_▶_","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ B₁) C) →\n(r ⇒ a) b → (r ⇒ (r ∘ f) a) ((r ∘ f) b)"},{"idAnchor":"Cat.Bi.Base.html#18872","idDesc":null,"idIdent":"ν-compositor","idType":"(r : Lax-transfor F G) (f : (B₁ ↦ b) c) (g : (B₁ ↦ a) b) →\n(C ⊗ r .naturator .η ((B₁ ∘ f) g)) ((C ◀ γ→ G f g) (r .σ a)) ≡\n(C ⊗ (C ▶ r .σ c) (γ→ F f g))\n((C ⊗ α→ C (r .σ c) (₁ F f) (₁ F g))\n ((C ⊗ (C ◀ r .naturator .η f) (₁ F g))\n  ((C ⊗ α← C (₁ G f) (r .σ b) (₁ F g))\n   ((C ⊗ (C ▶ ₁ G f) (r .naturator .η g))\n    (α→ C (₁ G f) (₁ G g) (r .σ a))))))"},{"idAnchor":"Cat.Bi.Base.html#6875","idDesc":null,"idIdent":"ρ→","idType":"(r : Prebicategory o ℓ ℓ′) (f : (r ↦ A) B₁) →\n(r ⇒ f) ((r ∘ f) (id r))"},{"idAnchor":"Cat.Bi.Base.html#4910","idDesc":null,"idIdent":"_∘_","idType":"(r : Prebicategory o ℓ ℓ′) → (r ↦ B₁) C → (r ↦ A) B₁ → (r ↦ A) C"},{"idAnchor":"Cat.Bi.Base.html#3610","idDesc":null,"idIdent":"id","idType":"(r : Prebicategory o ℓ ℓ′) → Ob (r .Hom A A)"},{"idAnchor":"Cat.Bi.Base.html#5032","idDesc":null,"idIdent":"_⊗_","idType":"(r : Prebicategory o ℓ ℓ′) → (r ⇒ g) h → (r ⇒ f) g → (r ⇒ f) h"},{"idAnchor":"1Lab.Type.Prop.html#1564","idDesc":null,"idIdent":"prop-ua","idType":"(∣ A ∣ → ∣ B₁ ∣) × (∣ B₁ ∣ → ∣ A ∣) → A ≡ B₁"},{"idAnchor":"1Lab.Type.Prop.html#1185","idDesc":null,"idIdent":"is-tr","idType":"(r : Prop*) → is-prop (r .∣_∣)"},{"idAnchor":"1Lab.Type.Prop.html#1849","idDesc":null,"idIdent":"eqv","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i : I) → is-equiv g"},{"idAnchor":"1Lab.Type.Prop.html#1153","idDesc":null,"idIdent":"ℓ","idType":"Prop* → Level"},{"idAnchor":"1Lab.Type.Prop.html#2474","idDesc":null,"idIdent":"trs","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i i₁ : I) →\nSub (is-prop (path-of-types f g i i₁)) (i₁ ∨ ~ i₁)\n(λ { (i₁ = i0) → A .is-tr ; (i₁ = i1) → B₁ .is-tr })"},{"idAnchor":"1Lab.Type.Prop.html#2605","idDesc":null,"idIdent":"prop","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i : I) → Prop*"},{"idAnchor":"1Lab.Type.Prop.html#3277","idDesc":null,"idIdent":"prop-ua-id-equiv","idType":"prop-ua (transport refl , transport refl) ≡ refl"},{"idAnchor":"1Lab.Type.Prop.html#2178","idDesc":null,"idIdent":".extendedlambda0","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i : I) (i₁ : I) →\n.(IsOne (~ i₁ ∨ i₁)) → Σ (λ T → T ≃ ∣ A ∣)"},{"idAnchor":"1Lab.Type.Prop.html#2538","idDesc":null,"idIdent":".extendedlambda1","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i i₁ : I) →\n.(IsOne (i₁ ∨ ~ i₁)) → is-prop (path-of-types f g i i₁)"},{"idAnchor":"1Lab.Type.Prop.html#2840","idDesc":null,"idIdent":"inverse","idType":"A ≡ B₁ → (∣ A ∣ → ∣ B₁ ∣) × (∣ B₁ ∣ → ∣ A ∣)"},{"idAnchor":"1Lab.Type.Prop.html#3360","idDesc":null,"idIdent":"isl","idType":"is-left-inverse inverse prop-ua"},{"idAnchor":"1Lab.Type.Prop.html#2977","idDesc":null,"idIdent":"isr","idType":"is-right-inverse inverse prop-ua"},{"idAnchor":"1Lab.Type.Prop.html#1168","idDesc":null,"idIdent":"∣_∣","idType":"(r : Prop*) → Type (r .ℓ)"},{"idAnchor":"1Lab.Type.Prop.html#2105","idDesc":null,"idIdent":"path-of-types","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i i₁ : I) →\nType (levels f g i i₁)"},{"idAnchor":"1Lab.Type.Prop.html#2711","idDesc":null,"idIdent":"prop-ua-is-equiv","idType":"is-equiv prop-ua"},{"idAnchor":"1Lab.Type.Prop.html#1800","idDesc":null,"idIdent":"levels","idType":"(f : ∣ A ∣ → ∣ B₁ ∣) (g : ∣ B₁ ∣ → ∣ A ∣) (i : I) →\nPath Level (A .ℓ) (B₁ .ℓ)"},{"idAnchor":"1Lab.Type.Prop.html#1121","idDesc":null,"idIdent":"Prop*","idType":"Type"},{"idAnchor":"Data.Fin.Closure.html#1237","idDesc":null,"idIdent":"f","idType":"Fin (suc n) → ⊤ ⊎ Fin n"},{"idAnchor":"Data.Fin.Closure.html#2400","idDesc":null,"idIdent":"sum","idType":"(n : Nat) → (Fin n → Nat) → Nat"},{"idAnchor":"Data.Fin.Closure.html#3959","idDesc":null,"idIdent":"sum≡*","idType":"(n m : Nat) → sum n (λ _ → m) ≡ n * m"},{"idAnchor":"Data.Fin.Closure.html#1654","idDesc":null,"idIdent":"Finite-coproduct","idType":"(Fin n ⊎ Fin m) ≃ Fin (n + m)"},{"idAnchor":"Data.Fin.Closure.html#807","idDesc":null,"idIdent":"Finite-zero-is-initial","idType":"Fin 0 ≃ ⊥"},{"idAnchor":"Data.Fin.Closure.html#2817","idDesc":null,"idIdent":"rec","idType":"(n : Nat) (B₁ : Fin (suc n) → Nat) →\nΣ (Fin ⊙ B₁ ⊙ fsuc) ≃ Fin (sum n (B₁ ⊙ fsuc))"},{"idAnchor":"Data.Fin.Closure.html#1129","idDesc":null,"idIdent":"Finite-successor","idType":"Fin (suc n) ≃ (⊤ ⊎ Fin n)"},{"idAnchor":"Data.Fin.Closure.html#1308","idDesc":null,"idIdent":"g","idType":"⊤ ⊎ Fin n → Fin (suc n)"},{"idAnchor":"Data.Fin.Closure.html#913","idDesc":null,"idIdent":"Finite-one-is-contr","idType":"is-contr (Fin 1)"},{"idAnchor":"Data.Fin.Closure.html#2852","idDesc":null,"idIdent":"f","idType":"(n : Nat) (B₁ : Fin (suc n) → Nat) →\nΣ (Fin ⊙ B₁) → Fin (B₁ fzero) ⊎ Fin (sum n (B₁ ⊙ fsuc))"},{"idAnchor":"Data.Fin.Closure.html#1455","idDesc":null,"idIdent":"linv","idType":"is-left-inverse g f"},{"idAnchor":"Data.Fin.Closure.html#2990","idDesc":null,"idIdent":"f-iso","idType":"(n : Nat) (B₁ : Fin (suc n) → Nat) → is-iso (f n B₁)"},{"idAnchor":"Data.Fin.Closure.html#3734","idDesc":null,"idIdent":"Finite-product","idType":"(Fin n × Fin m) ≃ Fin (n * m)"},{"idAnchor":"Data.Fin.Closure.html#2562","idDesc":null,"idIdent":"Finite-sum","idType":"(B₁ : Fin n → Nat) → Σ (Fin ⊙ B₁) ≃ Fin (sum n B₁)"},{"idAnchor":"Data.Fin.Closure.html#1380","idDesc":null,"idIdent":"rinv","idType":"is-right-inverse g f"},{"idAnchor":"Cat.Diagram.Equaliser.html#1865","idDesc":null,"idIdent":"equ","idType":"(r : Equaliser C f g) → Hom C (r .apex) A"},{"idAnchor":"Cat.Diagram.Equaliser.html#1788","idDesc":null,"idIdent":"Equaliser","idType":"(C : Precategory ℓ ℓ′) (f g : Hom C A B₁) → Type (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Equaliser.html#1890","idDesc":null,"idIdent":"has-is-eq","idType":"(r : Equaliser C f g) → is-equaliser C f g (r .equ)"},{"idAnchor":"Cat.Diagram.Equaliser.html#790","idDesc":null,"idIdent":"universal","idType":"(r : is-equaliser C f g equ) → (C ∘ equ) (r .limiting p) ≡ e′"},{"idAnchor":"Cat.Diagram.Equaliser.html#2117","idDesc":null,"idIdent":"is-equaliser→is-monic","idType":"(C : Precategory ℓ ℓ′) (equ : Hom C E A) →\nis-equaliser C f g equ → is-monic C equ"},{"idAnchor":"Cat.Diagram.Equaliser.html#1001","idDesc":null,"idIdent":"equal-∘","idType":"is-equaliser C f g equ →\n(C ∘ f) ((C ∘ equ) h) ≡ (C ∘ g) ((C ∘ equ) h)"},{"idAnchor":"Cat.Diagram.Equaliser.html#687","idDesc":null,"idIdent":"equal","idType":"is-equaliser C f g equ → (C ∘ f) equ ≡ (C ∘ g) equ"},{"idAnchor":"Cat.Diagram.Equaliser.html#1113","idDesc":null,"idIdent":"unique₂","idType":"is-equaliser C f g equ →\ne′ ≡ (C ∘ equ) lim' → e′ ≡ (C ∘ equ) lim'' → lim' ≡ lim''"},{"idAnchor":"Cat.Diagram.Equaliser.html#604","idDesc":null,"idIdent":"is-equaliser","idType":"(C : Precategory ℓ ℓ′) (f g : Hom C A B₁) (equ : Hom C E A) →\nType (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Equaliser.html#721","idDesc":null,"idIdent":"limiting","idType":"is-equaliser C f g equ → (C ∘ f) e′ ≡ (C ∘ g) e′ → Hom C F E"},{"idAnchor":"Cat.Diagram.Equaliser.html#873","idDesc":null,"idIdent":"unique","idType":"(r : is-equaliser C f g equ) →\ne′ ≡ (C ∘ equ) lim' → lim' ≡ r .limiting p"},{"idAnchor":"Cat.Diagram.Equaliser.html#1849","idDesc":null,"idIdent":"apex","idType":"Equaliser C f g → Ob C"},{"idAnchor":"Cat.Diagram.Coequaliser.html#764","idDesc":null,"idIdent":"coequalise","idType":"is-coequaliser C f g coeq → (C ∘ e′) f ≡ (C ∘ e′) g → Hom C E F"},{"idAnchor":"Cat.Diagram.Coequaliser.html#727","idDesc":null,"idIdent":"coequal","idType":"is-coequaliser C f g coeq → (C ∘ coeq) f ≡ (C ∘ coeq) g"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1604","idDesc":null,"idIdent":"has-is-coeq","idType":"(r : Coequaliser C f g) → is-coequaliser C f g (r .coeq)"},{"idAnchor":"Cat.Diagram.Coequaliser.html#2201","idDesc":null,"idIdent":"coequaliser-unique","idType":"(C : Precategory o ℓ) →\nis-coequaliser C f g c1 → is-coequaliser C f g c2 → (C ≅ E) E′"},{"idAnchor":"Cat.Diagram.Coequaliser.html#642","idDesc":null,"idIdent":"is-coequaliser","idType":"(C : Precategory o ℓ) (f g : Hom C A B₁) (coeq : Hom C B₁ E) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Coequaliser.html#834","idDesc":null,"idIdent":"universal","idType":"(r : is-coequaliser C f g coeq) → (C ∘ r .coequalise p) coeq ≡ e′"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1557","idDesc":null,"idIdent":"coapex","idType":"Coequaliser C f g → Ob C"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1087","idDesc":null,"idIdent":"unique₂","idType":"is-coequaliser C f g coeq →\ne′ ≡ (C ∘ colim') coeq → e′ ≡ (C ∘ colim'') coeq → colim' ≡ colim''"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1495","idDesc":null,"idIdent":"Coequaliser","idType":"(C : Precategory o ℓ) (f g : Hom C A B₁) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1306","idDesc":null,"idIdent":"id-coequalise","idType":"(r : is-coequaliser C f g coeq) → id C ≡ coequalise r (coequal r)"},{"idAnchor":"Cat.Diagram.Coequaliser.html#937","idDesc":null,"idIdent":"unique","idType":"(r : is-coequaliser C f g coeq) →\ne′ ≡ (C ∘ colim) coeq → colim ≡ r .coequalise p"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1870","idDesc":null,"idIdent":"is-coequaliser→is-epic","idType":"(C : Precategory o ℓ) (coequ : Hom C A E) →\nis-coequaliser C f g coequ → is-epic C coequ"},{"idAnchor":"Cat.Diagram.Coequaliser.html#1575","idDesc":null,"idIdent":"coeq","idType":"(r : Coequaliser C f g) → Hom C B₁ (r .coapex)"},{"idAnchor":"Cat.Instances.Twisted.html#3322","idDesc":null,"idIdent":"πₜ","idType":"Functor Twisted (C ^op ×ᶜ C)"},{"idAnchor":"Cat.Instances.Twisted.html#1181","idDesc":null,"idIdent":"after","idType":"Twist f g → Hom C a₁ b₁"},{"idAnchor":"Cat.Instances.Twisted.html#1803","idDesc":null,"idIdent":"Twisted","idType":"Precategory (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Instances.Twisted.html#1206","idDesc":null,"idIdent":"commutes","idType":"(r : Twist f g) → (C ∘ r .after) ((C ∘ f) (r .before)) ≡ g"},{"idAnchor":"Cat.Instances.Twisted.html#1156","idDesc":null,"idIdent":"before","idType":"Twist f g → Hom C b₀ a₀"},{"idAnchor":"Cat.Instances.Twisted.html#3530","idDesc":null,"idIdent":"twistᵒᵖ","idType":"Functor (C ^op ×ᶜ C) D → Functor (Twisted ^op) D"},{"idAnchor":"Cat.Instances.Twisted.html#1741","idDesc":null,"idIdent":"eqv","idType":"Iso (Twist f g)\n(∑ (Hom C b₀ a₀)\n (λ before →\n    ∑ (Hom C a₁ b₁) (λ after → (C ∘ after) ((C ∘ f) before) ≡ g)))"},{"idAnchor":"Cat.Instances.Twisted.html#1053","idDesc":null,"idIdent":"Twist","idType":"(f : Hom C a₀ a₁) (g : Hom C b₀ b₁) → Type ℓ"},{"idAnchor":"Cat.Instances.Twisted.html#1260","idDesc":null,"idIdent":"Twist-path","idType":"before h1 ≡ before h2 → after h1 ≡ after h2 → h1 ≡ h2"},{"idAnchor":"Agda.Builtin.Int.html#219","idDesc":null,"idIdent":"Int","idType":"Type"},{"idAnchor":"Agda.Builtin.Int.html#264","idDesc":null,"idIdent":"negsuc","idType":"Nat → Int"},{"idAnchor":"Agda.Builtin.Int.html#412","idDesc":null,"idIdent":"primShowInteger","idType":"Int → String"},{"idAnchor":"Agda.Builtin.Int.html#237","idDesc":null,"idIdent":"pos","idType":"Nat → Int"},{"idAnchor":"Cat.Solver.html#6670","idDesc":null,"idIdent":"get-boundary","idType":"Term → TC (Maybe (Term × Term))"},{"idAnchor":"Cat.Solver.html#4157","idDesc":null,"idIdent":"build-matcher","idType":"Name → Maybe Name → Name → Bool"},{"idAnchor":"Cat.Solver.html#878","idDesc":null,"idIdent":"_↑","idType":"Hom Cat₁ A B₁ → Expr Cat₁ A B₁"},{"idAnchor":"Cat.Solver.html#776","idDesc":null,"idIdent":"Expr","idType":"(Cat₁ : Precategory o h) → Ob Cat₁ → Ob Cat₁ → Type (o ⊔ h)"},{"idAnchor":"Cat.Solver.html#6977","idDesc":null,"idIdent":"solve-generic","idType":"(Term → TC CategoryNames) → (Term → Term) → Term → Term → TC ⊤"},{"idAnchor":"Cat.Solver.html#4726","idDesc":null,"idIdent":"find-category-names","idType":"Term → TC CategoryNames"},{"idAnchor":"Cat.Solver.html#816","idDesc":null,"idIdent":"`id","idType":"Expr Cat₁ A A"},{"idAnchor":"Cat.Solver.html#4136","idDesc":null,"idIdent":"is-id","idType":"CategoryNames → Name → Bool"},{"idAnchor":"Cat.Solver.html#4073","idDesc":null,"idIdent":"CategoryNames","idType":"Type"},{"idAnchor":"Cat.Solver.html#5739","idDesc":null,"idIdent":"``id","idType":"(names : CategoryNames) → Term"},{"idAnchor":"Cat.Solver.html#4304","idDesc":null,"idIdent":"find-generic-names","idType":"Name → Name → Term → TC CategoryNames"},{"idAnchor":"Cat.Solver.html#4112","idDesc":null,"idIdent":"is-∘","idType":"CategoryNames → Name → Bool"},{"idAnchor":"Cat.Solver.html#7426","idDesc":null,"idIdent":"solve","idType":"Term → Term → TC ⊤"},{"idAnchor":"Cat.Solver.html#3732","idDesc":null,"idIdent":"associate","idType":"(Cat₁ : Precategory o h) (f g : Expr Cat₁ A B₁) →\neval Cat₁ f (id Cat₁) ≡ eval Cat₁ g (id Cat₁) →\nembed Cat₁ f ≡ embed Cat₁ g"},{"idAnchor":"Cat.Solver.html#836","idDesc":null,"idIdent":"_`∘_","idType":"Expr Cat₁ B₁ C → Expr Cat₁ A B₁ → Expr Cat₁ A C"},{"idAnchor":"Cat.Solver.html#5701","idDesc":null,"idIdent":"build-∘","idType":"(names : CategoryNames) → List (Arg Term) → Term"},{"idAnchor":"Cat.Solver.html#2009","idDesc":null,"idIdent":"eval-sound-k","idType":"(Cat₁ : Precategory o h) (e : Expr Cat₁ B₁ C) (f : Hom Cat₁ A B₁) →\n(Cat₁ ∘ eval Cat₁ e (id Cat₁)) f ≡ eval Cat₁ e f"},{"idAnchor":"Cat.Solver.html#7212","idDesc":null,"idIdent":".extendedlambda0","idType":"(find : Term → TC CategoryNames) (mkcat : Term → Term)\n(category hole goal : Term) →\nCategoryNames → Maybe (Term × Term) → TC ⊤"},{"idAnchor":"Cat.Solver.html#5672","idDesc":null,"idIdent":"build-expr","idType":"(names : CategoryNames) → Term → Term"},{"idAnchor":"Cat.Solver.html#2860","idDesc":null,"idIdent":"eval-sound","idType":"(Cat₁ : Precategory o h) (e : Expr Cat₁ A B₁) →\neval Cat₁ e (id Cat₁) ≡ embed Cat₁ e"},{"idAnchor":"Cat.Solver.html#1884","idDesc":null,"idIdent":"eval","idType":"(Cat₁ : Precategory o h) →\nExpr Cat₁ B₁ C → Hom Cat₁ A B₁ → Hom Cat₁ A C"},{"idAnchor":"Cat.Solver.html#1422","idDesc":null,"idIdent":"embed","idType":"(Cat₁ : Precategory o h) → Expr Cat₁ A B₁ → Hom Cat₁ A B₁"},{"idAnchor":"Cat.Diagram.Coproduct.html#924","idDesc":null,"idIdent":"is-coproduct","idType":"(C : Precategory o h) (in₀ : Hom C A P) (in₁ : Hom C B₁ P) →\nType (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Coproduct.html#1874","idDesc":null,"idIdent":"has-is-coproduct","idType":"(r : Coproduct C A B₁) → is-coproduct C (r .in₀) (r .in₁)"},{"idAnchor":"Cat.Diagram.Coproduct.html#1155","idDesc":null,"idIdent":"in₁∘factor","idType":"(r : is-coproduct C in₀ in₁) → (C ∘ r .[_,_] inj0 inj1) in₁ ≡ inj1"},{"idAnchor":"Cat.Diagram.Coproduct.html#1010","idDesc":null,"idIdent":"[_,_]","idType":"is-coproduct C in₀ in₁ → Hom C A Q → Hom C B₁ Q → Hom C P Q"},{"idAnchor":"Cat.Diagram.Coproduct.html#1828","idDesc":null,"idIdent":"in₀","idType":"(r : Coproduct C A B₁) → Hom C A (r .coapex)"},{"idAnchor":"Cat.Diagram.Coproduct.html#1077","idDesc":null,"idIdent":"in₀∘factor","idType":"(r : is-coproduct C in₀ in₁) → (C ∘ r .[_,_] inj0 inj1) in₀ ≡ inj0"},{"idAnchor":"Cat.Diagram.Coproduct.html#1234","idDesc":null,"idIdent":"unique","idType":"(r : is-coproduct C in₀ in₁) (other : Hom C P Q) →\n(C ∘ other) in₀ ≡ inj0 →\n(C ∘ other) in₁ ≡ inj1 → other ≡ r .[_,_] inj0 inj1"},{"idAnchor":"Cat.Diagram.Coproduct.html#2123","idDesc":null,"idIdent":"+-Unique","idType":"(C : Precategory o h) (c1 c2 : Coproduct C A B₁) →\n(C ≅ coapex c1) (coapex c2)"},{"idAnchor":"Cat.Diagram.Coproduct.html#1408","idDesc":null,"idIdent":"unique₂","idType":"is-coproduct C in₀ in₁ →\n(o1 : C .Hom P Q) →\n(C ∘ o1) in₀ ≡ inj0 →\n(C ∘ o1) in₁ ≡ inj1 →\n(o2 : C .Hom P Q) →\n(C ∘ o2) in₀ ≡ inj0 → (C ∘ o2) in₁ ≡ inj1 → o1 ≡ o2"},{"idAnchor":"Cat.Diagram.Coproduct.html#2309","idDesc":null,"idIdent":"c1→c2","idType":"(C : Precategory o h) (c1 c2 : Coproduct C A B₁) →\nHom C (coapex c1) (coapex c2)"},{"idAnchor":"Cat.Diagram.Coproduct.html#2661","idDesc":null,"idIdent":"c2→c1→c2","idType":"(C : Precategory o h) (c1 c2 : Coproduct C A B₁) →\n(C ∘ c2→c1 C c1 c2) (c1→c2 C c1 c2) ≡ id C"},{"idAnchor":"Cat.Diagram.Coproduct.html#2385","idDesc":null,"idIdent":"c2→c1","idType":"(C : Precategory o h) (c1 c2 : Coproduct C A B₁) →\nHom C (coapex c2) (coapex c1)"},{"idAnchor":"Cat.Diagram.Coproduct.html#2473","idDesc":null,"idIdent":"c1→c2→c1","idType":"(C : Precategory o h) (c1 c2 : Coproduct C A B₁) →\n(C ∘ c1→c2 C c1 c2) (c2→c1 C c1 c2) ≡ id C"},{"idAnchor":"Cat.Diagram.Coproduct.html#1812","idDesc":null,"idIdent":"coapex","idType":"Coproduct C A B₁ → Ob C"},{"idAnchor":"Cat.Diagram.Coproduct.html#1851","idDesc":null,"idIdent":"in₁","idType":"(r : Coproduct C A B₁) → Hom C B₁ (r .coapex)"},{"idAnchor":"Cat.Diagram.Coproduct.html#1758","idDesc":null,"idIdent":"Coproduct","idType":"(C : Precategory o h) (A B₁ : Ob C) → Type (o ⊔ h)"},{"idAnchor":"1Lab.HIT.Torus.html#1639","idDesc":null,"idIdent":"iso-pf","idType":"is-iso T²→S¹×S¹"},{"idAnchor":"1Lab.HIT.Torus.html#1204","idDesc":null,"idIdent":"T²≃S¹×S¹","idType":"T² ≡ (S¹ × S¹)"},{"idAnchor":"1Lab.HIT.Torus.html#1290","idDesc":null,"idIdent":"T²→S¹×S¹","idType":"T² → S¹ × S¹"},{"idAnchor":"1Lab.HIT.Torus.html#1052","idDesc":null,"idIdent":"loopB","idType":"base ≡ base"},{"idAnchor":"1Lab.HIT.Torus.html#1000","idDesc":null,"idIdent":"T²","idType":"Type"},{"idAnchor":"1Lab.HIT.Torus.html#1074","idDesc":null,"idIdent":"square","idType":"Square loopA loopB loopB loopA"},{"idAnchor":"1Lab.HIT.Torus.html#1030","idDesc":null,"idIdent":"loopA","idType":"base ≡ base"},{"idAnchor":"1Lab.HIT.Torus.html#1018","idDesc":null,"idIdent":"base","idType":"T²"},{"idAnchor":"1Lab.HIT.Torus.html#1463","idDesc":null,"idIdent":"S¹×S¹→T²","idType":"S¹ × S¹ → T²"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8508","idDesc":null,"idIdent":"left-adjoint-colimit","idType":"(L⊣R : L ⊣ R₁) → Colimit F → Colimit (L F∘ F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7054","idDesc":null,"idIdent":"right-adjoint→pullback","idType":"(L⊣R : L ⊣ R₁) → Pullback D f g → Pullback C (₁ R₁ f) (₁ R₁ g)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#6859","idDesc":null,"idIdent":"fixup","idType":"(L⊣R : L ⊣ R₁) (prod : Product D A B₁) →\nLimit (R₁ F∘ 2-object-diagram D A B₁) →\nLimit (2-object-diagram C (₀ R₁ A) (₀ R₁ B₁))"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7758","idDesc":null,"idIdent":"uniq","idType":"(L⊣R : L ⊣ R₁) (term : is-terminal D X) (x : C .Ob)\n(x₁ : C .Hom x (₀ R₁ X)) →\nfin L⊣R term x ≡ x₁"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#5707","idDesc":null,"idIdent":"right-adjoint-is-continuous","idType":"L ⊣ R₁ → is-continuous R₁"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7711","idDesc":null,"idIdent":"fin","idType":"(L⊣R : L ⊣ R₁) (term : is-terminal D X) (x : C .Ob) →\nC .Hom x (₀ R₁ X)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7315","idDesc":null,"idIdent":"right-adjoint→equaliser","idType":"(L⊣R : L ⊣ R₁) → Equaliser D f g → Equaliser C (₁ R₁ f) (₁ R₁ g)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#3847","idDesc":null,"idIdent":"right-adjoint-cone-hom","idType":"(L⊣R : L ⊣ R₁) →\nCone-hom (R₁ F∘ F) K (cone-right-adjoint L⊣R K′) →\nCone-hom F (right-adjoint-cone L⊣R K) K′"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#4772","idDesc":null,"idIdent":"right-adjoint-limit","idType":"(L⊣R : L ⊣ R₁) → Limit F → Limit (R₁ F∘ F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#2114","idDesc":null,"idIdent":"right-adjoint-cone","idType":"(L⊣R : L ⊣ R₁) → Cone (R₁ F∘ F) → Cone F"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8613","idDesc":null,"idIdent":"lim","idType":"(L⊣R : L ⊣ R₁) (colim : Colimit F) → Limit (op F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#4954","idDesc":null,"idIdent":"pre!","idType":"(L⊣R : L ⊣ R₁) (lim : Limit F) (cone : Cones (R₁ F∘ F) .Ob) →\nHom (Cones F) (right-adjoint-cone L⊣R cone) (lim .top)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8684","idDesc":null,"idIdent":"lim′","idType":"(L⊣R : L ⊣ R₁) (colim : Colimit F) → Limit (op L F∘ op F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#4987","idDesc":null,"idIdent":"!","idType":"(L⊣R : L ⊣ R₁) (lim : Limit F) (cone : Cones (R₁ F∘ F) .Ob) →\nCone-hom (R₁ F∘ F) cone (cone-right-adjoint L⊣R (lim .top))"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#5026","idDesc":null,"idIdent":"!-unique","idType":"(L⊣R : L ⊣ R₁) (lim : Limit F) (cone : Cones (R₁ F∘ F) .Ob)\n(x : Cone-hom (R₁ F∘ F) cone (cone-right-adjoint L⊣R (lim .top))) →\n! L⊣R lim cone ≡ x"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8914","idDesc":null,"idIdent":"colim′′","idType":"(L⊣R : L ⊣ R₁) (colim : Colimit F) → Colimit (L F∘ F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8777","idDesc":null,"idIdent":"colim′","idType":"(L⊣R : L ⊣ R₁) (colim : Colimit F) → Colimit (op (op L F∘ op F))"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#6657","idDesc":null,"idIdent":"right-adjoint→product","idType":"(L⊣R : L ⊣ R₁) → Product D A B₁ → Product C (₀ R₁ A) (₀ R₁ B₁)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7951","idDesc":null,"idIdent":"right-adjoint→lex","idType":"(L⊣R : L ⊣ R₁) → is-lex R₁"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#1759","idDesc":null,"idIdent":"cone-right-adjoint","idType":"(L⊣R : L ⊣ R₁) → Cone F → Cone (R₁ F∘ F)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#2843","idDesc":null,"idIdent":"cone-hom-right-adjoint","idType":"(L⊣R : L ⊣ R₁) →\nCone-hom F (right-adjoint-cone L⊣R K) K′ →\nCone-hom (R₁ F∘ F) K (cone-right-adjoint L⊣R K′)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#7575","idDesc":null,"idIdent":"right-adjoint→terminal","idType":"(L⊣R : L ⊣ R₁) → is-terminal D X → is-terminal C (₀ R₁ X)"},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#8366","idDesc":null,"idIdent":"adj′","idType":"(L⊣R : L ⊣ R₁) → op R₁ ⊣ op L"},{"idAnchor":"Cat.Diagram.Product.html#5190","idDesc":null,"idIdent":"prod′","idType":"(C : Precategory o h) (f-iso : is-invertible C f)\n(g-iso : is-invertible C g) (prod : is-product C π₁ π₂) →\nis-product C ((C ∘ f) π₁) ((C ∘ g) π₂)"},{"idAnchor":"Cat.Diagram.Product.html#4860","idDesc":null,"idIdent":"is-product-iso","idType":"(C : Precategory o h) →\nis-invertible C f →\nis-invertible C g →\nis-product C π₁ π₂ → is-product C ((C ∘ f) π₁) ((C ∘ g) π₂)"},{"idAnchor":"Cat.Diagram.Product.html#2787","idDesc":null,"idIdent":"π₁","idType":"(r : Product C A B₁) → Hom C (r .apex) A"},{"idAnchor":"Cat.Diagram.Product.html#4426","idDesc":null,"idIdent":"p1→p2→p1","idType":"(C : Precategory o h) (p1 p2 : Product C A B₁) →\n(C ∘ p1→p2 C p1 p2) (p2→p1 C p1 p2) ≡ id C"},{"idAnchor":"Cat.Diagram.Product.html#7182","idDesc":null,"idIdent":"π₁","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\nHom C ((C ⊗ hasprods) a b) a"},{"idAnchor":"Cat.Diagram.Product.html#1774","idDesc":null,"idIdent":"is-product","idType":"(C : Precategory o h) (π₁ : Hom C P A) (π₂ : Hom C P B₁) →\nType (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Product.html#2211","idDesc":null,"idIdent":"unique₂","idType":"is-product C π₁ π₂ →\n(C ∘ π₁) o1 ≡ pr1 →\n(C ∘ π₂) o1 ≡ pr2 → (C ∘ π₁) o2 ≡ pr1 → (C ∘ π₂) o2 ≡ pr2 → o1 ≡ o2"},{"idAnchor":"Cat.Diagram.Product.html#7072","idDesc":null,"idIdent":"⟨_,_⟩","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\nHom C a b → Hom C a c → Hom C a ((C ⊗ hasprods) b c)"},{"idAnchor":"Cat.Diagram.Product.html#5878","idDesc":null,"idIdent":"×-functor","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\nFunctor (C ×ᶜ C) C"},{"idAnchor":"Cat.Diagram.Product.html#4184","idDesc":null,"idIdent":"p1→p2","idType":"(C : Precategory o h) (p1 p2 : Product C A B₁) →\nHom C (apex p1) (apex p2)"},{"idAnchor":"Cat.Diagram.Product.html#2773","idDesc":null,"idIdent":"apex","idType":"Product C A B₁ → Ob C"},{"idAnchor":"Cat.Diagram.Product.html#1984","idDesc":null,"idIdent":"π₂∘factor","idType":"(r : is-product C π₁ π₂) → (C ∘ π₂) (r .⟨_,_⟩ p1 p2) ≡ p2"},{"idAnchor":"Cat.Diagram.Product.html#7290","idDesc":null,"idIdent":"π₁∘⟨⟩","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\n(C ∘ π₁ C hasprods) (⟨ C , hasprods ⟩ f g) ≡ f"},{"idAnchor":"Cat.Diagram.Product.html#4008","idDesc":null,"idIdent":"×-Unique","idType":"(C : Precategory o h) (p1 p2 : Product C A B₁) →\n(C ≅ apex p1) (apex p2)"},{"idAnchor":"Cat.Diagram.Product.html#4645","idDesc":null,"idIdent":"p2→p1→p2","idType":"(C : Precategory o h) (p1 p2 : Product C A B₁) →\n(C ∘ p2→p1 C p1 p2) (p1→p2 C p1 p2) ≡ id C"},{"idAnchor":"Cat.Diagram.Product.html#7411","idDesc":null,"idIdent":"π₂∘⟨⟩","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\n(C ∘ π₂ C hasprods) (⟨ C , hasprods ⟩ f g) ≡ g"},{"idAnchor":"Cat.Diagram.Product.html#2703","idDesc":null,"idIdent":"Product","idType":"(C : Precategory o h) (A B₁ : Ob C) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Product.html#2456","idDesc":null,"idIdent":"⟨⟩∘","idType":"(r : is-product C π₁ π₂) (f : Hom C R₁ Q) →\n(C ∘ ⟨ r , p1 ⟩ p2) f ≡ ⟨ r , (C ∘ p1) f ⟩ ((C ∘ p2) f)"},{"idAnchor":"Cat.Diagram.Product.html#2807","idDesc":null,"idIdent":"π₂","idType":"(r : Product C A B₁) → Hom C (r .apex) B₁"},{"idAnchor":"Cat.Diagram.Product.html#7236","idDesc":null,"idIdent":"π₂","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\nHom C ((C ⊗ hasprods) a b) b"},{"idAnchor":"Cat.Diagram.Product.html#1856","idDesc":null,"idIdent":"⟨_,_⟩","idType":"is-product C π₁ π₂ → Hom C Q A → Hom C Q B₁ → Hom C Q P"},{"idAnchor":"Cat.Diagram.Product.html#1918","idDesc":null,"idIdent":"π₁∘factor","idType":"(r : is-product C π₁ π₂) → (C ∘ π₁) (r .⟨_,_⟩ p1 p2) ≡ p1"},{"idAnchor":"Cat.Diagram.Product.html#2051","idDesc":null,"idIdent":"unique","idType":"(r : is-product C π₁ π₂) (other : Hom C Q P) →\n(C ∘ π₁) other ≡ p1 → (C ∘ π₂) other ≡ p2 → other ≡ r .⟨_,_⟩ p1 p2"},{"idAnchor":"Cat.Diagram.Product.html#2827","idDesc":null,"idIdent":"has-is-product","idType":"(r : Product C A B₁) → is-product C (r .π₁) (r .π₂)"},{"idAnchor":"Cat.Diagram.Product.html#4254","idDesc":null,"idIdent":"p2→p1","idType":"(C : Precategory o h) (p1 p2 : Product C A B₁) →\nHom C (apex p2) (apex p1)"},{"idAnchor":"Cat.Diagram.Product.html#7019","idDesc":null,"idIdent":"_⊗_","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁) →\nOb C → Ob C → Ob C"},{"idAnchor":"Cat.Diagram.Product.html#7532","idDesc":null,"idIdent":"⟨⟩∘","idType":"(C : Precategory o h) (hasprods : (A B₁ : Ob C) → Product C A B₁)\n(f : Hom C R₁ Q) →\n(C ∘ ⟨ C , hasprods ⟩ p1 p2) f ≡\n⟨ C , hasprods ⟩ ((C ∘ p1) f) ((C ∘ p2) f)"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#1814","idDesc":null,"idIdent":"Limit→Equaliser","idType":"(Cat₁ : Precategory o h) →\nLimit F → Equaliser Cat₁ (F .F₁ false) (F .F₁ true)"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#654","idDesc":null,"idIdent":"Fork→Cone","idType":"(Cat₁ : Precategory o h) (F : Functor ·⇉· Cat₁)\n(eq₁ : Hom Cat₁ E (F .F₀ false)) →\n(Cat₁ ∘ F .F₁ false) eq₁ ≡ (Cat₁ ∘ F .F₁ true) eq₁ → Cone F"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#1164","idDesc":null,"idIdent":"Equaliser→Limit","idType":"(Cat₁ : Precategory o h) →\nEqualiser Cat₁ (F .F₁ false) (F .F₁ true) → Limit F"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#1995","idDesc":null,"idIdent":"eq","idType":"(Cat₁ : Precategory o h) (lim : Limit F) →\nEqualiser Cat₁ (₁ F false) (₁ F true)"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#1333","idDesc":null,"idIdent":"lim","idType":"(Cat₁ : Precategory o h)\n(eq₁ : Equaliser Cat₁ (F .F₁ false) (F .F₁ true)) →\nLimit F"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#1740","idDesc":null,"idIdent":"p","idType":"(Cat₁ : Precategory o h)\n(eq₁ : Equaliser Cat₁ (F .F₁ false) (F .F₁ true))\n(cone : Cones F .Ob)\n(other : Hom (Cones F) cone (lim Cat₁ eq₁ .top)) →\ncone .ψ false ≡ (Cat₁ ∘ eq₁ .equ) (other .hom)"},{"idAnchor":"Cat.Diagram.Limit.Equaliser.html#2458","idDesc":null,"idIdent":"other","idType":"(Cat₁ : Precategory o h) (lim : Limit F)\n(x : e' ≡ (Cat₁ ∘ eq Cat₁ lim .equ) lim') →\nCone-hom F (Fork→Cone Cat₁ F e' p) (lim .top)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#9662","idDesc":null,"idIdent":"eqv′","idType":"(F⊣U : F ⊣ U)\n(coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(pres : U-preserves-reflexive-coeqs F⊣U)\n(cons : is-conservative U) →\nis-equivalence (F⁻¹ (eqv F⊣U coeq pres cons))"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#8015","idDesc":null,"idIdent":"conservative-prcoeq→counit-is-iso","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nis-conservative U →\nis-invertible D (ε (K⁻¹⊣K F⊣U has-coeq U-pres) o)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#8384","idDesc":null,"idIdent":"preserved","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U)\n(reflect-iso : is-conservative U) →\nis-coequaliser C\n(₁ (U F∘ F) (oalg F⊣U has-coeq U-pres reflect-iso .snd .ν))\n(₁ U (ε F⊣U (₀ F (oalg F⊣U has-coeq U-pres reflect-iso .fst))))\n(₁ U (coequ F⊣U has-coeq U-pres reflect-iso .coeq))"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#3641","idDesc":null,"idIdent":"K⁻¹⊣K","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nK⁻¹ F⊣U has-coeq U-pres ⊣ Comparison F⊣U"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#3856","idDesc":null,"idIdent":"prcoeq→unit-is-iso","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nis-invertible (C^T F⊣U) (η (K⁻¹⊣K F⊣U has-coeq U-pres) o)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#8606","idDesc":null,"idIdent":"inversel","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U)\n(reflect-iso : is-conservative U) →\n(C ∘\n (C ∘ ₁ U (coequ F⊣U has-coeq U-pres reflect-iso .coeq))\n (unit F⊣U .η (oalg F⊣U has-coeq U-pres reflect-iso .fst)))\n(F₁ U\n (has-is-coeq (coequ F⊣U has-coeq U-pres reflect-iso) .coequalise\n  (is-natural F⊣U (F₀ F (F₀ U o)) o (counit F⊣U .η o))))\n≡ id C"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#3580","idDesc":null,"idIdent":"K⁻¹","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nFunctor (C^T F⊣U) D"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#5292","idDesc":null,"idIdent":"η⁻¹","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nC .Hom (₀ U (coapex (has-coeq o))) (o .fst)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#6082","idDesc":null,"idIdent":"inverse","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nC^T F⊣U .Hom\n(₀ U (coapex (has-coeq o)) ,\n alg F⊣U (F₀ (K⁻¹ F⊣U has-coeq U-pres) o))\no"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#3090","idDesc":null,"idIdent":"U-preserves-reflexive-coeqs","idType":"(F⊣U : F ⊣ U) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#5345","idDesc":null,"idIdent":"η⁻¹η","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nC ._∘_ (η (K⁻¹⊣K F⊣U has-coeq U-pres) o .morphism)\n(η⁻¹ F⊣U has-coeq U-pres)\n≡ C .id"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#9401","idDesc":null,"idIdent":"eqv","idType":"(F⊣U : F ⊣ U)\n(coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(pres : U-preserves-reflexive-coeqs F⊣U)\n(cons : is-conservative U) →\nis-equivalence (Comparison⁻¹ F⊣U coeq)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#8310","idDesc":null,"idIdent":"oalg","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U)\n(reflect-iso : is-conservative U) →\nOb (Eilenberg-Moore C (L∘R F⊣U))"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#4341","idDesc":null,"idIdent":"preserved","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nis-coequaliser C (₁ (U F∘ F) (o .snd .ν))\n(₁ U (ε F⊣U (₀ F (o .fst)))) (₁ U (has-coeq o .coeq))"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#8342","idDesc":null,"idIdent":"coequ","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U)\n(reflect-iso : is-conservative U) →\nCoequaliser D (₁ F (oalg F⊣U has-coeq U-pres reflect-iso .snd .ν))\n(ε F⊣U (F₀ F (oalg F⊣U has-coeq U-pres reflect-iso .fst)))"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#9130","idDesc":null,"idIdent":"crude-monadicity","idType":"(F⊣U : F ⊣ U) →\n((M : Algebra C (T F⊣U)) →\n Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst)))) →\nU-preserves-reflexive-coeqs F⊣U →\nis-conservative U → is-monadic F⊣U"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#5394","idDesc":null,"idIdent":"ηη⁻¹","idType":"(F⊣U : F ⊣ U)\n(has-coeq\n : (M : Algebra C (T F⊣U)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣U (F₀ F (M .fst))))\n(U-pres : U-preserves-reflexive-coeqs F⊣U) →\nC ._∘_ (η⁻¹ F⊣U has-coeq U-pres)\n(η (K⁻¹⊣K F⊣U has-coeq U-pres) o .morphism)\n≡ C .id"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#900","idDesc":null,"idIdent":"C^T","idType":"(F⊣U : F ⊣ U) → Precategory (o ⊔ ℓ) (o ⊔ ℓ)"},{"idAnchor":"Cat.Functor.Monadic.Crude.html#859","idDesc":null,"idIdent":"T","idType":"(F⊣U : F ⊣ U) → Monad C"},{"idAnchor":"1Lab.Equiv.FromPath.html#5356","idDesc":null,"idIdent":"θ₁","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nSquareP (λ i j → P (~ j)) (sym β₁) (λ i → v P (~ i) y)\n(λ i → u P (~ i) x₁) (ω₁ P y x₀ β₀ x₁ β₁ k)"},{"idAnchor":"1Lab.Equiv.FromPath.html#9250","idDesc":null,"idIdent":"line→is-equiv","idType":"(P : I → Type ℓ) → is-equiv (f P)"},{"idAnchor":"1Lab.Equiv.FromPath.html#1332","idDesc":null,"idIdent":"f","idType":"(P : I → Type ℓ) → A P → B P"},{"idAnchor":"1Lab.Equiv.FromPath.html#4527","idDesc":null,"idIdent":"square","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nA P → (j i : I) → PartialP (~ j ∨ j) (λ _ → P (~ i))"},{"idAnchor":"1Lab.Equiv.FromPath.html#1364","idDesc":null,"idIdent":"g","idType":"(P : I → Type ℓ) → B P → A P"},{"idAnchor":"1Lab.Equiv.FromPath.html#5293","idDesc":null,"idIdent":"ω₁","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\ng P y ≡ x₁"},{"idAnchor":"1Lab.Equiv.FromPath.html#6614","idDesc":null,"idIdent":".extendedlambda0","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) (k₁ j i : I) →\n.(IsOne (~ j ∨ ~ k₁ ∨ j ∨ k₁)) → P i"},{"idAnchor":"1Lab.Equiv.FromPath.html#4727","idDesc":null,"idIdent":"θ₀","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nSquareP (λ i j → P (~ j)) (sym β₀) (λ i → v P (~ i) y)\n(λ i → u P (~ i) x₀) (ω₀ P y x₀ β₀ x₁ β₁ k)"},{"idAnchor":"1Lab.Equiv.FromPath.html#3151","idDesc":null,"idIdent":"ω","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nx₀ ≡ x₁"},{"idAnchor":"1Lab.Equiv.FromPath.html#3167","idDesc":null,"idIdent":"δ","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nSquare refl (sym β₀) (sym β₁) (ap (f P) (ω P y x₀ β₀ x₁ β₁ k))"},{"idAnchor":"1Lab.Equiv.FromPath.html#3043","idDesc":null,"idIdent":"fibProp","idType":"(P : I → Type ℓ) (y : B P) → is-prop (fibre (f P) y)"},{"idAnchor":"1Lab.Equiv.FromPath.html#2626","idDesc":null,"idIdent":".extendedlambda0","idType":"(P : I → Type ℓ) (y : B P) (i j : I) → .(IsOne (i ∨ ~ i)) → P j"},{"idAnchor":"1Lab.Equiv.FromPath.html#5989","idDesc":null,"idIdent":"sys","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k k₁ j : I) →\nPartial (~ k₁ ∨ k₁) (P i0)"},{"idAnchor":"1Lab.Equiv.FromPath.html#2541","idDesc":null,"idIdent":"hasFib","idType":"(P : I → Type ℓ) (y : B P) → fibre (f P) y"},{"idAnchor":"1Lab.Equiv.FromPath.html#9366","idDesc":null,"idIdent":"line→equiv","idType":"(P : I → Type ℓ) → A P ≃ B P"},{"idAnchor":"1Lab.Equiv.FromPath.html#6100","idDesc":null,"idIdent":"θ","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\nSquare refl (ω₀ P y x₀ β₀ x₁ β₁ k) (ω₁ P y x₀ β₀ x₁ β₁ k)\n(ω P y x₀ β₀ x₁ β₁ k)"},{"idAnchor":"1Lab.Equiv.FromPath.html#1661","idDesc":null,"idIdent":"u","idType":"(P : I → Type ℓ) → PathP (λ i → A P → P i) id (f P)"},{"idAnchor":"1Lab.Equiv.FromPath.html#1105","idDesc":null,"idIdent":"A","idType":"(I → Type ℓ) → Type ℓ"},{"idAnchor":"1Lab.Equiv.FromPath.html#1059","idDesc":null,"idIdent":"~P","idType":"(I → Type ℓ) → I → Type ℓ"},{"idAnchor":"1Lab.Equiv.FromPath.html#1718","idDesc":null,"idIdent":"v","idType":"(P : I → Type ℓ) → PathP (λ i → B P → P i) (g P) id"},{"idAnchor":"1Lab.Equiv.FromPath.html#1107","idDesc":null,"idIdent":"B","idType":"(I → Type ℓ) → Type ℓ"},{"idAnchor":"1Lab.Equiv.FromPath.html#4664","idDesc":null,"idIdent":"ω₀","idType":"(P : I → Type ℓ) (y : B P) (x₀ : A P) (β₀ : f P x₀ ≡ y) (x₁ : A P)\n(β₁ : f P x₁ ≡ y) (k : I) →\ng P y ≡ x₀"},{"idAnchor":"Agda.Primitive.html#582","idDesc":null,"idIdent":"Level","idType":"Type"},{"idAnchor":"Agda.Primitive.html#439","idDesc":null,"idIdent":"SSetω","idType":"SSetω₁"},{"idAnchor":"Agda.Primitive.html#749","idDesc":null,"idIdent":"lzero","idType":"Level"},{"idAnchor":"Agda.Primitive.html#311","idDesc":null,"idIdent":"Set","idType":"Type₁"},{"idAnchor":"Agda.Primitive.html#765","idDesc":null,"idIdent":"lsuc","idType":"Level → Level"},{"idAnchor":"Agda.Primitive.html#795","idDesc":null,"idIdent":"_⊔_","idType":"Level → Level → Level"},{"idAnchor":"Agda.Primitive.html#366","idDesc":null,"idIdent":"Setω","idType":"Typeω₁"},{"idAnchor":"Agda.Primitive.html#402","idDesc":null,"idIdent":"SSet","idType":"SSet (lsuc lzero)"},{"idAnchor":"Agda.Primitive.html#336","idDesc":null,"idIdent":"Prop","idType":"Type₁"},{"idAnchor":"Cat.Functor.Hom.Cocompletion.html#2796","idDesc":null,"idIdent":"extend","idType":"(C : Precategory κ κ) (D : Precategory o κ)\n(colim : is-cocomplete κ κ D) →\nFunctor C D → Functor (PSh κ C) D"},{"idAnchor":"Cat.Functor.Hom.Cocompletion.html#3090","idDesc":null,"idIdent":"extend-factors","idType":"(C : Precategory κ κ) (D : Precategory o κ)\n(colim : is-cocomplete κ κ D) (F : Functor C D) →\n(Cat[ C , D ] ≅ (extend C D colim F F∘ よ C)) F"},{"idAnchor":"Cat.Functor.Hom.Cocompletion.html#2871","idDesc":null,"idIdent":"extend-cocontinuous","idType":"(C : Precategory κ κ) (D : Precategory o κ)\n(colim : is-cocomplete κ κ D) (F : Functor C D) →\nColimit Dg → Colimit (extend C D colim F F∘ Dg)"},{"idAnchor":"1Lab.Equiv.html#4003","idDesc":null,"idIdent":"c","idType":"(A : Type a) (B₁ : Type b) (f : A → B₁) (is-equiv₁ : is-equiv f)\n(a : B₁) (ψ : I) (u0 : Partial ψ (fibre f a)) →\nis-contr (fibre f a)"},{"idAnchor":"1Lab.Equiv.html#22981","idDesc":null,"idIdent":"_≃⟨_⟩_","idType":"(A : Type ℓ) → A ≃ B₁ → B₁ ≃ C → A ≃ C"},{"idAnchor":"1Lab.Equiv.html#21355","idDesc":null,"idIdent":"_e⁻¹","idType":"A ≃ B₁ → B₁ ≃ A"},{"idAnchor":"1Lab.Equiv.html#2806","idDesc":null,"idIdent":"strict-fibres","idType":"(g : B₁ → A) (b : B₁) →\nΣ\n(λ t →\n   (t' : fibre f b) →\n   Path (fibre f (f (g b))) t\n   (g (f (t' .fst)) , ap (f ⊙ g) (t' .snd)))"},{"idAnchor":"1Lab.Equiv.html#21909","idDesc":null,"idIdent":"right","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nis-right-inverse (inv f e g e') (λ x → g (f x))"},{"idAnchor":"1Lab.Equiv.html#13661","idDesc":null,"idIdent":"ι","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nSquare (ap (inv i ⊙ f) (π i y x0 x1 p0 p1)) (ap (inv i) p0)\n(ap (inv i) p1) refl"},{"idAnchor":"1Lab.Equiv.html#2524","idDesc":null,"idIdent":"id-equiv","idType":"is-equiv (λ x → x)"},{"idAnchor":"1Lab.Equiv.html#23456","idDesc":null,"idIdent":"prop-ext","idType":"is-prop P → is-prop Q → (P → Q) → (Q → P) → P ≃ Q"},{"idAnchor":"1Lab.Equiv.html#20391","idDesc":null,"idIdent":"is-contr→is-equiv","idType":"is-contr A → is-contr B₁ → is-equiv f"},{"idAnchor":"1Lab.Equiv.html#20597","idDesc":null,"idIdent":"f-is-iso","idType":"(cA : is-contr A) (cB : is-contr B₁) → is-iso f"},{"idAnchor":"1Lab.Equiv.html#16871","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ j : I) →\nI → .(IsOne (~ i₁ ∨ i₁ ∨ ~ j ∨ j)) → B₁"},{"idAnchor":"1Lab.Equiv.html#6148","idDesc":null,"idIdent":"rinv","idType":"(r : is-iso f) → is-right-inverse (r .inv) f"},{"idAnchor":"1Lab.Equiv.html#10995","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ j : I) →\nI → .(IsOne (~ i₁ ∨ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#16811","idDesc":null,"idIdent":"sq1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nSquare (ap f (π i y x0 x1 p0 p1)) p0 p1 refl"},{"idAnchor":"1Lab.Equiv.html#6688","idDesc":null,"idIdent":"equiv→retraction","idType":"(eqv : is-equiv f) → is-left-inverse (equiv→inverse eqv) f"},{"idAnchor":"1Lab.Equiv.html#11799","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ : I) →\nI → .(IsOne (~ i₁ ∨ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#23095","idDesc":null,"idIdent":"_≃⟨⟩_","idType":"(A : Type ℓ) → A ≃ B₁ → A ≃ B₁"},{"idAnchor":"1Lab.Equiv.html#6859","idDesc":null,"idIdent":"is-equiv→is-iso","idType":"is-equiv f → is-iso f"},{"idAnchor":"1Lab.Equiv.html#13318","idDesc":null,"idIdent":"θ","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nSquare refl (π₀ i y x0 x1 p0 p1) (π₁ i y x0 x1 p0 p1)\n(π i y x0 x1 p0 p1)"},{"idAnchor":"1Lab.Equiv.html#11761","idDesc":null,"idIdent":"π₁","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\ninv i y ≡ x1"},{"idAnchor":"1Lab.Equiv.html#6449","idDesc":null,"idIdent":"equiv→inverse","idType":"is-equiv f → B₁ → A"},{"idAnchor":"1Lab.Equiv.html#2439","idDesc":null,"idIdent":"_≃_","idType":"Type ℓ₁ → Type ℓ₂ → Type (ℓ₁ ⊔ ℓ₂)"},{"idAnchor":"1Lab.Equiv.html#22461","idDesc":null,"idIdent":"eqv","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nis-equiv (λ x → g (f x))"},{"idAnchor":"1Lab.Equiv.html#6214","idDesc":null,"idIdent":"inverse","idType":"(r : is-iso f) → is-iso (inv r)"},{"idAnchor":"1Lab.Equiv.html#22180","idDesc":null,"idIdent":"left","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nis-left-inverse (inv f e g e') (λ x → g (f x))"},{"idAnchor":"1Lab.Equiv.html#11933","idDesc":null,"idIdent":"θ₁","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nSquare (ap (inv i) (sym p1)) refl (linv i x1) (π₁ i y x0 x1 p0 p1)"},{"idAnchor":"1Lab.Equiv.html#2286","idDesc":null,"idIdent":"is-equiv","idType":"(f : A → B₁) → Type (A.ℓ₁ ⊔ B.ℓ₁)"},{"idAnchor":"1Lab.Equiv.html#5134","idDesc":null,"idIdent":".extendedlambda1","idType":"(f : A → B₁) (p q : is-equiv f) (i : I) (y : B₁) (w : fibre f y)\n(j : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → ∑ A (λ x → f x ≡ y)"},{"idAnchor":"1Lab.Equiv.html#19815","idDesc":null,"idIdent":"is-iso→is-equiv","idType":"(i : is-iso f) → is-equiv f"},{"idAnchor":"1Lab.Equiv.html#20926","idDesc":null,"idIdent":"f-is-iso","idType":"(cA : is-contr A) (cB : is-contr B₁) → is-iso (λ _ → cB .centre)"},{"idAnchor":"1Lab.Equiv.html#20757","idDesc":null,"idIdent":"is-contr→≃","idType":"is-contr A → is-contr B₁ → A ≃ B₁"},{"idAnchor":"1Lab.Equiv.html#2376","idDesc":null,"idIdent":"is-eqv","idType":"is-equiv f → (y : B₁) → is-contr (fibre f y)"},{"idAnchor":"1Lab.Equiv.html#21265","idDesc":null,"idIdent":"_∙e_","idType":"A ≃ B₁ → B₁ ≃ C → A ≃ C"},{"idAnchor":"1Lab.Equiv.html#2609","idDesc":null,"idIdent":".extendedlambda0","idType":"(y : A) (x : fibre (λ x₁ → x₁) y) → (y , (λ i → y)) ≡ x"},{"idAnchor":"1Lab.Equiv.html#1873","idDesc":null,"idIdent":"fibre","idType":"(A → B₁) → B₁ → Type (A.ℓ₁ ⊔ B.ℓ₁)"},{"idAnchor":"1Lab.Equiv.html#19566","idDesc":null,"idIdent":"is-iso→fibre-is-prop","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\n(x0 , p0) ≡ (x1 , p1)"},{"idAnchor":"1Lab.Equiv.html#10792","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ : I) →\nI → .(IsOne (~ i₁ ∨ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#12769","idDesc":null,"idIdent":"π","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nx0 ≡ x1"},{"idAnchor":"1Lab.Equiv.html#12002","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ j : I) →\nI → .(IsOne (~ i₁ ∨ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#13737","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ j : I) →\nI → .(IsOne (~ i₁ ∨ i₁ ∨ ~ j ∨ j)) → A"},{"idAnchor":"1Lab.Equiv.html#5649","idDesc":null,"idIdent":"is-left-inverse","idType":"(B₁ → A) → (A → B₁) → Type A.ℓ₁"},{"idAnchor":"1Lab.Equiv.html#21791","idDesc":null,"idIdent":"f⁻¹","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nis-iso f"},{"idAnchor":"1Lab.Equiv.html#10926","idDesc":null,"idIdent":"θ₀","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\nSquare (ap (inv i) (sym p0)) refl (linv i x0) (π₀ i y x0 x1 p0 p1)"},{"idAnchor":"1Lab.Equiv.html#3880","idDesc":null,"idIdent":".extendedlambda1","idType":"(A : Type a) (B₁ : Type b) (f : A → B₁) (is-equiv₁ : is-equiv f)\n(a : B₁) (ψ : I) (u0 : Partial ψ (fibre f a)) →\nI → .(IsOne (~ ψ ∨ ψ)) → ∑ A (λ x → f x ≡ a)"},{"idAnchor":"1Lab.Equiv.html#22578","idDesc":null,"idIdent":"∙-is-equiv","idType":"is-equiv f → is-equiv g → is-equiv (λ x → g (f x))"},{"idAnchor":"1Lab.Equiv.html#21835","idDesc":null,"idIdent":"inv","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nC → A"},{"idAnchor":"1Lab.Equiv.html#4175","idDesc":null,"idIdent":"equiv-path","idType":"(e : A ≃ B₁) (y : B₁) (v : fibre (e .fst) y) →\nPath (∑ A (λ x → e .fst x ≡ y)) (equiv-centre e y) v"},{"idAnchor":"1Lab.Equiv.html#6548","idDesc":null,"idIdent":"equiv→section","idType":"(eqv : is-equiv f) → is-right-inverse (equiv→inverse eqv) f"},{"idAnchor":"1Lab.Equiv.html#13367","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ j : I) →\nI → .(IsOne (i₁ ∨ ~ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#21746","idDesc":null,"idIdent":"g⁻¹","idType":"(f : A → B₁) (e : is-equiv f) (g : B₁ → C) (e' : is-equiv g) →\nis-iso g"},{"idAnchor":"1Lab.Equiv.html#6132","idDesc":null,"idIdent":"inv","idType":"is-iso f → B₁ → A"},{"idAnchor":"1Lab.Equiv.html#20161","idDesc":null,"idIdent":"Iso→Equiv","idType":"Iso A B₁ → A ≃ B₁"},{"idAnchor":"1Lab.Equiv.html#3671","idDesc":null,"idIdent":"is-eqv'","idType":"(A : Type a) (B₁ : Type b) (w : A ≃ B₁) (a : B₁) (ψ : I) →\nPartial ψ (fibre (w .fst) a) → fibre (w .fst) a"},{"idAnchor":"1Lab.Equiv.html#6116","idDesc":null,"idIdent":"iso","idType":"(inv₁ : B₁ → A) (rinv₁ : is-right-inverse inv₁ f)\n(linv₁ : is-left-inverse inv₁ f) →\nis-iso f"},{"idAnchor":"1Lab.Equiv.html#10754","idDesc":null,"idIdent":"π₀","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y)\n(p1 : f x1 ≡ y) →\ninv i y ≡ x0"},{"idAnchor":"1Lab.Equiv.html#12804","idDesc":null,"idIdent":".extendedlambda1","idType":"(i : is-iso f) (y : B₁) (x0 x1 : A) (p0 : f x0 ≡ y) (p1 : f x1 ≡ y)\n(i₁ : I) →\nI → .(IsOne (~ i₁ ∨ i₁)) → A"},{"idAnchor":"1Lab.Equiv.html#5739","idDesc":null,"idIdent":"is-right-inverse","idType":"(B₁ → A) → (A → B₁) → Type B.ℓ₁"},{"idAnchor":"1Lab.Equiv.html#6298","idDesc":null,"idIdent":"Iso","idType":"Type ℓ₁ → Type ℓ₂ → Type (ℓ₁ ⊔ ℓ₂)"},{"idAnchor":"1Lab.Equiv.html#4076","idDesc":null,"idIdent":"equiv-centre","idType":"(e : A ≃ B₁) (y : B₁) → fibre (e .fst) y"},{"idAnchor":"1Lab.Equiv.html#6182","idDesc":null,"idIdent":"linv","idType":"(r : is-iso f) → is-left-inverse (r .inv) f"},{"idAnchor":"1Lab.Equiv.html#6026","idDesc":null,"idIdent":"is-iso","idType":"(f : A → B₁) → Type (A.ℓ₁ ⊔ B.ℓ₁)"},{"idAnchor":"1Lab.Equiv.html#4916","idDesc":null,"idIdent":"is-equiv-is-prop","idType":"(f : A → B₁) → is-prop (is-equiv f)"},{"idAnchor":"1Lab.Equiv.html#23172","idDesc":null,"idIdent":"_≃∎","idType":"(A : Type ℓ) → A ≃ A"},{"idAnchor":"Cat.Diagram.Terminal.html#606","idDesc":null,"idIdent":"!","idType":"(r : Terminal C) → Hom C x (top r)"},{"idAnchor":"Cat.Diagram.Terminal.html#461","idDesc":null,"idIdent":"has⊤","idType":"(r : Terminal C) → is-terminal C (r .top)"},{"idAnchor":"Cat.Diagram.Terminal.html#1954","idDesc":null,"idIdent":"is-terminal-iso","idType":"(C : Precategory o h) →\n(C ≅ A) B₁ → is-terminal C A → is-terminal C B₁"},{"idAnchor":"Cat.Diagram.Terminal.html#406","idDesc":null,"idIdent":"Terminal","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Terminal.html#1443","idDesc":null,"idIdent":"⊤-unique","idType":"(C : Precategory o h) (t1 t2 : Terminal C) → (C ≅ top t1) (top t2)"},{"idAnchor":"Cat.Diagram.Terminal.html#1657","idDesc":null,"idIdent":"⊤-contractible","idType":"(C : Precategory o h) → is-category C → is-prop (Terminal C)"},{"idAnchor":"Cat.Diagram.Terminal.html#723","idDesc":null,"idIdent":"!-unique₂","idType":"(r : Terminal C) (f g : Hom C x (top r)) → f ≡ g"},{"idAnchor":"Cat.Diagram.Terminal.html#652","idDesc":null,"idIdent":"!-unique","idType":"(r : Terminal C) (h : Hom C x (top r)) → ! r ≡ h"},{"idAnchor":"Cat.Diagram.Terminal.html#329","idDesc":null,"idIdent":"is-terminal","idType":"(C : Precategory o h) → Ob C → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Terminal.html#448","idDesc":null,"idIdent":"top","idType":"Terminal C → Ob C"},{"idAnchor":"Cat.Diagram.Terminal.html#1294","idDesc":null,"idIdent":"!-invertible","idType":"(C : Precategory o h) (t1 t2 : Terminal C) → is-invertible C (! t1)"},{"idAnchor":"Algebra.Group.Action.html#2506","idDesc":null,"idIdent":"Aut","idType":"(C : Precategory o ℓ) → Ob C → Group ℓ"},{"idAnchor":"Algebra.Group.Action.html#2981","idDesc":null,"idIdent":"Action","idType":"(C : Precategory o ℓ) → Group ℓ → Ob C → Type ℓ"},{"idAnchor":"Algebra.Group.Action.html#3909","idDesc":null,"idIdent":"Action→functor","idType":"(C : Precategory o ℓ) →\nAction C G X → Functor (B (underlying-monoid (G .snd) .snd)) C"},{"idAnchor":"Algebra.Group.Action.html#3474","idDesc":null,"idIdent":"Functor→action","idType":"(C : Precategory o ℓ)\n(F : Functor (B (underlying-monoid (G .snd) .snd)) C) →\nAction C G (F .F₀ tt)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#2688","idDesc":null,"idIdent":"_axiom[_by_]","idType":"(previous-fields : RecordFields R₁ ι) →\n((r : R₁ X) → P X (project-fields previous-fields r)) →\nis-prop-property R₁ ι previous-fields P → RecordFields R₁ ι"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#992","idDesc":null,"idIdent":"fields→prod","idType":"(fields : RecordFields R₁ ι) →\nType ℓ → Type (level-of-fields→prod fields)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4320","idDesc":null,"idIdent":"tm→isHomT","idType":"Str-term ℓ ℓ₁ S₁ → IsHomT ℓ₁ S₁"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#278","idDesc":null,"idIdent":"IsHomT","idType":"(l : Level) → (Type ℓ → Type ℓ₁) → Type (lsuc ℓ ⊔ ℓ₁ ⊔ lsuc l)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#3810","idDesc":null,"idIdent":"AutoRecord","idType":"Typeω"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#1218","idDesc":null,"idIdent":"project-fields","idType":"(fs : RecordFields R₁ ι) → R₁ X → fields→prod fs X"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4915","idDesc":null,"idIdent":"TypedTm","idType":"Type"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4544","idDesc":null,"idIdent":"tm→is-univalent'","idType":"(tm : Str-term ℓ ℓ₁ S₁) → is-univalent' S₁ (tm→isHomT tm)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5144","idDesc":null,"idIdent":"structure","idType":"Spec A → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4944","idDesc":null,"idIdent":"type","idType":"TypedTm → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#705","idDesc":null,"idIdent":"RecordFields","idType":"(R₁ : Type ℓ → Type ℓ₁) → IsHomT ℓ₁' R₁ → Typeω"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5058","idDesc":null,"idIdent":"propertyField","idType":"Name → InternalField"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4691","idDesc":null,"idIdent":"is-univalent'→is-univalent","idType":"(S₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₂ S₁) →\nis-univalent' S₁ ι → is-univalent (HomT→Str ι)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5168","idDesc":null,"idIdent":"homomorphism","idType":"Spec A → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#1811","idDesc":null,"idIdent":"record:","idType":"RecordFields R₁ ι"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5011","idDesc":null,"idIdent":"structureField","idType":"Name → Name → InternalField"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4964","idDesc":null,"idIdent":"term","idType":"TypedTm → Term"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5192","idDesc":null,"idIdent":"fields","idType":"Spec A → List (InternalField × A)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#5103","idDesc":null,"idIdent":"Spec","idType":"(A : Type) → Type"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#3837","idDesc":null,"idIdent":"record-desc","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁) →\nRecordFields R₁ ι → AutoRecord"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4128","idDesc":null,"idIdent":"is-univalent'","idType":"(S₁ : Type ℓ → Type ℓ₁) → IsHomT ℓ₂ S₁ → Type (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₂)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#823","idDesc":null,"idIdent":"level-of-fields→prod","idType":"RecordFields R₁ ι → Level"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#1924","idDesc":null,"idIdent":"_field[_by_]","idType":"RecordFields R₁ ι →\n(project : R₁ X → S₁ X) →\n(ι A B₁ e → ι' (Σ-map₂ project A) (Σ-map₂ project B₁) e) →\nRecordFields R₁ ι"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4424","idDesc":null,"idIdent":"tm→⌜is-univalent⌝","idType":"(tm : Str-term ℓ ℓ₁ S₁) → Type (lsuc ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#1422","idDesc":null,"idIdent":"is-prop-property","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι) →\n((X : Type ℓ) → fields→prod fs X → Type ℓ₂) →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₂)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Base.html#4982","idDesc":null,"idIdent":"InternalField","idType":"Type"},{"idAnchor":"Algebra.Semilattice.html#3063","idDesc":null,"idIdent":"r","idType":"(semi : is-semilattice _∧₁_) → Poset A.ℓ A.ℓ"},{"idAnchor":"Algebra.Semilattice.html#5063","idDesc":null,"idIdent":"Semilattice-on→Join-on","idType":"is-semilattice ∨ → Poset (level-of A) (level-of A)"},{"idAnchor":"Algebra.Semilattice.html#2234","idDesc":null,"idIdent":"rel-transitive","idType":"(semi : is-semilattice _∧₁_) →\nrel semi x y → rel semi y z → rel semi x z"},{"idAnchor":"Algebra.Semilattice.html#8255","idDesc":null,"idIdent":"∨","idType":"(r : Semilattice-on A) → A → A → A"},{"idAnchor":"Algebra.Semilattice.html#4521","idDesc":null,"idIdent":"r","idType":"(semi : is-semilattice _∧₁_) →\nis-product (Po semi .underlying) (∧-less-thanl semi)\n(∧-less-thanr semi)"},{"idAnchor":"Algebra.Semilattice.html#10058","idDesc":null,"idIdent":"is-semilattice-hom→is-monotone-meet","idType":"(f : A .fst → B₁ .fst) (ishom : is-semilattice-hom A B₁ f) →\nMonotone-map (→Meet (A .snd)) (→Meet (B₁ .snd))"},{"idAnchor":"Algebra.Semilattice.html#8980","idDesc":null,"idIdent":"Semilattice≃","idType":"(A B₁ : Semilattice ℓ) → A .fst ≃ B₁ .fst → Type ℓ"},{"idAnchor":"Algebra.Semilattice.html#5655","idDesc":null,"idIdent":"r","idType":"(semi : is-semilattice _∨₁_) → Poset A.ℓ A.ℓ"},{"idAnchor":"Algebra.Semilattice.html#980","idDesc":null,"idIdent":"idempotent","idType":"is-semilattice _∧₁_ → (x ∧₁ x) ≡ x"},{"idAnchor":"Algebra.Semilattice.html#2698","idDesc":null,"idIdent":"rel-prop","idType":"(semi : is-semilattice _∧₁_) → is-prop (rel semi x y)"},{"idAnchor":"Algebra.Semilattice.html#935","idDesc":null,"idIdent":"commutative","idType":"is-semilattice _∧₁_ → (x ∧₁ y) ≡ (y ∧₁ x)"},{"idAnchor":"Algebra.Semilattice.html#5234","idDesc":null,"idIdent":"transitive","idType":"(semi : is-semilattice _∨₁_) →\ny ≡ (x ∨₁ y) → z ≡ (y ∨₁ z) → z ≡ (x ∨₁ z)"},{"idAnchor":"Algebra.Semilattice.html#6504","idDesc":null,"idIdent":"Semilattice→is-coproduct","idType":"(semi : is-semilattice _∨₁_) →\nis-coproduct (Po semi .underlying) (∨-greater-thanl semi)\n(∨-greater-thanr semi)"},{"idAnchor":"Algebra.Semilattice.html#8807","idDesc":null,"idIdent":"pres-∧","idType":"is-semilattice-hom A B₁ f →\n(x y : A .fst) → f (A .snd .∧ x y) ≡ B₁ .snd .∧ (f x) (f y)"},{"idAnchor":"Algebra.Semilattice.html#1798","idDesc":null,"idIdent":"rel","idType":"(semi : is-semilattice _∧₁_) → A → A → Type A.ℓ"},{"idAnchor":"Algebra.Semilattice.html#8628","idDesc":null,"idIdent":"is-semilattice-hom","idType":"(A B₁ : Semilattice ℓ) (f : A .fst → B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Semilattice.html#10340","idDesc":null,"idIdent":"is-semilattice-hom→is-monotone-join","idType":"(f : A .fst → B₁ .fst) (ishom : is-semilattice-hom A B₁ f) →\nMonotone-map (→Join (A .snd)) (→Join (B₁ .snd))"},{"idAnchor":"Algebra.Semilattice.html#895","idDesc":null,"idIdent":"has-is-semigroup","idType":"is-semilattice _∧₁_ → is-semigroup _∧₁_"},{"idAnchor":"Algebra.Semilattice.html#6080","idDesc":null,"idIdent":"∨-greater-thanl","idType":"(semi : is-semilattice _∨₁_) → (Po semi ≤ x) (x ∨₁ y)"},{"idAnchor":"Algebra.Semilattice.html#5496","idDesc":null,"idIdent":"antisym","idType":"(semi : is-semilattice _∨₁_) → y ≡ (x ∨₁ y) → x ≡ (y ∨₁ x) → x ≡ y"},{"idAnchor":"Algebra.Semilattice.html#4354","idDesc":null,"idIdent":"Semilattice→is-product","idType":"(semi : is-semilattice _∧₁_) →\nis-product (Po semi .underlying) (∧-less-thanl semi)\n(∧-less-thanr semi)"},{"idAnchor":"Algebra.Semilattice.html#7864","idDesc":null,"idIdent":"Semilattice-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Semilattice.html#8321","idDesc":null,"idIdent":"Semilattice","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Semilattice.html#6251","idDesc":null,"idIdent":"∨-greater-thanr","idType":"(semi : is-semilattice _∨₁_) → (Po semi ≤ y) (x ∨₁ y)"},{"idAnchor":"Algebra.Semilattice.html#2050","idDesc":null,"idIdent":"rel-refl","idType":"(semi : is-semilattice _∧₁_) → rel semi x x"},{"idAnchor":"Algebra.Semilattice.html#3703","idDesc":null,"idIdent":"∧-less-thanl","idType":"(semi : is-semilattice _∧₁_) → (Po semi ≤ (x ∧₁ y)) x"},{"idAnchor":"Algebra.Semilattice.html#824","idDesc":null,"idIdent":"is-semilattice","idType":"(_∧₁_ : A → A → A) → Type A.ℓ"},{"idAnchor":"Algebra.Semilattice.html#6684","idDesc":null,"idIdent":"c","idType":"(semi : is-semilattice _∨₁_) →\nis-coproduct (Po semi .underlying) (∨-greater-thanl semi)\n(∨-greater-thanr semi)"},{"idAnchor":"Algebra.Semilattice.html#8914","idDesc":null,"idIdent":"pres-∨","idType":"(r : is-semilattice-hom A B₁ f) (x y : A .fst) →\nf (∨ (A .snd) x y) ≡ ∨ (B₁ .snd) (f x) (f y)"},{"idAnchor":"Algebra.Semilattice.html#8182","idDesc":null,"idIdent":"→Join","idType":"(r : Semilattice-on A) → Poset ℓ ℓ"},{"idAnchor":"Algebra.Semilattice.html#7480","idDesc":null,"idIdent":"H-Level-is-semilattice","idType":"H-Level (is-semilattice M) (suc n)"},{"idAnchor":"Algebra.Semilattice.html#7941","idDesc":null,"idIdent":"has-is-semilattice","idType":"(r : Semilattice-on A) → is-semilattice (r .∧)"},{"idAnchor":"Algebra.Semilattice.html#9268","idDesc":null,"idIdent":"Semilattice-univalent","idType":"is-univalent (HomT→Str Semilattice≃)"},{"idAnchor":"Algebra.Semilattice.html#1602","idDesc":null,"idIdent":"Semilattice-on→Meet-on","idType":"is-semilattice ∧ → Poset (level-of A) (level-of A)"},{"idAnchor":"Algebra.Semilattice.html#8070","idDesc":null,"idIdent":"→Meet","idType":"(r : Semilattice-on A) → Poset ℓ ℓ"},{"idAnchor":"Algebra.Semilattice.html#7923","idDesc":null,"idIdent":"∧","idType":"Semilattice-on A → A → A → A"},{"idAnchor":"Algebra.Semilattice.html#6001","idDesc":null,"idIdent":"Po","idType":"(semi : is-semilattice _∨₁_) → Poset (level-of A) (level-of A)"},{"idAnchor":"Algebra.Semilattice.html#2844","idDesc":null,"idIdent":"rel-antisym","idType":"(semi : is-semilattice _∧₁_) → rel semi x y → rel semi y x → x ≡ y"},{"idAnchor":"Algebra.Semilattice.html#7416","idDesc":null,"idIdent":"eqv","idType":"Iso (is-semilattice _∧₁_)\n(∑ (is-semigroup _∧₁_)\n (λ has-is-semigroup₁ →\n    ∑ ({x y : A} → (x ∧₁ y) ≡ (y ∧₁ x))\n    (λ commutative → {x : A} → (x ∧₁ x) ≡ x)))"},{"idAnchor":"Algebra.Semilattice.html#3906","idDesc":null,"idIdent":"∧-less-thanr","idType":"(semi : is-semilattice _∧₁_) → (Po semi ≤ (x ∧₁ y)) y"},{"idAnchor":"Algebra.Semilattice.html#3624","idDesc":null,"idIdent":"Po","idType":"(semi : is-semilattice _∧₁_) → Poset (level-of A) (level-of A)"},{"idAnchor":"Cat.Instances.Product.html#3522","idDesc":null,"idIdent":"×ᶜ-is-category","idType":"(c-cat : is-category C) (d-cat : is-category D) →\nis-category (C ×ᶜ D)"},{"idAnchor":"Cat.Instances.Product.html#3836","idDesc":null,"idIdent":"ip","idType":"(c-cat : is-category C) (d-cat : is-category D) (A₀ : Ob C)\n(A₁ : Ob D) (B₀ : Ob C) (B₁ : Ob D)\n(isom : ((C ×ᶜ D) ≅ (A₀ , A₁)) (B₀ , B₁)) (i : I) →\nPathP\n(λ i₁ →\n   ((C ×ᶜ D) ≅ (A₀ , A₁))\n   (Ap c-cat d-cat A₀ A₁ B₀ B₁ isom i i₁ ,\n    Bp c-cat d-cat A₀ A₁ B₀ B₁ isom i i₁))\n(id-iso (C ×ᶜ D)) isom"},{"idAnchor":"Cat.Instances.Product.html#2523","idDesc":null,"idIdent":"Fst","idType":"Functor (C ×ᶜ D) C"},{"idAnchor":"Cat.Instances.Product.html#1711","idDesc":null,"idIdent":"prodcat","idType":"(C : Precategory o₁ h₁) (D : Precategory o₂ h₂) →\nPrecategory (o₁ ⊔ o₂) (h₁ ⊔ h₂)"},{"idAnchor":"Cat.Instances.Product.html#2705","idDesc":null,"idIdent":"Cat⟨_,_⟩","idType":"Functor E C → Functor E D → Functor E (C ×ᶜ D)"},{"idAnchor":"Cat.Instances.Product.html#2788","idDesc":null,"idIdent":"f","idType":"(F : Functor E C) (G : Functor E D) → Functor E (C ×ᶜ D)"},{"idAnchor":"Cat.Instances.Product.html#3698","idDesc":null,"idIdent":"Ap","idType":"(c-cat : is-category C) (d-cat : is-category D) (A₀ : Ob C)\n(A₁ : Ob D) (B₀ : Ob C) (B₁ : Ob D)\n(isom : ((C ×ᶜ D) ≅ (A₀ , A₁)) (B₀ , B₁)) (i : I) →\nA₀ ≡ B₀"},{"idAnchor":"Cat.Instances.Product.html#2614","idDesc":null,"idIdent":"Snd","idType":"Functor (C ×ᶜ D) D"},{"idAnchor":"Cat.Instances.Product.html#3767","idDesc":null,"idIdent":"Bp","idType":"(c-cat : is-category C) (d-cat : is-category D) (A₀ : Ob C)\n(A₁ : Ob D) (B₀ : Ob C) (B₁ : Ob D)\n(isom : ((C ×ᶜ D) ≅ (A₀ , A₁)) (B₀ , B₁)) (i : I) →\nA₁ ≡ B₁"},{"idAnchor":"Cat.Instances.Product.html#1568","idDesc":null,"idIdent":"_×ᶜ_","idType":"Precategory o₁ h₁ →\nPrecategory o₂ h₂ → Precategory (o₁ ⊔ o₂) (h₁ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Idempotent.html#865","idDesc":null,"idIdent":"is-split","idType":"(C : Precategory o h) (e : Hom C A A) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Idempotent.html#1043","idDesc":null,"idIdent":"is-split→is-idempotent","idType":"(C : Precategory o h) → is-split C f → is-idempotent C f"},{"idAnchor":"Cat.Diagram.Idempotent.html#1747","idDesc":null,"idIdent":"is-idempotent-complete","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Idempotent.html#1015","idDesc":null,"idIdent":"i∘p","idType":"(r : is-split C e) → (C ∘ r .inject) (r .project) ≡ e"},{"idAnchor":"Cat.Diagram.Idempotent.html#796","idDesc":null,"idIdent":"is-idempotent","idType":"(C : Precategory o h) → Hom C A A → Type h"},{"idAnchor":"Cat.Diagram.Idempotent.html#938","idDesc":null,"idIdent":"project","idType":"(r : is-split C e) → Hom C A (r .F)"},{"idAnchor":"Cat.Diagram.Idempotent.html#983","idDesc":null,"idIdent":"p∘i","idType":"(r : is-split C e) → (C ∘ r .project) (r .inject) ≡ id C"},{"idAnchor":"Cat.Diagram.Idempotent.html#922","idDesc":null,"idIdent":"F","idType":"is-split C e → Ob C"},{"idAnchor":"Cat.Diagram.Idempotent.html#960","idDesc":null,"idIdent":"inject","idType":"(r : is-split C e) → Hom C (r .F) A"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1686","idDesc":null,"idIdent":"rel-prop","idType":"(R₁ : Congruence-on Sets-finitely-complete A) (x y : ∣ A ∣) →\nis-prop (rel R₁ x y)"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1272","idDesc":null,"idIdent":"rel-sym","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\nrel R₁ x y → rel R₁ y x"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1914","idDesc":null,"idIdent":"m2","idType":"(R₁ : Congruence-on Sets-finitely-complete A) (x y : ∣ A ∣)\n(r : ∣ R₁ .domain ∣) (s : inclusion R₁ r ≡ (x , y))\n(q : ∣ R₁ .domain ∣) (p : inclusion R₁ q ≡ (x , y)) →\nHom (Sets ℓ) unit (domain R₁)"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1911","idDesc":null,"idIdent":"m1","idType":"(R₁ : Congruence-on Sets-finitely-complete A) (x y : ∣ A ∣)\n(r : ∣ R₁ .domain ∣) (s : inclusion R₁ r ≡ (x , y))\n(q : ∣ R₁ .domain ∣) (p : inclusion R₁ q ≡ (x , y)) →\nHom (Sets ℓ) unit (domain R₁)"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1091","idDesc":null,"idIdent":"rel","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\n∣ A ∣ → ∣ A ∣ → Type ℓ"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#894","idDesc":null,"idIdent":"Sets-effective-congruences","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\nis-effective-congruence Sets-finitely-complete R₁"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1991","idDesc":null,"idIdent":"undo","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\ninc x ≡ inc y → rel R₁ x y"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#2738","idDesc":null,"idIdent":".extendedlambda2","idType":"(R₁ : Congruence-on Sets-finitely-complete A)\n(x : ∣ R₁ .domain ∣) →\ninc (rel₁ R₁ x) ≡ inc (rel₂ R₁ x)"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#2416","idDesc":null,"idIdent":".extendedlambda1","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\n(Sets ℓ ∘ e′) (rel₁ (has-is-cong R₁)) ≡\n(Sets ℓ ∘ e′) (rel₂ (has-is-cong R₁)) →\n(x y : ∣ A ∣) (r : rel R₁ x y) → e′ x ≡ e′ y"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#343","idDesc":null,"idIdent":"unit","idType":"Set ℓ"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1156","idDesc":null,"idIdent":"rel-refl","idType":"(R₁ : Congruence-on Sets-finitely-complete A) → rel R₁ x x"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#2292","idDesc":null,"idIdent":".extendedlambda0","idType":"(R₁ : Congruence-on Sets-finitely-complete A)\n(x : ∣ R₁ .domain ∣) →\ninc (rel₁ (has-is-cong R₁) x) ≡ inc (rel₂ (has-is-cong R₁) x)"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#1421","idDesc":null,"idIdent":"rel-trans","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\nrel R₁ x y → rel R₁ y z → rel R₁ x z"},{"idAnchor":"Cat.Instances.Sets.Congruences.html#2148","idDesc":null,"idIdent":"eff","idType":"(R₁ : Congruence-on Sets-finitely-complete A) →\nis-effective-congruence Sets-finitely-complete R₁"},{"idAnchor":"Cat.Diagram.Duals.html#4869","idDesc":null,"idIdent":"Co-cone-hom→Cocone-hom","idType":"(C : Precategory o h) →\nCone-hom (op F) y x →\nCocone-hom F (Co-cone→Cocone C x) (Co-cone→Cocone C y)"},{"idAnchor":"Cat.Diagram.Duals.html#5740","idDesc":null,"idIdent":"g","idType":"(C : Precategory o h) (colim : Colimit F)\n(co-cone : Cones (op F) .Ob) →\nCone-hom (op F) co-cone (Cocone→Co-cone C (colim .bot)) →\nCocone-hom F (colim .bot) (Co-cone→Cocone C co-cone)"},{"idAnchor":"Cat.Diagram.Duals.html#6515","idDesc":null,"idIdent":"fg","idType":"(C : Precategory o h) (lim : Limit (op F))\n(cocon : Cocones F .Ob) →\nis-left-inverse (f C lim cocon) (g C lim cocon)"},{"idAnchor":"Cat.Diagram.Duals.html#5601","idDesc":null,"idIdent":"f","idType":"(C : Precategory o h) (colim : Colimit F)\n(co-cone : Cones (op F) .Ob) →\nCocone-hom F (colim .bot) (Co-cone→Cocone C co-cone) →\nCone-hom (op F) co-cone (Cocone→Co-cone C (colim .bot))"},{"idAnchor":"Cat.Diagram.Duals.html#6728","idDesc":null,"idIdent":"Colimit-ap-iso","idType":"(C : Precategory o h) →\n(Cat[ J₁ , C ] ≅ F) F′ → Colimit F → Colimit F′"},{"idAnchor":"Cat.Diagram.Duals.html#5420","idDesc":null,"idIdent":"lim","idType":"(C : Precategory o h) (colim : Colimit F) → Limit (op F)"},{"idAnchor":"Cat.Diagram.Duals.html#5333","idDesc":null,"idIdent":"Colimit→Co-limit","idType":"(C : Precategory o h) → Colimit F → Limit (op F)"},{"idAnchor":"Cat.Diagram.Duals.html#6061","idDesc":null,"idIdent":"colim","idType":"(C : Precategory o h) (lim : Limit (op F)) → Colimit F"},{"idAnchor":"Cat.Diagram.Duals.html#2907","idDesc":null,"idIdent":"is-co-pullback→is-pushout","idType":"(C : Precategory o h) →\nis-pullback (C ^op) p1 f p2 g → is-pushout C f p1 g p2"},{"idAnchor":"Cat.Diagram.Duals.html#2679","idDesc":null,"idIdent":"is-coterminal→is-initial","idType":"(C : Precategory o h) → is-initial C A → is-terminal (C ^op) A"},{"idAnchor":"Cat.Diagram.Duals.html#5877","idDesc":null,"idIdent":"fg","idType":"(C : Precategory o h) (colim : Colimit F)\n(co-cone : Cones (op F) .Ob) →\nis-left-inverse (f C colim co-cone) (g C colim co-cone)"},{"idAnchor":"Cat.Diagram.Duals.html#2569","idDesc":null,"idIdent":"is-initial→is-coterminal","idType":"(C : Precategory o h) → is-terminal (C ^op) A → is-initial C A"},{"idAnchor":"Cat.Diagram.Duals.html#2075","idDesc":null,"idIdent":"is-coequaliser→is-co-equaliser","idType":"(C : Precategory o h) →\nis-coequaliser C f g coeq → is-equaliser (C ^op) f g coeq"},{"idAnchor":"Cat.Diagram.Duals.html#3322","idDesc":null,"idIdent":"is-pushout→is-co-pullback","idType":"(C : Precategory o h) →\nis-pushout C f p1 g p2 → is-pullback (C ^op) p1 f p2 g"},{"idAnchor":"Cat.Diagram.Duals.html#1713","idDesc":null,"idIdent":"is-co-equaliser→is-coequaliser","idType":"(C : Precategory o h) →\nis-equaliser (C ^op) f g coeq → is-coequaliser C f g coeq"},{"idAnchor":"Cat.Diagram.Duals.html#4660","idDesc":null,"idIdent":"Co-cone→Cocone→Co-cone","idType":"(C : Precategory o h) (K : Cone (op F)) →\nCocone→Co-cone C (Co-cone→Cocone C K) ≡ K"},{"idAnchor":"Cat.Diagram.Duals.html#5974","idDesc":null,"idIdent":"Co-limit→Colimit","idType":"(C : Precategory o h) → Limit (op F) → Colimit F"},{"idAnchor":"Cat.Diagram.Duals.html#1230","idDesc":null,"idIdent":"is-coproduct→is-co-product","idType":"(C : Precategory o h) →\nis-coproduct C i2 i2 → is-product (C ^op) i2 i2"},{"idAnchor":"Cat.Diagram.Duals.html#880","idDesc":null,"idIdent":"is-co-product→is-coproduct","idType":"(C : Precategory o h) →\nis-product (C ^op) i2 i2 → is-coproduct C i2 i2"},{"idAnchor":"Cat.Diagram.Duals.html#4272","idDesc":null,"idIdent":"Cocone→Co-cone","idType":"(C : Precategory o h) → Cocone F → Cone (op F)"},{"idAnchor":"Cat.Diagram.Duals.html#6239","idDesc":null,"idIdent":"f","idType":"(C : Precategory o h) (lim : Limit (op F))\n(cocon : Cocones F .Ob) →\nCone-hom (op F) (Cocone→Co-cone C cocon) (lim .top) →\nCocone-hom F (Co-cone→Cocone C (lim .top)) cocon"},{"idAnchor":"Cat.Diagram.Duals.html#4104","idDesc":null,"idIdent":"Co-cone→Cocone","idType":"(C : Precategory o h) → Cone (op F) → Cocone F"},{"idAnchor":"Cat.Diagram.Duals.html#5090","idDesc":null,"idIdent":"Cocone-hom→Co-cone-hom","idType":"(C : Precategory o h) →\nCocone-hom F x y →\nCone-hom (op F) (Cocone→Co-cone C y) (Cocone→Co-cone C x)"},{"idAnchor":"Cat.Diagram.Duals.html#4451","idDesc":null,"idIdent":"Cocone→Co-cone→Cocone","idType":"(C : Precategory o h) (K : Cocone F) →\nCo-cone→Cocone C (Cocone→Co-cone C K) ≡ K"},{"idAnchor":"Cat.Diagram.Duals.html#6376","idDesc":null,"idIdent":"g","idType":"(C : Precategory o h) (lim : Limit (op F))\n(cocon : Cocones F .Ob) →\nCocone-hom F (Co-cone→Cocone C (lim .top)) cocon →\nCone-hom (op F) (Cocone→Co-cone C cocon) (lim .top)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#5946","idDesc":null,"idIdent":"Cone","idType":"(F : Functor J₁ C) → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#9563","idDesc":null,"idIdent":"cat","idType":"(F : Functor J₁ C) → Precategory (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂) (o₁ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#12296","idDesc":null,"idIdent":"Preserves-limit","idType":"(F : Functor C D) → Cone Dia → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂ ⊔ o₃ ⊔ h₃)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#10258","idDesc":null,"idIdent":"Limit-universal","idType":"(F : Functor J₁ C) (L : Limit F) (K : Cone F) →\nC .Hom (apex K) (Limit-apex F L)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#19298","idDesc":null,"idIdent":"is-complete","idType":"(o ℓ : Level) →\nPrecategory oc ℓc → Type (oc ⊔ ℓc ⊔ lsuc o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15326","idDesc":null,"idIdent":"g","idType":"(F : Functor J₁ C) (X Y : Limit F) →\nCones F .Hom (Y-cone F X Y) (X-cone F X Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#17860","idDesc":null,"idIdent":"limits","idType":"(F : Functor J₁ C) (K : Cone F) (L : Limit F)\n(invert : is-invertible C (Limit-universal F L K))\n(K′ : Cones F .Ob) →\nis-contr (Cones F .Hom K′ K)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#20219","idDesc":null,"idIdent":"Limit-ap-iso","idType":"(Cat[ J₁ , C ] ≅ F) G → Limit F → Limit G"},{"idAnchor":"Cat.Diagram.Limit.Base.html#8398","idDesc":null,"idIdent":"eqv","idType":"(F : Functor J₁ C) →\nIso (Cone-hom F x y)\n(∑ (C .Hom (apex x) (apex y))\n (λ hom → (o : J₁ .Ob) → C ._∘_ (ψ y o) hom ≡ ψ x o))"},{"idAnchor":"Cat.Diagram.Limit.Base.html#8309","idDesc":null,"idIdent":"commutes","idType":"(r : Cone-hom F x y) (o : J₁ .Ob) → C ._∘_ (ψ y o) (r .hom) ≡ ψ x o"},{"idAnchor":"Cat.Diagram.Limit.Base.html#13246","idDesc":null,"idIdent":"Reflects-limit","idType":"(F : Functor C D) → Cone Dia → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂ ⊔ o₃ ⊔ h₃)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#11103","idDesc":null,"idIdent":"F-map-cone","idType":"(F : Functor C D) → Cone Dia → Cone (F F∘ Dia)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#17494","idDesc":null,"idIdent":"apex-iso→is-limit","idType":"(F : Functor J₁ C) (K : Cone F) (L : Limit F) →\nis-invertible C (Limit-universal F L K) → is-limit F K"},{"idAnchor":"Cat.Diagram.Limit.Base.html#9323","idDesc":null,"idIdent":"r","idType":"(F : Functor J₁ C) (F₂ : Cone-hom F y z) (G : Cone-hom F x y) →\nCone-hom F x z"},{"idAnchor":"Cat.Diagram.Limit.Base.html#9192","idDesc":null,"idIdent":"compose","idType":"(F : Functor J₁ C) →\nCone-hom F y z → Cone-hom F x y → Cone-hom F x z"},{"idAnchor":"Cat.Diagram.Limit.Base.html#10397","idDesc":null,"idIdent":"is-limit","idType":"(F : Functor J₁ C) → Cone F → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#16529","idDesc":null,"idIdent":"Cone≅→apex≅","idType":"(F : Functor J₁ C) → (Cones F ≅ X) Y → (C ≅ apex X) (apex Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#19823","idDesc":null,"idIdent":"Cone-ap-iso","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) → Cone F → Cone G"},{"idAnchor":"Cat.Diagram.Limit.Base.html#14905","idDesc":null,"idIdent":"Limiting-cone-unique","idType":"(F : Functor J₁ C) (X Y : Limit F) → (Cones F ≅ top X) (top Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#17190","idDesc":null,"idIdent":"Limit-unique","idType":"(F : Functor J₁ C) → (C ≅ apex (top X)) (apex (top Y))"},{"idAnchor":"Cat.Diagram.Limit.Base.html#6249","idDesc":null,"idIdent":"apex","idType":"Cone F → C .Ob"},{"idAnchor":"Cat.Diagram.Limit.Base.html#8447","idDesc":null,"idIdent":"Cone-hom-path","idType":"(F : Functor J₁ C) → hom f ≡ hom g → f ≡ g"},{"idAnchor":"Cat.Diagram.Limit.Base.html#10185","idDesc":null,"idIdent":"Limit-apex","idType":"(F : Functor J₁ C) → Limit F → C .Ob"},{"idAnchor":"Cat.Diagram.Limit.Base.html#11746","idDesc":null,"idIdent":"cone-hom","idType":"(F : Functor C D) (f : Cone-hom Dia X Y) →\nCone-hom (F F∘ Dia) (F-map-cone F X) (F-map-cone F Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#6271","idDesc":null,"idIdent":"ψ","idType":"(r : Cone F) (x : J₁ .Ob) → C .Hom (r .apex) (₀ F x)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#19912","idDesc":null,"idIdent":"K′","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (K : Cone F) → Cone G"},{"idAnchor":"Cat.Diagram.Limit.Base.html#9122","idDesc":null,"idIdent":"Cones","idType":"(F : Functor J₁ C) → Precategory (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂) (o₁ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#7747","idDesc":null,"idIdent":"Cone-hom","idType":"(F : Functor J₁ C) (x y : Cone F) → Type (o₁ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#13790","idDesc":null,"idIdent":"reflects-limit","idType":"Creates-limit F K → Reflects-limit F K"},{"idAnchor":"Cat.Diagram.Limit.Base.html#21057","idDesc":null,"idIdent":"uniq","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F) (K : Cones G .Ob)\n(x : Cone-hom G K (g-lim morp f-lim .top)) →\nK=>lim′ morp f-lim K ≡ x"},{"idAnchor":"Cat.Diagram.Limit.Base.html#13748","idDesc":null,"idIdent":"preserves-limit","idType":"Creates-limit F K → Preserves-limit F K"},{"idAnchor":"Cat.Diagram.Limit.Base.html#21156","idDesc":null,"idIdent":"x′","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F) (K : Cones G .Ob)\n(x : Cone-hom G K (g-lim morp f-lim .top)) →\nCone-hom F (K′ morp f-lim K) (f-lim .top)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#10142","idDesc":null,"idIdent":"Limit","idType":"(F : Functor J₁ C) → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#20589","idDesc":null,"idIdent":"K′=>lim","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F)\n(K : Cones G .Ob) →\nis-contr (Cone-hom F (K′ morp f-lim K) (f-lim .top))"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15263","idDesc":null,"idIdent":"f","idType":"(F : Functor J₁ C) (X Y : Limit F) →\nCones F .Hom (X-cone F X Y) (Y-cone F X Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15730","idDesc":null,"idIdent":"f∘g≡id","idType":"(F : Functor J₁ C) (X Y : Limit F) →\nCones F ._∘_ (f F X Y) (g F X Y) ≡ Cones F .id"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15826","idDesc":null,"idIdent":"g∘f≡id","idType":"(F : Functor J₁ C) (X Y : Limit F) →\nCones F ._∘_ (g F X Y) (f F X Y) ≡ Cones F .id"},{"idAnchor":"Cat.Diagram.Limit.Base.html#13660","idDesc":null,"idIdent":"Creates-limit","idType":"(F : Functor C D) (K : Cone Dia) →\nType (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂ ⊔ o₃ ⊔ h₃)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#7288","idDesc":null,"idIdent":"Cone-path","idType":"(F : Functor J₁ C) (p : apex x ≡ apex y) →\n((o : J₁ .Ob) →\n PathP (λ i → C .Hom (p i) (₀ F o)) (ψ x o) (ψ y o)) →\nx ≡ y"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15092","idDesc":null,"idIdent":"Y-cone","idType":"(F : Functor J₁ C) (X Y : Limit F) → Ob (Cones F)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#20675","idDesc":null,"idIdent":"K=>lim′","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F)\n(K : Cones G .Ob) →\nCone-hom G K (g-lim morp f-lim .top)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#15064","idDesc":null,"idIdent":"X-cone","idType":"(F : Functor J₁ C) (X Y : Limit F) → Ob (Cones F)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#6578","idDesc":null,"idIdent":"commutes","idType":"(r : Cone F) (f : J₁ .Hom x y) → C ._∘_ (₁ F f) (r .ψ x) ≡ r .ψ y"},{"idAnchor":"Cat.Diagram.Limit.Base.html#20526","idDesc":null,"idIdent":"K′","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F)\n(K : Cones G .Ob) →\nCone F"},{"idAnchor":"Cat.Diagram.Limit.Base.html#16807","idDesc":null,"idIdent":"Cone-invertible→apex-invertible","idType":"(F : Functor J₁ C) →\nis-invertible (Cones F) f → is-invertible C (hom f)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#8258","idDesc":null,"idIdent":"hom","idType":"Cone-hom F x y → C .Hom (apex x) (apex y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#11490","idDesc":null,"idIdent":"F-map-cone-hom","idType":"(F : Functor C D) →\nCone-hom Dia X Y →\nCone-hom (F F∘ Dia) (F-map-cone F X) (F-map-cone F Y)"},{"idAnchor":"Cat.Diagram.Limit.Base.html#20412","idDesc":null,"idIdent":"g-lim","idType":"(morp : (Cat[ J₁ , C ] ≅ F) G) (f-lim : Limit F) → Limit G"},{"idAnchor":"Cat.Diagram.Limit.Base.html#13852","idDesc":null,"idIdent":"is-continuous","idType":"Functor C D → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂ ⊔ lsuc oshape ⊔ lsuc hshape)"},{"idAnchor":"Cat.Abelian.Base.html#6619","idDesc":null,"idIdent":"has-ab","idType":"is-additive C → Ab-category C"},{"idAnchor":"Cat.Abelian.Base.html#6688","idDesc":null,"idIdent":"has-terminal","idType":"(r : is-additive C) → Terminal r"},{"idAnchor":"Cat.Abelian.Base.html#1662","idDesc":null,"idIdent":"Hom-grp","idType":"(r : Ab-category C) (A : C .Ob) → C .Ob → AbGroup ℓ"},{"idAnchor":"Cat.Abelian.Base.html#15274","idDesc":null,"idIdent":"lemma","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\n(C ∘ f)\n(has-is-coeq\n (cokernel (has-is-preab r) (kernel (has-is-preab r) f)) .coequalise\n (monic ((r ∘ id r) (0m r)) ((r ∘ id r) (kernel r f))\n  (path r f monic)))\n≡\nC ._∘_ (kernel (has-is-preab r) (coeq (has-is-preab r) f))\n(decompose r f .fst)"},{"idAnchor":"Cat.Abelian.Base.html#13099","idDesc":null,"idIdent":"is-abelian","idType":"(C : Precategory o ℓ) → Type (o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Abelian.Base.html#15482","idDesc":null,"idIdent":"path","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\n(r ∘ f)\n((r ∘\n  coequalise (cokernel (has-is-preab r) (kernel (r .has-is-preab) f))\n  (monic ((r ∘ id r) (0m r)) ((r ∘ id r) (kernel r f))\n   (path r f monic)))\n (coker-ker≃ker-coker r f .inv))\n≡ kernel (has-is-preab r) (coeq (has-is-preab r) f) .kernel"},{"idAnchor":"Cat.Abelian.Base.html#11618","idDesc":null,"idIdent":"path","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\n(r ∘ f) (kernel r f .kernel) ≡ (r ∘ f) (0m r)"},{"idAnchor":"Cat.Abelian.Base.html#1445","idDesc":null,"idIdent":"_+_","idType":"(r : Ab-category C) → Hom r A B₁ → Hom r A B₁ → Hom r A B₁"},{"idAnchor":"Cat.Abelian.Base.html#14736","idDesc":null,"idIdent":"path","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\n(r ∘ f) ((r ∘ id r) (0m r)) ≡ (r ∘ f) ((r ∘ id r) (kernel r f))"},{"idAnchor":"Cat.Abelian.Base.html#2005","idDesc":null,"idIdent":"∘map","idType":"(r : Ab-category C) →\nHom (Hom-grp r B₁ C ⊗ Hom-grp r A B₁) (Hom-grp r A C)"},{"idAnchor":"Cat.Abelian.Base.html#1608","idDesc":null,"idIdent":"Hom-grp-ab","idType":"(r : Ab-category C) (A B₁ : C .Ob) (f g : Hom C A B₁) →\nr .Group-on-hom A B₁ ._⋆_ f g ≡ r .Group-on-hom A B₁ ._⋆_ g f"},{"idAnchor":"Cat.Abelian.Base.html#11217","idDesc":null,"idIdent":"decompose","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\nΣ\n(λ f′ →\n   f ≡ (r ∘ kernel r (coeq r f)) ((r ∘ f′) (coeq r (kernel r f))))"},{"idAnchor":"Cat.Abelian.Base.html#16867","idDesc":null,"idIdent":"kc→f→kc","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\nSlice C B₁ ._∘_ (kercoker→f r f monic) (f→kercoker r f monic) ≡\nSlice C B₁ .id"},{"idAnchor":"Cat.Abelian.Base.html#1302","idDesc":null,"idIdent":"Ab-category","idType":"(C : Precategory o ℓ) → Type (o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Abelian.Base.html#1903","idDesc":null,"idIdent":"∘-linear-r","idType":"(r : Ab-category C) (f : Hom C B₁ C) (g h : Hom C A B₁) →\nr .Group-on-hom A C ._⋆_ ((C ∘ f) g) ((C ∘ f) h) ≡\n(C ∘ f) (r .Group-on-hom A B₁ ._⋆_ g h)"},{"idAnchor":"Cat.Abelian.Base.html#6716","idDesc":null,"idIdent":"has-prods","idType":"(r : is-additive C) (A B₁ : Ob C) → Product r A B₁"},{"idAnchor":"Cat.Abelian.Base.html#3063","idDesc":null,"idIdent":"∘-zero-l","idType":"(r : Ab-category C) → (r ∘ 0m r) f ≡ 0m r"},{"idAnchor":"Cat.Abelian.Base.html#6930","idDesc":null,"idIdent":"0m-unique","idType":"(r : is-additive C) → zero→ r ≡ 0m r"},{"idAnchor":"Cat.Abelian.Base.html#12272","idDesc":null,"idIdent":"path","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\n(r ∘ zero→ r) (proj′ r f) ≡ (r ∘ coeq r f) (proj′ r f)"},{"idAnchor":"Cat.Abelian.Base.html#10451","idDesc":null,"idIdent":"has-additive","idType":"is-pre-abelian C → is-additive C"},{"idAnchor":"Cat.Abelian.Base.html#16625","idDesc":null,"idIdent":"lemma","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\n(C ∘\n cokernel (has-is-preab r) (kernel (has-is-preab r) f .kernel)\n .coeq)\n(has-is-coeq\n (cokernel (has-is-preab r) (kernel (has-is-preab r) f .kernel))\n .coequalise\n (monic ((r ∘ id r) (0m r)) ((r ∘ id r) (kernel r f))\n  (path r f monic)))\n≡ id C"},{"idAnchor":"Cat.Abelian.Base.html#4364","idDesc":null,"idIdent":"∘-minus-r","idType":"(r : Ab-category C) (f : Hom r B₁ C) (g h : Hom r A B₁) →\n(r - (r ∘ f) g) ((r ∘ f) h) ≡ (r ∘ f) ((r - g) h)"},{"idAnchor":"Cat.Abelian.Base.html#12707","idDesc":null,"idIdent":"path","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\n(has-ab (has-additive r) ∘ kernel r (cokernel r f .coeq) .kernel)\n((has-ab (has-additive r) ∘ map r f)\n (cokernel r (kernel r f .kernel) .coeq))\n≡ f"},{"idAnchor":"Cat.Abelian.Base.html#3847","idDesc":null,"idIdent":"neg-∘-r","idType":"(r : Ab-category C) → inverse r ((r ∘ g) h) ≡ (r ∘ g) (inverse r h)"},{"idAnchor":"Cat.Abelian.Base.html#3594","idDesc":null,"idIdent":"neg-∘-l","idType":"(r : Ab-category C) → inverse r ((r ∘ g) h) ≡ (r ∘ inverse r g) h"},{"idAnchor":"Cat.Abelian.Base.html#16117","idDesc":null,"idIdent":"mono→kernel","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\n(Slice C B₁ ≅ cut f) (cut (kernel r (coeq r f)))"},{"idAnchor":"Cat.Abelian.Base.html#1800","idDesc":null,"idIdent":"∘-linear-l","idType":"(r : Ab-category C) (f g : Hom C B₁ C) (h : Hom C A B₁) →\nr .Group-on-hom A C ._⋆_ ((C ∘ f) h) ((C ∘ g) h) ≡\n(C ∘ r .Group-on-hom B₁ C ._⋆_ f g) h"},{"idAnchor":"Cat.Abelian.Base.html#14492","idDesc":null,"idIdent":"kercoker→f","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\nSlice C B₁ .Hom (cut (kernel r (coeq r f))) (cut f)"},{"idAnchor":"Cat.Abelian.Base.html#7897","idDesc":null,"idIdent":"coprod","idType":"(r : is-additive C) (A B₁ : Ob C) → Coproduct r A B₁"},{"idAnchor":"Cat.Abelian.Base.html#10583","idDesc":null,"idIdent":"cokernel","idType":"(r : is-pre-abelian C) (f : Hom (r .has-additive) A B₁) →\nCoequaliser r (0m r) f"},{"idAnchor":"Cat.Abelian.Base.html#6545","idDesc":null,"idIdent":"is-additive","idType":"(C : Precategory o ℓ) → Type (o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Abelian.Base.html#9597","idDesc":null,"idIdent":"lemma","idType":"(r : is-additive C) (A B₁ : Ob C)\n(other : Hom C (coprod r A B₁ .coapex) Q)\n(p : (C ∘ other) (coprod r A B₁ .in₀) ≡ inj0)\n(q : (C ∘ other) (coprod r A B₁ .in₁) ≡ inj1) →\n(r +\n (r ∘ ⟨ has-prods r A B₁ , id r ⟩ (0m r)) (has-prods r A B₁ .π₁))\n((r ∘ ⟨ has-prods r A B₁ , 0m r ⟩ (id r)) (has-prods r A B₁ .π₂))\n≡ id r"},{"idAnchor":"Cat.Abelian.Base.html#7741","idDesc":null,"idIdent":"has-coprods","idType":"(r : is-additive C) (A B₁ : Ob C) → Coproduct r A B₁"},{"idAnchor":"Cat.Abelian.Base.html#1400","idDesc":null,"idIdent":"Group-on-hom","idType":"Ab-category C → (A B₁ : C .Ob) → Group-on (Hom C A B₁)"},{"idAnchor":"Cat.Abelian.Base.html#10531","idDesc":null,"idIdent":"kernel","idType":"(r : is-pre-abelian C) (f : Hom (r .has-additive) A B₁) →\nKernel C (∅ r) f"},{"idAnchor":"Cat.Abelian.Base.html#11830","idDesc":null,"idIdent":"map","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\nHom r (coapex r (kernel r f)) (ker r (coeq r f))"},{"idAnchor":"Cat.Abelian.Base.html#2648","idDesc":null,"idIdent":"∘-zero-r","idType":"(r : Ab-category C) → (r ∘ f) (0m r) ≡ 0m r"},{"idAnchor":"Cat.Abelian.Base.html#6754","idDesc":null,"idIdent":"∅","idType":"(r : is-additive C) → Zero r"},{"idAnchor":"Cat.Abelian.Base.html#5913","idDesc":null,"idIdent":"Ab-ab-category","idType":"Ab-category (Ab ℓ)"},{"idAnchor":"Cat.Abelian.Base.html#13258","idDesc":null,"idIdent":"coker-ker≃ker-coker","idType":"(r : is-abelian C) (f : Hom (r .has-is-preab) A B₁) →\nis-invertible r (decompose r f .fst)"},{"idAnchor":"Cat.Abelian.Base.html#4893","idDesc":null,"idIdent":"id-zero→zero","idType":"(A : Ab-category C) → id A ≡ 0m A → is-zero A A₁"},{"idAnchor":"Cat.Abelian.Base.html#13962","idDesc":null,"idIdent":"f→kercoker","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\nSlice C B₁ .Hom (cut f) (cut (kernel r (coeq r f)))"},{"idAnchor":"Cat.Abelian.Base.html#1533","idDesc":null,"idIdent":"0m","idType":"(r : Ab-category C) → Hom r A B₁"},{"idAnchor":"Cat.Abelian.Base.html#10374","idDesc":null,"idIdent":"is-pre-abelian","idType":"(C : Precategory o ℓ) → Type (o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Abelian.Base.html#16251","idDesc":null,"idIdent":"f→kc→f","idType":"(r : is-abelian C) (f : Hom r A B₁) (monic : is-monic r f) →\nSlice C B₁ ._∘_ (f→kercoker r f monic) (kercoker→f r f monic) ≡\nSlice C B₁ .id"},{"idAnchor":"Cat.Abelian.Base.html#13172","idDesc":null,"idIdent":"has-is-preab","idType":"is-abelian C → is-pre-abelian C"},{"idAnchor":"Cat.Abelian.Base.html#11457","idDesc":null,"idIdent":"proj′","idType":"(r : is-pre-abelian C) (f : Hom r A B₁) →\nHom r (coapex r (kernel r f)) B₁"},{"idAnchor":"Cat.Abelian.Base.html#4100","idDesc":null,"idIdent":"∘-minus-l","idType":"(r : Ab-category C) (f g : Hom r B₁ C) (h : Hom r A B₁) →\n(r - (r ∘ f) h) ((r ∘ g) h) ≡ (r ∘ (r - f) g) h"},{"idAnchor":"1Lab.Reflection.Variables.html#2026","idDesc":null,"idIdent":"empty-vars","idType":"Variables A"},{"idAnchor":"1Lab.Reflection.Variables.html#1601","idDesc":null,"idIdent":"Env","idType":"Type ℓ → Nat → Type ℓ"},{"idAnchor":"1Lab.Reflection.Variables.html#2352","idDesc":null,"idIdent":"fin-term","idType":"Nat → Term"},{"idAnchor":"1Lab.Reflection.Variables.html#1645","idDesc":null,"idIdent":"[]","idType":"Env A zero"},{"idAnchor":"1Lab.Reflection.Variables.html#1713","idDesc":null,"idIdent":"Variables","idType":"(A : Type a) → Type a"},{"idAnchor":"1Lab.Reflection.Variables.html#1926","idDesc":null,"idIdent":"variables","idType":"Variables A → Term → Maybe Term"},{"idAnchor":"1Lab.Reflection.Variables.html#1795","idDesc":null,"idIdent":"nvars","idType":"Variables A → Nat"},{"idAnchor":"1Lab.Reflection.Variables.html#1663","idDesc":null,"idIdent":"_▷_","idType":"Env A n → A → Env A (suc n)"},{"idAnchor":"1Lab.Reflection.Variables.html#2497","idDesc":null,"idIdent":"env-rec","idType":"(Mot : Nat → Type b) →\n(Mot n → A → Mot (suc n)) → Mot zero → Env A n → Mot n"},{"idAnchor":"1Lab.Reflection.Variables.html#3280","idDesc":null,"idIdent":"environment","idType":"Variables A → TC (Term × Term)"},{"idAnchor":"1Lab.Reflection.Variables.html#1769","idDesc":null,"idIdent":"mk-variables","idType":"(bound : Env A nvars) (variables : Term → Maybe Term) → Variables A"},{"idAnchor":"1Lab.Reflection.Variables.html#1902","idDesc":null,"idIdent":"bound","idType":"(r : Variables A) → Env A (r .nvars)"},{"idAnchor":"1Lab.Reflection.Variables.html#2737","idDesc":null,"idIdent":"reverse","idType":"Env A n → Vec A n"},{"idAnchor":"1Lab.Reflection.Variables.html#2107","idDesc":null,"idIdent":"bind","idType":"Term → Term → (Term → Maybe Term) → Term → Maybe Term"},{"idAnchor":"1Lab.Reflection.Variables.html#2967","idDesc":null,"idIdent":"bind-var","idType":"Variables A → Term → TC (Term × Variables A)"},{"idAnchor":"Cat.Functor.Adjoint.html#8483","idDesc":null,"idIdent":"L-∘","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(f : C .Hom y z) (g : C .Hom x y) →\nL₁ R₁ universal-map-for (C ._∘_ f g) ≡\nD ._∘_ (L₁ R₁ universal-map-for f) (L₁ R₁ universal-map-for g)"},{"idAnchor":"Cat.Functor.Adjoint.html#2342","idDesc":null,"idIdent":"unit","idType":"L ⊣ R₁ → Id => R₁ F∘ L"},{"idAnchor":"Cat.Functor.Adjoint.html#18337","idDesc":null,"idIdent":"R-adjunct","idType":"(adj : L ⊣ R₁) → C .Hom a (₀ R₁ b) → D .Hom (₀ L a) b"},{"idAnchor":"Cat.Functor.Adjoint.html#6484","idDesc":null,"idIdent":"L₀","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nC .Ob → D .Ob"},{"idAnchor":"Cat.Functor.Adjoint.html#19443","idDesc":null,"idIdent":"L-adjunct-is-equiv","idType":"(adj : L ⊣ R₁) → is-equiv (L-adjunct adj)"},{"idAnchor":"Cat.Functor.Adjoint.html#2370","idDesc":null,"idIdent":"counit","idType":"L ⊣ R₁ → L F∘ R₁ => Id"},{"idAnchor":"Cat.Functor.Adjoint.html#6546","idDesc":null,"idIdent":"L₀′","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(c : C .Ob) →\nC .Hom c (₀ R₁ (L₀ R₁ universal-map-for c))"},{"idAnchor":"Cat.Functor.Adjoint.html#5472","idDesc":null,"idIdent":"Universal-morphism","idType":"C .Ob → Functor D C → Type (h ⊔ o' ⊔ h')"},{"idAnchor":"Cat.Functor.Adjoint.html#7614","idDesc":null,"idIdent":"L-id","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nL₁ R₁ universal-map-for (C .id) ≡ D .id"},{"idAnchor":"Cat.Functor.Adjoint.html#549","idDesc":null,"idIdent":"adj-level","idType":"Precategory o₁ h₁ → Precategory o₂ h₂ → Level"},{"idAnchor":"Cat.Functor.Adjoint.html#18614","idDesc":null,"idIdent":"L-R-adjunct","idType":"(adj : L ⊣ R₁) → is-right-inverse (R-adjunct adj) (L-adjunct adj)"},{"idAnchor":"Cat.Functor.Adjoint.html#17320","idDesc":null,"idIdent":"L⊣R→universal-maps","idType":"L ⊣ R₁ → (x : C .Ob) → Universal-morphism x R₁"},{"idAnchor":"Cat.Functor.Adjoint.html#13603","idDesc":null,"idIdent":"L","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nFunctor C D"},{"idAnchor":"Cat.Functor.Adjoint.html#7160","idDesc":null,"idIdent":"lift↓","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(g : C .Hom x y) →\nHom (x ↙ R₁) (universal-map-for x .bot)\n(to-ob R₁ universal-map-for g)"},{"idAnchor":"Cat.Functor.Adjoint.html#19589","idDesc":null,"idIdent":"R-adjunct-is-equiv","idType":"(adj : L ⊣ R₁) → is-equiv (R-adjunct adj)"},{"idAnchor":"Cat.Functor.Adjoint.html#13583","idDesc":null,"idIdent":"α","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nC .Hom x (₀ R₁ (L₀ R₁ universal-map-for x))"},{"idAnchor":"Cat.Functor.Adjoint.html#2943","idDesc":null,"idIdent":"zig","idType":"(r : L ⊣ R₁) →\nD ._∘_ (η (r .counit) (F₀ L A)) (F₁ L (r .unit .η A)) ≡ D .id"},{"idAnchor":"Cat.Functor.Adjoint.html#7324","idDesc":null,"idIdent":"L₁","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nC .Hom a b →\nD .Hom (L₀ R₁ universal-map-for a) (L₀ R₁ universal-map-for b)"},{"idAnchor":"Cat.Functor.Adjoint.html#14588","idDesc":null,"idIdent":"L⊣R→map-to-R","idType":"L ⊣ R₁ → (x : C .Ob) → Ob (x ↙ R₁)"},{"idAnchor":"Cat.Functor.Adjoint.html#3006","idDesc":null,"idIdent":"zag","idType":"(r : L ⊣ R₁) →\nC ._∘_ (F₁ R₁ (η (r .counit) B₁)) (r .unit .η (F₀ R₁ B₁)) ≡ C .id"},{"idAnchor":"Cat.Functor.Adjoint.html#2192","idDesc":null,"idIdent":"_⊣_","idType":"(L : Functor C D) (R₁ : Functor D C) → Type (C.o ⊔ C.h ⊔ D.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Adjoint.html#15615","idDesc":null,"idIdent":"L⊣R→map-to-R-is-initial","idType":"(adj : L ⊣ R₁) (x : C .Ob) →\nis-initial (x ↙ R₁) (L⊣R→map-to-R adj x)"},{"idAnchor":"Cat.Functor.Adjoint.html#7876","idDesc":null,"idIdent":"lemma","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(f : C .Hom y z) (g : C .Hom x y) →\nC ._∘_\n(₁ R₁\n (D ._∘_ (L₁ R₁ universal-map-for f) (L₁ R₁ universal-map-for g)))\n(L₀′ R₁ universal-map-for x)\n≡ C ._∘_ (to-ob R₁ universal-map-for (C ._∘_ f g) .map) (C .id)"},{"idAnchor":"Cat.Functor.Adjoint.html#9558","idDesc":null,"idIdent":"mapd","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(x : C .Ob) →\nOb (x ↙ R₁)"},{"idAnchor":"Cat.Functor.Adjoint.html#18239","idDesc":null,"idIdent":"L-adjunct","idType":"(adj : L ⊣ R₁) → D .Hom (₀ L a) b → C .Hom a (₀ R₁ b)"},{"idAnchor":"Cat.Functor.Adjoint.html#7050","idDesc":null,"idIdent":"to-ob","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nC .Hom a b → (a ↙ R₁) .Ob"},{"idAnchor":"Cat.Functor.Adjoint.html#10824","idDesc":null,"idIdent":"universal-maps→L⊣R","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nuniversal-maps→L R₁ universal-map-for ⊣ R₁"},{"idAnchor":"Cat.Functor.Adjoint.html#10372","idDesc":null,"idIdent":"ε","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁)\n(x : D .Ob) →\nHom (₀ R₁ x ↙ R₁) (mapd R₁ universal-map-for (₀ R₁ x))\n(record { map = C .id })"},{"idAnchor":"Cat.Functor.Adjoint.html#19989","idDesc":null,"idIdent":"opposite-adjunction","idType":"(adj : L ⊣ R₁) → op R₁ ⊣ op L"},{"idAnchor":"Cat.Functor.Adjoint.html#19027","idDesc":null,"idIdent":"R-L-adjunct","idType":"(adj : L ⊣ R₁) → is-left-inverse (R-adjunct adj) (L-adjunct adj)"},{"idAnchor":"Cat.Functor.Adjoint.html#8808","idDesc":null,"idIdent":"universal-maps→L","idType":"(R₁ : Functor D C)\n(universal-map-for : (c : C .Ob) → Universal-morphism c R₁) →\nFunctor C D"},{"idAnchor":"Cat.Diagram.Limit.Product.html#995","idDesc":null,"idIdent":".extendedlambda0","idType":"(C : Precategory o h) → Ob C → Ob C → Bool → Ob C"},{"idAnchor":"Cat.Diagram.Limit.Product.html#2001","idDesc":null,"idIdent":"Prod→Lim","idType":"(C : Precategory o h) →\nProduct C A B₁ → Limit (2-object-diagram C A B₁)"},{"idAnchor":"Cat.Diagram.Limit.Product.html#3480","idDesc":null,"idIdent":"p","idType":"(C : Precategory o h) (F : Functor (Disc′ (Bool , iss)) C)\n(x : Disc′ (Bool , iss) .Ob) →\nF₀ F x ≡ F₀ (2-object-diagram C (F₀ F false) (F₀ F true)) x"},{"idAnchor":"Cat.Diagram.Limit.Product.html#2475","idDesc":null,"idIdent":"Lim→Prod","idType":"(C : Precategory o h) →\nLimit (2-object-diagram C A B₁) → Product C A B₁"},{"idAnchor":"Cat.Diagram.Limit.Product.html#875","idDesc":null,"idIdent":"2-object-diagram","idType":"(C : Precategory o h) →\nOb C → Ob C → Functor (Disc′ (Bool , iss)) C"},{"idAnchor":"Cat.Diagram.Limit.Product.html#3529","idDesc":null,"idIdent":"q","idType":"(C : Precategory o h) (F : Functor (Disc′ (Bool , iss)) C)\n(f : x ≡ y) →\nPathP (λ i → C .Hom (p C F x i) (p C F y i)) (F₁ F f)\n(F₁ (2-object-diagram C (F₀ F false) (F₀ F true)) f)"},{"idAnchor":"Cat.Diagram.Limit.Product.html#3018","idDesc":null,"idIdent":"other","idType":"(C : Precategory o h) (x : Limit (2-object-diagram C A B₁))\n(f : Hom C Q (Lim→Prod C x .apex))\n(p : (C ∘ Lim→Prod C x .π₁) f ≡ p1)\n(q : (C ∘ Lim→Prod C x .π₂) f ≡ p2) →\nCone-hom (2-object-diagram C A B₁) (Pair→Cone C p1 p2) (x .top)"},{"idAnchor":"Cat.Diagram.Limit.Product.html#1365","idDesc":null,"idIdent":"Pair→Cone","idType":"(C : Precategory o h) →\nHom C Q A → Hom C Q B₁ → Cone (2-object-diagram C A B₁)"},{"idAnchor":"Cat.Diagram.Limit.Product.html#3302","idDesc":null,"idIdent":"canonical-functors","idType":"(C : Precategory o h) (F : Functor (Disc′ (Bool , iss)) C) →\nF ≡ 2-object-diagram C (F₀ F false) (F₀ F true)"},{"idAnchor":"Algebra.Group.Cat.Base.html#1003","idDesc":null,"idIdent":"fogh","idType":"(ℓ : Level) (f : y .fst → z .fst) (fh : Group-hom y z f)\n(g : x .fst → y .fst) (gh : Group-hom x y g) →\nGroup-hom x z (λ x → f (g x))"},{"idAnchor":"Algebra.Group.Cat.Base.html#3756","idDesc":null,"idIdent":"isic","idType":"is-iso\n(λ z →\n   record\n   { to = z .fst .fst , z .snd\n   ; from =\n       make-iso (Groups ℓ) (z .fst .fst , z .snd)\n       (equiv→inverse (z .fst .snd) ,\n        inv-group-hom (z .fst .fst) (z .fst .snd) (z .snd))\n       (Forget-is-faithful (funext (equiv→section (z .fst .snd))))\n       (Forget-is-faithful (funext (equiv→retraction (z .fst .snd))))\n       .from\n   ; inverses =\n       make-iso (Groups ℓ) (z .fst .fst , z .snd)\n       (equiv→inverse (z .fst .snd) ,\n        inv-group-hom (z .fst .fst) (z .fst .snd) (z .snd))\n       (Forget-is-faithful (funext (equiv→section (z .fst .snd))))\n       (Forget-is-faithful (funext (equiv→retraction (z .fst .snd))))\n       .inverses\n   })"},{"idAnchor":"Algebra.Group.Cat.Base.html#544","idDesc":null,"idIdent":"c","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Group.Cat.Base.html#1711","idDesc":null,"idIdent":"Forget","idType":"Functor (Groups ℓ) (Sets ℓ)"},{"idAnchor":"Algebra.Group.Cat.Base.html#4240","idDesc":null,"idIdent":"Groups-is-category","idType":"is-category (Groups ℓ)"},{"idAnchor":"Algebra.Group.Cat.Base.html#4355","idDesc":null,"idIdent":"eqv","idType":"(A ≡ B₁) ≃ (A ≅ B₁)"},{"idAnchor":"Algebra.Group.Cat.Base.html#4778","idDesc":null,"idIdent":"fm","idType":"(f : Hom A B₁) (inj : injective (f .fst))\n(g h : Hom (Groups ℓ) c A)\n(p : (Groups ℓ ∘ f) g ≡ (Groups ℓ ∘ f) h) (g₁ h₁ : C → A .fst) →\nf .fst ⊙ g₁ ≡ f .fst ⊙ h₁ → g₁ ≡ h₁"},{"idAnchor":"Algebra.Group.Cat.Base.html#1867","idDesc":null,"idIdent":"Forget-is-faithful","idType":"is-faithful Forget"},{"idAnchor":"Algebra.Group.Cat.Base.html#3317","idDesc":null,"idIdent":"inv-group-hom","idType":"(f : A .fst → B₁ .fst) (eqv : is-equiv f)\n(grh : Group≃ A B₁ (f , eqv)) →\nGroup-hom B₁ A (g f eqv grh)"},{"idAnchor":"Algebra.Group.Cat.Base.html#4547","idDesc":null,"idIdent":"injective-group-hom","idType":"(f : Hom A B₁) → injective (f .fst) → is-monic f"},{"idAnchor":"Algebra.Group.Cat.Base.html#432","idDesc":null,"idIdent":"Groups","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Group.Cat.Base.html#3251","idDesc":null,"idIdent":"g","idType":"(f : A .fst → B₁ .fst) (eqv : is-equiv f)\n(grh : Group≃ A B₁ (f , eqv)) →\nB₁ .fst → A .fst"},{"idAnchor":"Algebra.Group.Cat.Base.html#2446","idDesc":null,"idIdent":"Group-equiv≃Groups-iso","idType":"Σ (Group≃ A B₁) ≃ (A ≅ B₁)"},{"idAnchor":"Cat.Displayed.Instances.Family.html#2711","idDesc":null,"idIdent":"cart","idType":"(C : Precategory o h) (f : ∣ x ∣ → ∣ y ∣)\n(y′ : Functor (Disc′ y) C) →\nCartesian (Family C) f idnt"},{"idAnchor":"Cat.Displayed.Instances.Family.html#3009","idDesc":null,"idIdent":"iscart","idType":"(C : Precategory o h) → Cartesian-fibration (Family C)"},{"idAnchor":"Cat.Displayed.Instances.Family.html#771","idDesc":null,"idIdent":"Family","idType":"(C : Precategory o h) → Displayed (Sets ℓ) (o ⊔ h ⊔ ℓ) (h ⊔ ℓ)"},{"idAnchor":"Cat.Displayed.Instances.Family.html#1749","idDesc":null,"idIdent":"comm","idType":"(C : Precategory o h) (f : Family C .Hom[_] F Y Z)\n(g : Family C .Hom[_] G X Y) (x y : Disc′ A .Ob) (h : x ≡ y) →\n(C ∘ (C ∘ f .η (F₀ (lift-disc G) y)) (g .η y)) (F₁ X h) ≡\n(C ∘ F₁ (Z F∘ lift-disc (λ v → F (F₀ (lift-disc G) v))) h)\n((C ∘ f .η (F₀ (lift-disc G) x)) (g .η x))"},{"idAnchor":"Cat.Displayed.Instances.Family.html#2607","idDesc":null,"idIdent":"Family-is-cartesian","idType":"(C : Precategory o h) → Cartesian-fibration (Family C)"},{"idAnchor":"Agda.Builtin.FromNat.html#170","idDesc":null,"idIdent":"Number","idType":"(A : Type a) → Type (lsuc a)"},{"idAnchor":"Agda.Builtin.FromNat.html#255","idDesc":null,"idIdent":"fromNat","idType":"(r : Number A) (n : Nat) ⦃ _ : Constraint r n ⦄ → A"},{"idAnchor":"Agda.Builtin.FromNat.html#226","idDesc":null,"idIdent":"Constraint","idType":"Number A → Nat → Type a"},{"idAnchor":"Cat.Functor.Base.html#1706","idDesc":null,"idIdent":"img-is-prop","idType":"(F : Functor C D) →\nis-full F →\nis-faithful F →\n(f : Hom D (F .F₀ x) (F .F₀ y)) → is-prop (fibre (F₁ F) f)"},{"idAnchor":"Cat.Functor.Base.html#5109","idDesc":null,"idIdent":"is-eso","idType":"Functor C D → Type (C.o ⊔ D.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Base.html#3086","idDesc":null,"idIdent":"Fgof","idType":"(ff : is-fully-faithful F) (f : C .Hom X Y)\n(isinv : is-invertible D (F₁ F f)) →\nF₁ F (C ._∘_ (g ff f isinv) f) ≡ id D"},{"idAnchor":"Cat.Functor.Base.html#4625","idDesc":null,"idIdent":"Essential-fibre","idType":"Functor C D → D .Ob → Type (C.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Base.html#1553","idDesc":null,"idIdent":"full+faithful→ff","idType":"(F : Functor C D) → is-full F → is-faithful F → is-fully-faithful F"},{"idAnchor":"Cat.Functor.Base.html#1212","idDesc":null,"idIdent":"fully-faithful→faithful","idType":"is-fully-faithful F → is-faithful F"},{"idAnchor":"Cat.Functor.Base.html#3259","idDesc":null,"idIdent":"i","idType":"(ff : is-fully-faithful F) (f : C .Hom X Y)\n(isinv : is-invertible D (F₁ F f)) →\nis-invertible C f"},{"idAnchor":"Cat.Functor.Base.html#6673","idDesc":null,"idIdent":"isom","idType":"(ff : is-fully-faithful F) →\nis-iso\n(λ z →\n   record\n   { to = F₁ F (z .to)\n   ; from =\n       make-iso D (F₁ F (to z)) (F₁ F (from z))\n       (sym (F-∘ F (z .to) (z .from)) ·· ap (F₁ F) (inverses z .invl) ··\n        F-id F)\n       (sym (F-∘ F (z .from) (z .to)) ·· ap (F₁ F) (inverses z .invr) ··\n        F-id F)\n       .from\n   ; inverses =\n       make-iso D (F₁ F (to z)) (F₁ F (from z))\n       (sym (F-∘ F (z .to) (z .from)) ·· ap (F₁ F) (inverses z .invl) ··\n        F-id F)\n       (sym (F-∘ F (z .from) (z .to)) ·· ap (F₁ F) (inverses z .invr) ··\n        F-id F)\n       .inverses\n   })"},{"idAnchor":"Cat.Functor.Base.html#4184","idDesc":null,"idIdent":"D-inv","idType":"(ff : is-fully-faithful F) (to₁ : Hom D (F₀ F X) (F₀ F Y))\n(from₁ : Hom D (F₀ F Y) (F₀ F X))\n(inverses₁ : Inverses D to₁ from₁) →\nis-invertible D to₁"},{"idAnchor":"Cat.Functor.Base.html#5029","idDesc":null,"idIdent":"is-split-eso","idType":"Functor C D → Type (C.o ⊔ D.o ⊔ D.h)"},{"idAnchor":"Cat.Functor.Base.html#666","idDesc":null,"idIdent":"is-faithful","idType":"Functor C D → Type (C.o ⊔ C.h ⊔ D.h)"},{"idAnchor":"Cat.Functor.Base.html#2839","idDesc":null,"idIdent":"g","idType":"(ff : is-fully-faithful F) (f : C .Hom X Y)\n(isinv : is-invertible D (F₁ F f)) →\nC .Hom Y X"},{"idAnchor":"Cat.Functor.Base.html#3890","idDesc":null,"idIdent":"is-ff→essentially-injective","idType":"is-fully-faithful F → (D ≅ F₀ F X) (F₀ F Y) → (C ≅ X) Y"},{"idAnchor":"Cat.Functor.Base.html#1863","idDesc":null,"idIdent":"p","idType":"(F : Functor C D) →\nis-full F →\nis-faithful F →\n(f : Hom D (F .F₀ x) (F .F₀ y)) → is-contr (fibre (F₁ F) f)"},{"idAnchor":"Cat.Functor.Base.html#1110","idDesc":null,"idIdent":"is-fully-faithful","idType":"Functor C D → Type (C.o ⊔ C.h ⊔ D.h)"},{"idAnchor":"Cat.Functor.Base.html#2913","idDesc":null,"idIdent":"Ffog","idType":"(ff : is-fully-faithful F) (f : C .Hom X Y)\n(isinv : is-invertible D (F₁ F f)) →\nF₁ F (C ._∘_ f (g ff f isinv)) ≡ id D"},{"idAnchor":"Cat.Functor.Base.html#5322","idDesc":null,"idIdent":"F-map-iso","idType":"(F : Functor C D) → (C ≅ x) y → (D ≅ F₀ F x) (F₀ F y)"},{"idAnchor":"Cat.Functor.Base.html#6484","idDesc":null,"idIdent":"is-ff→F-map-iso-is-equiv","idType":"is-fully-faithful F → is-equiv (F-map-iso F)"},{"idAnchor":"Cat.Functor.Base.html#5995","idDesc":null,"idIdent":"idc","idType":"(F : Functor C D) →\n(C ≅ x) y →\n(ccat : is-category C) (dcat : is-category D) →\nap (F₀ F) (iso→path C ccat (id-iso C)) ≡\niso→path D dcat (F-map-iso F (id-iso C))"},{"idAnchor":"Cat.Functor.Base.html#5618","idDesc":null,"idIdent":"F-map-path","idType":"(F : Functor C D) (i : (C ≅ x) y) (ccat : is-category C)\n(dcat : is-category D) →\nap (F₀ F) (iso→path C ccat i) ≡ iso→path D dcat (F-map-iso F i)"},{"idAnchor":"Cat.Functor.Base.html#2445","idDesc":null,"idIdent":"is-ff→is-conservative","idType":"is-fully-faithful F →\n(f : C .Hom X Y) → is-invertible D (F₁ F f) → is-invertible C f"},{"idAnchor":"Cat.Functor.Base.html#449","idDesc":null,"idIdent":"is-full","idType":"Functor C D → Type (C.o ⊔ C.h ⊔ D.h)"},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#2671","idDesc":null,"idIdent":"is-monadic","idType":"(L⊣R : L ⊣ R₁) → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂)"},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#1318","idDesc":null,"idIdent":"Comparison","idType":"(L⊣R : L ⊣ R₁) → Functor D (Eilenberg-Moore C (L∘R L⊣R))"},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#1404","idDesc":null,"idIdent":"alg","idType":"(L⊣R : L ⊣ R₁) (x : D .Ob) → Algebra-on C (L∘R L⊣R) (₀ R₁ x)"},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#2019","idDesc":null,"idIdent":"hom","idType":"(L⊣R : L ⊣ R₁) (x : D .Hom x₁ y) →\nAlgebra-hom C (L∘R L⊣R) (F₀ R₁ x₁ , alg L⊣R x₁)\n(F₀ R₁ y , alg L⊣R y)"},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#1036","idDesc":null,"idIdent":"L∘R","idType":"(L⊣R : L ⊣ R₁) → Monad C"},{"idAnchor":"Data.Nat.Solver.html#21880","idDesc":null,"idIdent":"expand-macro","idType":"Nat → Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#3058","idDesc":null,"idIdent":"lookup","idType":"Vec A n → Fin n → A"},{"idAnchor":"Data.Nat.Solver.html#16030","idDesc":null,"idIdent":"↓_","idType":"Expr n → Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#10115","idDesc":null,"idIdent":"⟦q⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#3676","idDesc":null,"idIdent":"commute-last","idType":"(x y z : Nat) → x * y * z ≡ x * z * y"},{"idAnchor":"Data.Nat.Solver.html#13281","idDesc":null,"idIdent":"⟦p*⟨qx+s⟩+r*q⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#21570","idDesc":null,"idIdent":"repr!","idType":"Nat → Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#1629","idDesc":null,"idIdent":"Poly","idType":"Type a → Nat → Type a"},{"idAnchor":"Data.Nat.Solver.html#18867","idDesc":null,"idIdent":"build-expr","idType":"Variables Nat → Term → TC (Term × Variables Nat)"},{"idAnchor":"Data.Nat.Solver.html#14101","idDesc":null,"idIdent":"⟦r⟧","idType":"(r : Poly Nat n) (p : Poly Nat (suc n)) (q : Poly Nat n) (x₀ : Nat)\n(env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#5371","idDesc":null,"idIdent":"constₚ","idType":"Nat → Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#10747","idDesc":null,"idIdent":"sound-*ₚ′","idType":"(p : Poly Nat n) (q : Poly Nat (suc n)) (x₀ : Nat)\n(env : Vec Nat n) →\n⟦ p *ₚ′ q ⟧ₚ (x₀ ∷ env) ≡ ⟦ p ⟧ₚ env * ⟦ q ⟧ₚ (x₀ ∷ env)"},{"idAnchor":"Data.Nat.Solver.html#7884","idDesc":null,"idIdent":"block","idType":"Nat → Nat"},{"idAnchor":"Data.Nat.Solver.html#13396","idDesc":null,"idIdent":"⟦r*q⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#20122","idDesc":null,"idIdent":"″expand″","idType":"Term → Term → Term"},{"idAnchor":"Data.Nat.Solver.html#15275","idDesc":null,"idIdent":"_‵+_","idType":"Expr n → Expr n → Expr n"},{"idAnchor":"Data.Nat.Solver.html#10094","idDesc":null,"idIdent":"⟦r⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#17947","idDesc":null,"idIdent":"expand","idType":"Expr n → Vec Nat n → Nat"},{"idAnchor":"Data.Nat.Solver.html#15176","idDesc":null,"idIdent":"‵lit","idType":"Nat → Expr n"},{"idAnchor":"Data.Nat.Solver.html#5150","idDesc":null,"idIdent":"0ₚ","idType":"Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#14122","idDesc":null,"idIdent":"⟦p⟧","idType":"(r : Poly Nat n) (p : Poly Nat (suc n)) (q : Poly Nat n) (x₀ : Nat)\n(env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#15126","idDesc":null,"idIdent":"Expr","idType":"Nat → Type"},{"idAnchor":"Data.Nat.Solver.html#15152","idDesc":null,"idIdent":"‵0","idType":"Expr n"},{"idAnchor":"Data.Nat.Solver.html#11417","idDesc":null,"idIdent":"⟦r⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (x₀ : Nat)\n(env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#13432","idDesc":null,"idIdent":"⟦p⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#10143","idDesc":null,"idIdent":"⟦s⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#20739","idDesc":null,"idIdent":"don't-reduce","idType":"List Name"},{"idAnchor":"Data.Nat.Solver.html#16527","idDesc":null,"idIdent":"sound","idType":"(e : Expr n) (env : Vec Nat n) → ⟦ ↓ e ⟧ₚ env ≡ ⟦ e ⟧ₑ env"},{"idAnchor":"Data.Nat.Solver.html#15466","idDesc":null,"idIdent":"⟦_⟧ₑ","idType":"Expr n → Vec Nat n → Nat"},{"idAnchor":"Data.Nat.Solver.html#9382","idDesc":null,"idIdent":"sound-+ₚ","idType":"(p q : Poly Nat n) (env : Vec Nat n) →\n⟦ p +ₚ q ⟧ₚ env ≡ ⟦ p ⟧ₚ env + ⟦ q ⟧ₚ env"},{"idAnchor":"Data.Nat.Solver.html#7927","idDesc":null,"idIdent":"⟦_⟧ₚ","idType":"Poly Nat n → Vec Nat n → Nat"},{"idAnchor":"Data.Nat.Solver.html#13509","idDesc":null,"idIdent":"⟦s⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#22149","idDesc":null,"idIdent":"expand!","idType":"Nat → Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#8346","idDesc":null,"idIdent":"sound-0ₚ","idType":"(env : Vec Nat n) → ⟦ 0ₚ ⟧ₚ env ≡ 0"},{"idAnchor":"Data.Nat.Solver.html#23207","idDesc":null,"idIdent":"solve!","idType":"Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#15317","idDesc":null,"idIdent":"_‵*_","idType":"Expr n → Expr n → Expr n"},{"idAnchor":"Data.Nat.Solver.html#20982","idDesc":null,"idIdent":"repr-macro","idType":"Nat → Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#10066","idDesc":null,"idIdent":"⟦p⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#2151","idDesc":null,"idIdent":"zerop","idType":"Poly A (suc n)"},{"idAnchor":"Data.Nat.Solver.html#11389","idDesc":null,"idIdent":"⟦p⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (x₀ : Nat)\n(env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#2904","idDesc":null,"idIdent":"_*X+_","idType":"Poly A (suc n) → Poly A n → Poly A (suc n)"},{"idAnchor":"Data.Nat.Solver.html#17590","idDesc":null,"idIdent":"solve","idType":"(e₁ e₂ : Expr n) (env : Vec Nat n) →\n⟦ ↓ e₁ ⟧ₚ env ≡ ⟦ ↓ e₂ ⟧ₚ env → ⟦ e₁ ⟧ₑ env ≡ ⟦ e₂ ⟧ₑ env"},{"idAnchor":"Data.Nat.Solver.html#1762","idDesc":null,"idIdent":"const","idType":"A → Poly A 0"},{"idAnchor":"Data.Nat.Solver.html#22351","idDesc":null,"idIdent":"solve-macro","idType":"Term → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#5549","idDesc":null,"idIdent":"1ₚ","idType":"Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#3276","idDesc":null,"idIdent":"commute-inner","idType":"(w x y z : Nat) → w + x + (y + z) ≡ w + y + (x + z)"},{"idAnchor":"Data.Nat.Solver.html#13348","idDesc":null,"idIdent":"⟦p*⟨qx+s⟩⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#22544","idDesc":null,"idIdent":".extendedlambda6","idType":"(hole : Term) → Term → Maybe (Term × Term) → TC ⊤"},{"idAnchor":"Data.Nat.Solver.html#8506","idDesc":null,"idIdent":"sound-constₚ","idType":"(c : Nat) (env : Vec Nat n) → ⟦ constₚ c ⟧ₚ env ≡ c"},{"idAnchor":"Data.Nat.Solver.html#10662","idDesc":null,"idIdent":"sound-*ₚ","idType":"(p q : Poly Nat n) (env : Vec Nat n) →\n⟦ p *ₚ q ⟧ₚ env ≡ ⟦ p ⟧ₚ env * ⟦ q ⟧ₚ env"},{"idAnchor":"Data.Nat.Solver.html#20221","idDesc":null,"idIdent":"″solve″","idType":"Term → Term → Term → Term"},{"idAnchor":"Data.Nat.Solver.html#5927","idDesc":null,"idIdent":"_+ₚ_","idType":"Poly Nat n → Poly Nat n → Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#14150","idDesc":null,"idIdent":"⟦q⟧","idType":"(r : Poly Nat n) (p : Poly Nat (suc n)) (q : Poly Nat n) (x₀ : Nat)\n(env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#10038","idDesc":null,"idIdent":"⟦r+s⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#10003","idDesc":null,"idIdent":"⟦p+q⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#8736","idDesc":null,"idIdent":"sound-X[_]","idType":"(i : Fin n) (env : Vec Nat n) → ⟦ X[ i ] ⟧ₚ env ≡ lookup env i"},{"idAnchor":"Data.Nat.Solver.html#6444","idDesc":null,"idIdent":"_*ₚ_","idType":"Poly Nat n → Poly Nat n → Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#13481","idDesc":null,"idIdent":"⟦q⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#15209","idDesc":null,"idIdent":"‵_","idType":"Fin n → Expr n"},{"idAnchor":"Data.Nat.Solver.html#6488","idDesc":null,"idIdent":"_*ₚ′_","idType":"Poly Nat n → Poly Nat (suc n) → Poly Nat (suc n)"},{"idAnchor":"Data.Nat.Solver.html#5660","idDesc":null,"idIdent":"X[_]","idType":"Fin n → Poly Nat n"},{"idAnchor":"Data.Nat.Solver.html#13460","idDesc":null,"idIdent":"⟦r⟧","idType":"(p : Poly Nat (suc n)) (r : Poly Nat n) (q : Poly Nat (suc n))\n(s : Poly Nat n) (x₀ : Nat) (env : Vec Nat n) →\nNat"},{"idAnchor":"Data.Nat.Solver.html#19734","idDesc":null,"idIdent":"get-boundary","idType":"Term → TC (Maybe (Term × Term))"},{"idAnchor":"Data.Nat.Solver.html#15242","idDesc":null,"idIdent":"‵1+_","idType":"Expr n → Expr n"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#751","idDesc":null,"idIdent":"Prev","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nType ℓ → Type (level-of-fields→prod fs)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#778","idDesc":null,"idIdent":"PropHelperCenterType","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₂ ⊔ level-of-fields→prod fs)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#722","idDesc":null,"idIdent":"prev","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nR₁ X → fields→prod fs X"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#1017","idDesc":null,"idIdent":"PropHelperContractType","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nPropHelperCenterType R₁ ι fs P f →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₂ ⊔ level-of-fields→prod fs)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#1438","idDesc":null,"idIdent":"PropHelperType","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nType (lsuc ℓ ⊔ ℓ₁ ⊔ ℓ₂ ⊔ level-of-fields→prod fs)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Prop.html#1551","idDesc":null,"idIdent":"derivePropHelper","idType":"(R₁ : Type ℓ → Type ℓ₁) (ι : IsHomT ℓ₁' R₁)\n(fs : RecordFields R₁ ι)\n(P : (X : Type ℓ) → fields→prod fs X → Type ℓ₂)\n(f : (r : R₁ X) → P X (project-fields fs r)) →\nis-prop-property R₁ ι fs P → PropHelperType R₁ ι fs P f"},{"idAnchor":"Cat.Diagram.Pullback.html#1618","idDesc":null,"idIdent":"p₂∘limiting","idType":"(r : is-pullback C p₁ f p₂ g) → (C ∘ p₂) (r .limiting p) ≡ p₂'"},{"idAnchor":"Cat.Diagram.Pullback.html#1685","idDesc":null,"idIdent":"unique","idType":"(r : is-pullback C p₁ f p₂ g) →\n(C ∘ p₁) lim' ≡ p₁' → (C ∘ p₂) lim' ≡ p₂' → lim' ≡ r .limiting p"},{"idAnchor":"Cat.Diagram.Pullback.html#3061","idDesc":null,"idIdent":"p₂","idType":"(r : Pullback C f g) → Hom C (r .apex) Y"},{"idAnchor":"Cat.Diagram.Pullback.html#1552","idDesc":null,"idIdent":"p₁∘limiting","idType":"(r : is-pullback C p₁ f p₂ g) → (C ∘ p₁) (r .limiting p) ≡ p₁'"},{"idAnchor":"Cat.Diagram.Pullback.html#733","idDesc":null,"idIdent":"square","idType":"is-pullback C p₁ f p₂ g → (C ∘ f) p₁ ≡ (C ∘ g) p₂"},{"idAnchor":"Cat.Diagram.Pullback.html#1828","idDesc":null,"idIdent":"unique₂","idType":"is-pullback C p₁ f p₂ g →\n(C ∘ p₁) lim' ≡ p₁' →\n(C ∘ p₂) lim' ≡ p₂' →\n(C ∘ p₁) lim'' ≡ p₁' → (C ∘ p₂) lim'' ≡ p₂' → lim' ≡ lim''"},{"idAnchor":"Cat.Diagram.Pullback.html#3041","idDesc":null,"idIdent":"p₁","idType":"(r : Pullback C f g) → Hom C (r .apex) X"},{"idAnchor":"Cat.Diagram.Pullback.html#3026","idDesc":null,"idIdent":"apex","idType":"Pullback C f g → Ob C"},{"idAnchor":"Cat.Diagram.Pullback.html#3081","idDesc":null,"idIdent":"has-is-pb","idType":"(r : Pullback C f g) → is-pullback C (r .p₁) f (r .p₂) g"},{"idAnchor":"Cat.Diagram.Pullback.html#1452","idDesc":null,"idIdent":"limiting","idType":"is-pullback C p₁ f p₂ g → (C ∘ f) p₁' ≡ (C ∘ g) p₂' → Hom C P′ P"},{"idAnchor":"Cat.Diagram.Pullback.html#2946","idDesc":null,"idIdent":"Pullback","idType":"(C : Precategory ℓ ℓ′) (f : Hom C X Z) (g : Hom C Y Z) →\nType (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Pullback.html#622","idDesc":null,"idIdent":"is-pullback","idType":"(C : Precategory ℓ ℓ′) (p₁ : Hom C P X) (f : Hom C X Z)\n(p₂ : Hom C P Y) (g : Hom C Y Z) →\nType (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Abelian.Limits.html#1309","idDesc":null,"idIdent":"difference-kernel","idType":"(A : is-pre-abelian C) → is-equaliser A f g (kernel A ((A - f) g))"},{"idAnchor":"Cat.Abelian.Limits.html#2428","idDesc":null,"idIdent":"finitely-complete","idType":"(A : is-pre-abelian C) → Finitely-complete C"},{"idAnchor":"Cat.Abelian.Limits.html#1461","idDesc":null,"idIdent":"equ","idType":"(A : is-pre-abelian C) → is-equaliser A f g (kernel A ((A - f) g))"},{"idAnchor":"1Lab.Type.Sigma.html#4320","idDesc":null,"idIdent":".extendedlambda0","idType":"(y : Σ (λ x → C (x .fst) (x .snd))) →\n∑ (Σ B₁) (λ x → C (x .fst) (x .snd)) → ∑ A (λ v → ∑ (B₁ v) (C v))"},{"idAnchor":"1Lab.Type.Sigma.html#3330","idDesc":null,"idIdent":"ctr","idType":"(e : A ≃ A') (x : Σ B₁) → fibre (intro e) x"},{"idAnchor":"1Lab.Type.Sigma.html#2113","idDesc":null,"idIdent":"Σ-ap","idType":"(e : A ≃ A') → ((x : A) → P x ≃ Q (e .fst x)) → Σ P ≃ Σ Q"},{"idAnchor":"1Lab.Type.Sigma.html#3875","idDesc":null,"idIdent":"coh","idType":"(e : A ≃ A') (x : Σ B₁) (r : A) (s : (B₁ ⊙ e .fst) r)\n(p : intro e (r , s) ≡ x) →\nPathP\n(λ i →\n   PB e x\n   (Σ-pathp-iso .snd .inv\n    (e .snd .is-eqv (fst x) .paths (r , Σ-pathp-iso .snd .inv p .fst))\n    .snd i)\n   (b!≡s e x r s p i) (snd x))\n(ctrP e x) (Σ-pathp-iso .snd .inv p .snd)"},{"idAnchor":"1Lab.Type.Sigma.html#7547","idDesc":null,"idIdent":"Σ-contract","idType":"((x : A) → is-contr (B₁ x)) → Σ B₁ ≃ A"},{"idAnchor":"1Lab.Type.Sigma.html#3266","idDesc":null,"idIdent":"ctrP","idType":"(e : A ≃ A') (x : Σ B₁) →\nPB e x (e .snd .is-eqv (fst x) .centre .snd) (ctrB e x) (snd x)"},{"idAnchor":"1Lab.Type.Sigma.html#824","idDesc":null,"idIdent":"Σ-path-iso","idType":"Iso (Σ (λ p → subst B₁ p (x .snd) ≡ y .snd)) (x ≡ y)"},{"idAnchor":"1Lab.Type.Sigma.html#4446","idDesc":null,"idIdent":"Σ-Π-distrib","idType":"((x : A) → Σ (C x)) ≃ Σ (λ f → (x : A) → C x (f x))"},{"idAnchor":"1Lab.Type.Sigma.html#3003","idDesc":null,"idIdent":"PB","idType":"(e : A ≃ A') (x : Σ B₁) → x₁ ≡ y → B₁ x₁ → B₁ y → Type B.ℓ"},{"idAnchor":"1Lab.Type.Sigma.html#5624","idDesc":null,"idIdent":"Σ-prop-path-is-equiv","idType":"(bp : (x : A) → is-prop (B₁ x)) → is-equiv (Σ-prop-path bp)"},{"idAnchor":"1Lab.Type.Sigma.html#7658","idDesc":null,"idIdent":"the-iso","idType":"(bcontr : (x : A) → is-contr (B₁ x)) → Iso (Σ B₁) A"},{"idAnchor":"1Lab.Type.Sigma.html#3791","idDesc":null,"idIdent":".extendedlambda0","idType":"(e : A ≃ A') (x : Σ B₁) (r : A) (s : (B₁ ⊙ e .fst) r)\n(p : intro e (r , s) ≡ x) (i k : I) →\n.(IsOne (~ i ∨ i)) →\nB₁\n(Σ-pathp-iso .snd .inv\n (e .snd .is-eqv (fst x) .paths (r , Σ-pathp-iso .snd .inv p .fst))\n .snd i (~ k))"},{"idAnchor":"1Lab.Type.Sigma.html#2065","idDesc":null,"idIdent":"Σ-ap-fst","idType":"(e : A ≃ A') → Σ (B₁ ⊙ e .fst) ≃ Σ B₁"},{"idAnchor":"1Lab.Type.Sigma.html#2926","idDesc":null,"idIdent":"isEqIntro","idType":"(e : A ≃ A') → is-equiv (intro e)"},{"idAnchor":"1Lab.Type.Sigma.html#3209","idDesc":null,"idIdent":"ctrB","idType":"(e : A ≃ A') (x : Σ B₁) →\nB₁ (e .fst (e .snd .is-eqv (fst x) .centre .fst))"},{"idAnchor":"1Lab.Type.Sigma.html#4067","idDesc":null,"idIdent":"Σ-assoc","idType":"Σ (λ x → Σ (C x)) ≃ Σ (λ x → C (x .fst) (x .snd))"},{"idAnchor":"1Lab.Type.Sigma.html#5139","idDesc":null,"idIdent":"Σ-prop-path","idType":"((x : A) → is-prop (B₁ x)) → x .fst ≡ y .fst → x ≡ y"},{"idAnchor":"1Lab.Type.Sigma.html#7023","idDesc":null,"idIdent":"Σ-prop-square","idType":"((x : A) → is-prop (B₁ x)) →\nSquare (ap fst p) (ap fst q) (ap fst s) (ap fst r) → Square p q s r"},{"idAnchor":"1Lab.Type.Sigma.html#2420","idDesc":null,"idIdent":"pwise","idType":"((x : A) → P x ≃ Q x) → (x : A) → Iso (P x) (Q x)"},{"idAnchor":"1Lab.Type.Sigma.html#7959","idDesc":null,"idIdent":"Σ-pathp-dep","idType":"(p : PathP A (x .fst) (y .fst)) →\nPathP (λ i → B₁ i (p i)) (x .snd) (y .snd) →\nPathP (λ i → Σ (B₁ i)) x y"},{"idAnchor":"1Lab.Type.Sigma.html#3704","idDesc":null,"idIdent":"b!≡s","idType":"(e : A ≃ A') (x : Σ B₁) (r : A) (s : (B₁ ⊙ e .fst) r)\n(p : intro e (r , s) ≡ x) →\nPB e x\n(ap (e .fst)\n (Σ-pathp-iso .snd .inv\n  (e .snd .is-eqv (fst x) .paths (r , Σ-pathp-iso .snd .inv p .fst))\n  .fst))\n(ctrB e x) s"},{"idAnchor":"1Lab.Type.Sigma.html#6824","idDesc":null,"idIdent":"Σ-prop-path≃","idType":"((x : A) → is-prop (B₁ x)) → (x .fst ≡ y .fst) ≃ (x ≡ y)"},{"idAnchor":"1Lab.Type.Sigma.html#5814","idDesc":null,"idIdent":"isom","idType":"(bp : (x : A) → is-prop (B₁ x)) → is-iso (Σ-prop-path bp)"},{"idAnchor":"1Lab.Type.Sigma.html#7869","idDesc":null,"idIdent":"Σ-map₂","idType":"(P x → Q x) → Σ P → Σ Q"},{"idAnchor":"1Lab.Type.Sigma.html#4406","idDesc":null,"idIdent":".extendedlambda1","idType":"(y : Σ (λ x → C (x .fst) (x .snd))) →\n∑ (Σ B₁) (λ x → C (x .fst) (x .snd)) → ∑ A (λ v → ∑ (B₁ v) (C v))"},{"idAnchor":"1Lab.Type.Sigma.html#553","idDesc":null,"idIdent":"Σ-pathp-iso","idType":"Iso (Σ (λ p → PathP (λ i → B₁ i (p i)) (x .snd) (y .snd)))\n(PathP (λ i → Σ (B₁ i)) x y)"},{"idAnchor":"1Lab.Type.Sigma.html#3977","idDesc":null,"idIdent":".extendedlambda0","idType":"(e : A ≃ A') (x : Σ B₁) (r : A) (s : (B₁ ⊙ e .fst) r)\n(p : intro e (r , s) ≡ x) (i j k : I) →\n.(IsOne (~ i ∨ i)) →\nB₁\n(Σ-pathp-iso .snd .inv\n (e .snd .is-eqv (fst x) .paths (r , Σ-pathp-iso .snd .inv p .fst))\n .snd i (~ k))"},{"idAnchor":"1Lab.Type.Sigma.html#3396","idDesc":null,"idIdent":"isCtr","idType":"(e : A ≃ A') (x : Σ B₁)\n(y : ∑ (Σ (B₁ ⊙ e .fst)) (λ x₁ → intro e x₁ ≡ x)) →\nctr e x ≡ y"},{"idAnchor":"1Lab.Type.Sigma.html#2508","idDesc":null,"idIdent":"morp","idType":"(pointwise : (x : A) → P x ≃ Q x) → Iso (Σ P) (Σ Q)"},{"idAnchor":"1Lab.Type.Sigma.html#2863","idDesc":null,"idIdent":"intro","idType":"(e : A ≃ A') → Σ (B₁ ⊙ e .fst) → Σ B₁"},{"idAnchor":"1Lab.Type.Sigma.html#2020","idDesc":null,"idIdent":"Σ-ap-snd","idType":"((x : A) → P x ≃ Q x) → Σ P ≃ Σ Q"},{"idAnchor":"Data.Nat.Base.html#1268","idDesc":null,"idIdent":"distinguish","idType":"(path₁ : zero ≡ suc n) → Nat → Type"},{"idAnchor":"Data.Nat.Base.html#5109","idDesc":null,"idIdent":"≤-flip","idType":"(x y : Nat) → (x ≤ y → ⊥) → y ≤ x"},{"idAnchor":"Data.Nat.Base.html#4598","idDesc":null,"idIdent":"≤-antisym","idType":"(x y : Nat) → x ≤ y → y ≤ x → x ≡ y"},{"idAnchor":"Data.Nat.Base.html#5291","idDesc":null,"idIdent":"≤-dec","idType":"(x y : Nat) → Dec (x ≤ y)"},{"idAnchor":"Data.Nat.Base.html#4308","idDesc":null,"idIdent":"0≤x","idType":"(x : Nat) → zero ≤ x"},{"idAnchor":"Data.Nat.Base.html#3132","idDesc":null,"idIdent":"plus","idType":"Nat → Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#3204","idDesc":null,"idIdent":"times","idType":"Nat → Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#3817","idDesc":null,"idIdent":"_≤_","idType":"Nat → Nat → Type"},{"idAnchor":"Data.Nat.Base.html#4913","idDesc":null,"idIdent":"≤-prop","idType":"(x y : Nat) → is-prop (x ≤ y)"},{"idAnchor":"Data.Nat.Base.html#4237","idDesc":null,"idIdent":"≤-refl","idType":"(x : Nat) → x ≤ x"},{"idAnchor":"Data.Nat.Base.html#1668","idDesc":null,"idIdent":"suc-inj","idType":"suc x ≡ suc y → x ≡ y"},{"idAnchor":"Data.Nat.Base.html#3373","idDesc":null,"idIdent":"plus≡+","idType":"plus ≡ _+_"},{"idAnchor":"Data.Nat.Base.html#5886","idDesc":null,"idIdent":"min","idType":"Nat → Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#1178","idDesc":null,"idIdent":"zero≠suc","idType":"zero ≡ suc n → ⊥"},{"idAnchor":"Data.Nat.Base.html#2563","idDesc":null,"idIdent":"Nat-is-set","idType":"is-set Nat"},{"idAnchor":"Data.Nat.Base.html#4367","idDesc":null,"idIdent":"≤-trans","idType":"(x y z : Nat) → x ≤ y → y ≤ z → x ≤ z"},{"idAnchor":"Data.Nat.Base.html#3454","idDesc":null,"idIdent":"times≡*","idType":"times ≡ _*_"},{"idAnchor":"Data.Nat.Base.html#410","idDesc":null,"idIdent":"Nat-elim","idType":"(P : Nat → Type ℓ) → P 0 → (P n → P (suc n)) → (n : Nat) → P n"},{"idAnchor":"Data.Nat.Base.html#3636","idDesc":null,"idIdent":"_^_","idType":"Nat → Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#2640","idDesc":null,"idIdent":"H-Level-Nat","idType":"H-Level Nat (2 + n)"},{"idAnchor":"Data.Nat.Base.html#1740","idDesc":null,"idIdent":"pred","idType":"Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#2008","idDesc":null,"idIdent":"Discrete-Nat","idType":"Discrete Nat"},{"idAnchor":"Data.Nat.Base.html#5690","idDesc":null,"idIdent":"max","idType":"Nat → Nat → Nat"},{"idAnchor":"Data.Nat.Base.html#4034","idDesc":null,"idIdent":"_<_","idType":"Nat → Nat → Type"},{"idAnchor":"Cat.Univalent.Rezk.html#2016","idDesc":null,"idIdent":"Rezk-completion-is-category","idType":"is-category (Rezk-completion A)"},{"idAnchor":"Cat.Univalent.Rezk.html#1865","idDesc":null,"idIdent":"Rezk-completion","idType":"Precategory o h → Precategory (o ⊔ lsuc h) (o ⊔ h)"},{"idAnchor":"Cat.Instances.Elements.html#526","idDesc":null,"idIdent":"section","idType":"(r : Element C P) → ∣ ₀ P (r .ob) ∣"},{"idAnchor":"Cat.Instances.Elements.html#3839","idDesc":null,"idIdent":"πₚ","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s)) →\nFunctor (∫ C P) C"},{"idAnchor":"Cat.Instances.Elements.html#2143","idDesc":null,"idIdent":"eqv","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s)) →\nIso (Element-hom C P x y)\n(∑ (C .Hom (ob x) (ob y))\n (λ hom → ₁ P hom (section y) ≡ section x))"},{"idAnchor":"Cat.Instances.Elements.html#497","idDesc":null,"idIdent":"elem","idType":"(ob : C .Ob) (section : ∣ ₀ P ob ∣) → Element C P"},{"idAnchor":"Cat.Instances.Elements.html#2808","idDesc":null,"idIdent":"∫","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s)) →\nPrecategory (o ⊔ s) (ℓ ⊔ s)"},{"idAnchor":"Cat.Instances.Elements.html#1628","idDesc":null,"idIdent":"commute","idType":"(r : Element-hom C P x y) → ₁ P (r .hom) (y .section) ≡ x .section"},{"idAnchor":"Cat.Instances.Elements.html#1559","idDesc":null,"idIdent":"elem-hom","idType":"(hom : C .Hom (x .ob) (y .ob))\n(commute : ₁ P hom (y .section) ≡ x .section) →\nElement-hom C P x y"},{"idAnchor":"Cat.Instances.Elements.html#2587","idDesc":null,"idIdent":"induce","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s))\n(f : C .Hom x y) (py : ∣ ₀ P y ∣) →\nElement-hom C P (elem x (₁ P f py)) (elem y py)"},{"idAnchor":"Cat.Instances.Elements.html#1807","idDesc":null,"idIdent":"Element-hom-path","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s)) →\nf .hom ≡ g .hom → f ≡ g"},{"idAnchor":"Cat.Instances.Elements.html#1496","idDesc":null,"idIdent":"Element-hom","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s))\n(x y : Element C P) →\nType (ℓ ⊔ s)"},{"idAnchor":"Cat.Instances.Elements.html#3122","idDesc":null,"idIdent":"comm","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s))\n(f : ∫ C P .Hom y z) (g : ∫ C P .Hom x y) →\n₁ P (C ._∘_ (f .hom) (g .hom)) (z .section) ≡ x .section"},{"idAnchor":"Cat.Instances.Elements.html#2192","idDesc":null,"idIdent":"Element-hom-is-set","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s))\n(x y : Element C P) →\nis-set (Element-hom C P x y)"},{"idAnchor":"Cat.Instances.Elements.html#454","idDesc":null,"idIdent":"Element","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s)) → Type (o ⊔ s)"},{"idAnchor":"Cat.Instances.Elements.html#514","idDesc":null,"idIdent":"ob","idType":"Element C P → C .Ob"},{"idAnchor":"Cat.Instances.Elements.html#1598","idDesc":null,"idIdent":"hom","idType":"Element-hom C P x y → C .Hom (x .ob) (y .ob)"},{"idAnchor":"Cat.Instances.Elements.html#2333","idDesc":null,"idIdent":"T-is-set","idType":"(C : Precategory o ℓ) (P : Functor (C ^op) (Sets s))\n(x y : Element C P) →\nis-set (Σ (λ z → ₁ P z (section y) ≡ section x))"},{"idAnchor":"Algebra.Ring.html#7239","idDesc":null,"idIdent":"*-distribl","idType":"(r : make-ring R₁) →\nr ._*_ x (r ._+_ y z) ≡ r ._+_ (r ._*_ x y) (r ._*_ x z)"},{"idAnchor":"Algebra.Ring.html#3279","idDesc":null,"idIdent":"is-ring-hom","idType":"(A B₁ : Ring ℓ) (f : A .fst → B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Ring.html#7061","idDesc":null,"idIdent":"_*_","idType":"make-ring R₁ → R₁ → R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#6842","idDesc":null,"idIdent":"-_","idType":"make-ring R₁ → R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#4057","idDesc":null,"idIdent":"Ring-univalent","idType":"is-univalent (HomT→Str is-ring≃)"},{"idAnchor":"Algebra.Ring.html#7045","idDesc":null,"idIdent":"1R","idType":"make-ring R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#2823","idDesc":null,"idIdent":"Ring","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Ring.html#2375","idDesc":null,"idIdent":".extendedlambda0","idType":"(x y : is-ring 1R _*₁_ _+₁_) → x ≡ y"},{"idAnchor":"Algebra.Ring.html#9850","idDesc":null,"idIdent":"Zero-ring","idType":"Ring lzero"},{"idAnchor":"Algebra.Ring.html#7377","idDesc":null,"idIdent":"from-make-ring-on","idType":"(r : make-ring R₁) → Ring-on R₁"},{"idAnchor":"Algebra.Ring.html#8878","idDesc":null,"idIdent":"from-make-ring","idType":"(r : make-ring R₁) → Ring ℓ"},{"idAnchor":"Algebra.Ring.html#3510","idDesc":null,"idIdent":"pres-*","idType":"is-ring-hom A B₁ f →\n(x y : A .fst) → f (A .snd ._*_ x y) ≡ B₁ .snd ._*_ (f x) (f y)"},{"idAnchor":"Algebra.Ring.html#2069","idDesc":null,"idIdent":"_+_","idType":"Ring-on R₁ → R₁ → R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#3592","idDesc":null,"idIdent":"eqv","idType":"Iso (is-ring-hom A B₁ f)\n(∑ (f (A .snd .1R) ≡ B₁ .snd .1R)\n (λ pres-id →\n    ∑ ((x y : fst A) → f (A .snd ._+_ x y) ≡ B₁ .snd ._+_ (f x) (f y))\n    (λ pres-+ →\n       (x y : fst A) → f (A .snd ._*_ x y) ≡ B₁ .snd ._*_ (f x) (f y))))"},{"idAnchor":"Algebra.Ring.html#6672","idDesc":null,"idIdent":"make-ring","idType":"(R₁ : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Ring.html#1307","idDesc":null,"idIdent":"+-group","idType":"is-ring 1R _*₁_ _+₁_ → is-group _+₁_"},{"idAnchor":"Algebra.Ring.html#5614","idDesc":null,"idIdent":"h","idType":"(ℓ : Level) (f : precat ℓ .Hom y z) (g : precat ℓ .Hom x y) →\nis-ring-hom x z (λ x → f .fst (g .fst x))"},{"idAnchor":"Algebra.Ring.html#6932","idDesc":null,"idIdent":"+-assoc","idType":"(r : make-ring R₁) → r ._+_ (r ._+_ x y) z ≡ r ._+_ x (r ._+_ y z)"},{"idAnchor":"Algebra.Ring.html#2169","idDesc":null,"idIdent":"H-Level-is-ring","idType":"H-Level (is-ring 1R _*₁_ _+₁_) (suc n)"},{"idAnchor":"Algebra.Ring.html#7300","idDesc":null,"idIdent":"*-distribr","idType":"(r : make-ring R₁) →\nr ._*_ (r ._+_ y z) x ≡ r ._+_ (r ._*_ y x) (r ._*_ z x)"},{"idAnchor":"Algebra.Ring.html#6802","idDesc":null,"idIdent":"0R","idType":"make-ring R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#7085","idDesc":null,"idIdent":"*-idl","idType":"(r : make-ring R₁) → r ._*_ (r .1R) x ≡ x"},{"idAnchor":"Algebra.Ring.html#7151","idDesc":null,"idIdent":"*-assoc","idType":"(r : make-ring R₁) → r ._*_ (r ._*_ x y) z ≡ r ._*_ x (r ._*_ y z)"},{"idAnchor":"Algebra.Ring.html#7606","idDesc":null,"idIdent":"ring","idType":"(r : make-ring R₁) → Ring-on R₁"},{"idAnchor":"Algebra.Ring.html#6818","idDesc":null,"idIdent":"_+_","idType":"make-ring R₁ → R₁ → R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#7118","idDesc":null,"idIdent":"*-idr","idType":"(r : make-ring R₁) → r ._*_ x (r .1R) ≡ x"},{"idAnchor":"Algebra.Ring.html#5042","idDesc":null,"idIdent":"precat","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Ring.html#2054","idDesc":null,"idIdent":"1R","idType":"Ring-on R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#3462","idDesc":null,"idIdent":"pres-+","idType":"is-ring-hom A B₁ f →\n(x y : A .fst) → f (A .snd ._+_ x y) ≡ B₁ .snd ._+_ (f x) (f y)"},{"idAnchor":"Algebra.Ring.html#1335","idDesc":null,"idIdent":"+-commutes","idType":"is-ring 1R _*₁_ _+₁_ → (x +₁ y) ≡ (y +₁ x)"},{"idAnchor":"Algebra.Ring.html#6744","idDesc":null,"idIdent":"ring-is-set","idType":"make-ring R₁ → is-set R₁"},{"idAnchor":"Algebra.Ring.html#2065","idDesc":null,"idIdent":"_*_","idType":"Ring-on R₁ → R₁ → R₁ → R₁"},{"idAnchor":"Algebra.Ring.html#1437","idDesc":null,"idIdent":"*-distribr","idType":"is-ring 1R _*₁_ _+₁_ → ((y +₁ z) *₁ x) ≡ ((y *₁ x) +₁ (z *₁ x))"},{"idAnchor":"Algebra.Ring.html#1275","idDesc":null,"idIdent":"*-monoid","idType":"is-ring 1R _*₁_ _+₁_ → is-monoid 1R _*₁_"},{"idAnchor":"Algebra.Ring.html#6862","idDesc":null,"idIdent":"+-idl","idType":"(r : make-ring R₁) → r ._+_ (r .0R) x ≡ x"},{"idAnchor":"Algebra.Ring.html#6895","idDesc":null,"idIdent":"+-invr","idType":"(r : make-ring R₁) → r ._+_ x (r .-_ x) ≡ r .0R"},{"idAnchor":"Algebra.Ring.html#5453","idDesc":null,"idIdent":"rh","idType":"(ℓ : Level) → is-ring-hom x x (λ x → x)"},{"idAnchor":"Algebra.Ring.html#2002","idDesc":null,"idIdent":"Ring-on","idType":"(R₁ : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Ring.html#3434","idDesc":null,"idIdent":"pres-id","idType":"is-ring-hom A B₁ f → f (A .snd .1R) ≡ B₁ .snd .1R"},{"idAnchor":"Algebra.Ring.html#3952","idDesc":null,"idIdent":"is-ring≃","idType":"(A B₁ : Ring ℓ) → A .fst ≃ B₁ .fst → Type ℓ"},{"idAnchor":"Algebra.Ring.html#4640","idDesc":null,"idIdent":"prop","idType":"is-prop (is-ring 1R _*₁_ _+₁_)"},{"idAnchor":"Algebra.Ring.html#5298","idDesc":null,"idIdent":"goal","idType":"(ℓ : Level) (A B₁ : precat ℓ .Ob) → is-set (Σ (is-ring-hom A B₁))"},{"idAnchor":"Algebra.Ring.html#6984","idDesc":null,"idIdent":"+-comm","idType":"(r : make-ring R₁) → r ._+_ x y ≡ r ._+_ y x"},{"idAnchor":"Algebra.Ring.html#1174","idDesc":null,"idIdent":"is-ring","idType":"(1R : R₁) (_*₁_ _+₁_ : R₁ → R₁ → R₁) → Type ℓ"},{"idAnchor":"Algebra.Ring.html#2089","idDesc":null,"idIdent":"has-is-ring","idType":"(r : Ring-on R₁) → is-ring (r .1R) (r ._*_) (r ._+_)"},{"idAnchor":"Algebra.Ring.html#1376","idDesc":null,"idIdent":"*-distribl","idType":"is-ring 1R _*₁_ _+₁_ → (x *₁ (y +₁ z)) ≡ ((x *₁ y) +₁ (x *₁ z))"},{"idAnchor":"Algebra.Ring.html#4923","idDesc":null,"idIdent":"Rings","idType":"(ℓ : Level) → Precategory (lsuc ℓ) ℓ"},{"idAnchor":"Algebra.Ring.html#3791","idDesc":null,"idIdent":"H-Level-ring-hom","idType":"H-Level (is-ring-hom A B₁ f) (suc n)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4002","idDesc":null,"idIdent":"colim","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Initial (Cocones F)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#3029","idDesc":null,"idIdent":"Sets-is-cocomplete","idType":"is-cocomplete ι κ (Sets (ι ⊔ κ ⊔ o))"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#955","idDesc":null,"idIdent":"Sets-has-coproducts","idType":"has-indexed-coproducts (Sets (κ ⊔ ℓ)) κ"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4215","idDesc":null,"idIdent":".extendedlambda1","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (other : Cocones F .Ob)\n(x : tot (rel F)) →\n(λ { (x , p) → other .ψ x p }) (/-left x) ≡\n(λ { (x , p) → other .ψ x p }) (/-right x)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#2092","idDesc":null,"idIdent":".extendedlambda0","idType":"(F : I₁ → Ob (Sets (κ ⊔ ℓ))) →\n((i : I₁) → Hom (Sets (κ ⊔ ℓ)) (F i) Y) → (x : sum F) → ∣ Y ∣"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#1819","idDesc":null,"idIdent":"sum","idType":"(I₁ → Ob (Sets (κ ⊔ ℓ))) → Type (κ ⊔ ℓ)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4167","idDesc":null,"idIdent":".extendedlambda0","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (other : Cocones F .Ob) →\nsum F → ∣ other .coapex ∣"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#3195","idDesc":null,"idIdent":"sum","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Type (ι ⊔ κ ⊔ o)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4380","idDesc":null,"idIdent":"unique","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (other : Cocones F .Ob)\n(x : Cocone-hom F (apex F) other) →\nmap F other ≡ x"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#7000","idDesc":null,"idIdent":".extendedlambda0","idType":"(i j : ∣ I₁ ∣) (i≠j : i ≡ j → ⊥) (os : Sets (κ ⊔ κ) .Ob)\n(x\n : Σ\n   (λ i₁ →\n      Σ\n      (λ x₁ →\n         Sets-has-coproducts F .ι i i₁ ≡ Sets-has-coproducts F .ι j x₁)) →\n   ∣ os ∣)\n(x₁\n : ∑ ∣ F i ∣\n   (λ i₁ →\n      ∑ ∣ F j ∣\n      (λ x₂ →\n         Sets-has-coproducts F .ι i i₁ ≡ Sets-has-coproducts F .ι j x₂))) →\nmap i j i≠j os x₁ ≡ x x₁"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4970","idDesc":null,"idIdent":"Set-disjoint-coprods","idType":"is-disjoint-coproduct (Sets κ) F (Sets-has-coproducts F .ι)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#3623","idDesc":null,"idIdent":"apex","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) → Cocone F"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#1921","idDesc":null,"idIdent":"coprod","idType":"(F : I₁ → Ob (Sets (κ ⊔ ℓ))) → Indexed-coproduct (Sets (κ ⊔ ℓ)) F"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#6262","idDesc":null,"idIdent":"q","idType":"(i : ∣ I₁ ∣) (g h : Hom (Sets (κ ⊔ κ)) c (F i))\n(path₁\n : (Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) g ≡\n   (Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) h) →\nap fst (happly (path′ i g h path₁) c) ≡ refl"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#6339","idDesc":null,"idIdent":"go","idType":"(i : ∣ I₁ ∣) (g h : Hom (Sets (κ ⊔ κ)) c (F i)) →\n(Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) g ≡\n(Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) h →\n(c : ∣ c₁ ∣) → g c ≡ h c"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#6043","idDesc":null,"idIdent":"path′","idType":"(i : ∣ I₁ ∣) (g h : Hom (Sets (κ ⊔ κ)) c (F i))\n(path₁\n : (Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) g ≡\n   (Sets (κ ⊔ κ) ∘ Sets-has-coproducts F .ι i) h) →\nPath (∣ c ∣ → Σ (λ x → ∣ F x ∣)) (λ c → i , g c) (λ c → i , h c)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#3243","idDesc":null,"idIdent":"rel","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) →\nsum F → sum F → Type (ι ⊔ κ ⊔ o)"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#4089","idDesc":null,"idIdent":"map","idType":"(F : Functor D (Sets (ι ⊔ κ ⊔ o))) (other : Cocones F .Ob) →\nCocone-hom F (apex F) other"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#6957","idDesc":null,"idIdent":"uniq","idType":"(i j : ∣ I₁ ∣) (i≠j : i ≡ j → ⊥) (os : Sets (κ ⊔ κ) .Ob)\n(x\n : Σ\n   (λ i₁ →\n      Σ\n      (λ x₁ →\n         Sets-has-coproducts F .ι i i₁ ≡ Sets-has-coproducts F .ι j x₁)) →\n   ∣ os ∣) →\nmap i j i≠j os ≡ x"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#6829","idDesc":null,"idIdent":"map","idType":"(i j : ∣ I₁ ∣) (i≠j : i ≡ j → ⊥) (os : Sets (κ ⊔ κ) .Ob) →\nΣ\n(λ i₁ →\n   Σ\n   (λ x →\n      Sets-has-coproducts F .ι i i₁ ≡ Sets-has-coproducts F .ι j x)) →\n∣ os ∣"},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#5595","idDesc":null,"idIdent":"coprod","idType":"is-disjoint-coproduct (Sets (κ ⊔ κ)) F (Sets-has-coproducts F .ι)"},{"idAnchor":"1Lab.Type.Pi.html#4155","idDesc":null,"idIdent":"lemi→i","idType":"(h : (p : PathP A x₀ x₁) → PathP (λ i → B₁ i (p i)) (f x₀) (g x₁))\n(m : I) (p : PathP A x₀ x₁) (i : I) →\nSquare (lemi→j h m p i i) (coei→i A i (p i)) refl refl"},{"idAnchor":"1Lab.Type.Pi.html#3459","idDesc":null,"idIdent":"isom","idType":"Iso\n({x₀ : A i0} {x₁ : A i1} (p : PathP A x₀ x₁) →\n PathP (λ i → B₁ i (p i)) (f x₀) (g x₁))\n(PathP (λ i → (x : A i) → B₁ i x) f g)"},{"idAnchor":"1Lab.Type.Pi.html#1904","idDesc":null,"idIdent":"the-iso","idType":"(dom : A ≃ B₁) (rng : C ≃ D) → Iso (A → C) (B₁ → D)"},{"idAnchor":"1Lab.Type.Pi.html#3127","idDesc":null,"idIdent":"funext-dep≃","idType":"({x₀ : A i0} {x₁ : A i1} (p : PathP A x₀ x₁) →\n PathP (λ i → B₁ i (p i)) (f x₀) (g x₁))\n≃ PathP (λ i → (x : A i) → B₁ i x) f g"},{"idAnchor":"1Lab.Type.Pi.html#1729","idDesc":null,"idIdent":"function≃","idType":"A ≃ B₁ → C ≃ D → (A → C) ≃ (B₁ → D)"},{"idAnchor":"1Lab.Type.Pi.html#1122","idDesc":null,"idIdent":"Π-impl-cod≃","idType":"((x : A) → P x ≃ Q x) → ({x : A} → P x) ≃ ({x : A} → Q x)"},{"idAnchor":"1Lab.Type.Pi.html#1864","idDesc":null,"idIdent":"dom-iso","idType":"(dom : A ≃ B₁) (rng : C ≃ D) → is-iso (dom .fst)"},{"idAnchor":"1Lab.Type.Pi.html#663","idDesc":null,"idIdent":"Π-cod≃","idType":"((x : A) → P x ≃ Q x) → ((x : A) → P x) ≃ ((x : A) → Q x)"},{"idAnchor":"1Lab.Type.Pi.html#1825","idDesc":null,"idIdent":"rng-iso","idType":"(dom : A ≃ B₁) (rng : C ≃ D) → is-iso (rng .fst)"},{"idAnchor":"1Lab.Type.Pi.html#4035","idDesc":null,"idIdent":"lemi→j","idType":"((p : PathP A x₀ x₁) → PathP (λ i → B₁ i (p i)) (f x₀) (g x₁)) →\nI → (p : PathP A x₀ x₁) (i j : I) → coe A i j (p i) ≡ p j"},{"idAnchor":"1Lab.Type.Pi.html#4328","idDesc":null,"idIdent":"hetero-homotopy≃homotopy","idType":"({x₀ : A i0} {x₁ : A i1} → PathP A x₀ x₁ → PathP B₁ (f x₀) (g x₁))\n≃ ((x₀ : A i0) → PathP B₁ (f x₀) (g (coe0→1 A x₀)))"},{"idAnchor":"1Lab.Type.Pi.html#4647","idDesc":null,"idIdent":"isom","idType":"Iso\n({x₀ : A i0} {x₁ : A i1} → PathP A x₀ x₁ → PathP B₁ (f x₀) (g x₁))\n((x₀ : A i0) → PathP B₁ (f x₀) (g (coe0→1 A x₀)))"},{"idAnchor":"1Lab.Type.Pi.html#3878","idDesc":null,"idIdent":".extendedlambda0","idType":"(h : (p : PathP A x₀ x₁) → PathP (λ i → B₁ i (p i)) (f x₀) (g x₁))\n(m : I) (p : PathP A x₀ x₁) (i k : I) →\n.(IsOne (~ i ∨ i ∨ m)) → B₁ i (lemi→i h m p i m k)"},{"idAnchor":"1Lab.Type.Pi.html#3633","idDesc":null,"idIdent":".extendedlambda0","idType":"(q : PathP (λ i → (x : A i) → B₁ i x) f g) (m i : I) (x : A i)\n(k : I) →\n.(IsOne (~ i ∨ i ∨ m)) → B₁ i (coei→i A i x (k ∨ m))"},{"idAnchor":"1Lab.Type.Pi.html#2921","idDesc":null,"idIdent":".extendedlambda0","idType":"(h : (p : PathP A x₀ x₁) → PathP (λ i → B₁ i (p i)) (f x₀) (g x₁))\n(i : I) (x : A i) (k : I) →\n.(IsOne (~ i ∨ i)) → B₁ i (coei→i A i x k)"},{"idAnchor":"1Lab.Type.Pi.html#2570","idDesc":null,"idIdent":"funext-dep","idType":"((p : PathP A x₀ x₁) → PathP (λ i → B₁ i (p i)) (f x₀) (g x₁)) →\nPathP (λ i → (x : A i) → B₁ i x) f g"},{"idAnchor":"Agda.Builtin.Nat.html#195","idDesc":null,"idIdent":"zero","idType":"Nat"},{"idAnchor":"Agda.Builtin.Nat.html#513","idDesc":null,"idIdent":"_*_","idType":"Nat → Nat → Nat"},{"idAnchor":"Agda.Builtin.Nat.html#310","idDesc":null,"idIdent":"_+_","idType":"Nat → Nat → Nat"},{"idAnchor":"Agda.Builtin.Nat.html#177","idDesc":null,"idIdent":"Nat","idType":"Type"},{"idAnchor":"Agda.Builtin.Nat.html#1511","idDesc":null,"idIdent":"div-helper","idType":"Nat → Nat → Nat → Nat → Nat"},{"idAnchor":"Agda.Builtin.Nat.html#605","idDesc":null,"idIdent":"_==_","idType":"Nat → Nat → Bool"},{"idAnchor":"Agda.Builtin.Nat.html#400","idDesc":null,"idIdent":"_-_","idType":"Nat → Nat → Nat"},{"idAnchor":"Agda.Builtin.Nat.html#3014","idDesc":null,"idIdent":"mod-helper","idType":"Nat → Nat → Nat → Nat → Nat"},{"idAnchor":"Agda.Builtin.Nat.html#731","idDesc":null,"idIdent":"_<_","idType":"Nat → Nat → Bool"},{"idAnchor":"Agda.Builtin.Nat.html#208","idDesc":null,"idIdent":"suc","idType":"Nat → Nat"},{"idAnchor":"Agda.Builtin.Unit.html#149","idDesc":null,"idIdent":"⊤","idType":"Type"},{"idAnchor":"Agda.Builtin.Unit.html#186","idDesc":null,"idIdent":"tt","idType":"⊤"},{"idAnchor":"1Lab.HLevel.html#3902","idDesc":null,"idIdent":".extendedlambda0","idType":"(C : is-contr A) (x y : A) (i : I) → I → .(IsOne (~ i ∨ i)) → A"},{"idAnchor":"1Lab.HLevel.html#1328","idDesc":null,"idIdent":"is-contr","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#1383","idDesc":null,"idIdent":"contr","idType":"(centre₁ : A) (paths₁ : (x : A) → centre₁ ≡ x) → is-contr A"},{"idAnchor":"1Lab.HLevel.html#4418","idDesc":null,"idIdent":"SinglP-is-prop","idType":"is-prop (SingletonP A a)"},{"idAnchor":"1Lab.HLevel.html#14422","idDesc":null,"idIdent":"is-prop→squarep","idType":"((i j : I) → is-prop (B₁ i j)) →\n(p : PathP (λ j → B₁ j i0) a c) (q : PathP (B₁ i0) a b)\n(s : PathP (B₁ i1) c d) (r : PathP (λ j → B₁ j i1) b d) →\nSquareP B₁ p q s r"},{"idAnchor":"1Lab.HLevel.html#4132","idDesc":null,"idIdent":"SinglP-is-contr","idType":"(A : I → Type ℓ) (a : A i0) → is-contr (SingletonP A a)"},{"idAnchor":"1Lab.HLevel.html#1401","idDesc":null,"idIdent":"centre","idType":"is-contr A → A"},{"idAnchor":"1Lab.HLevel.html#9970","idDesc":null,"idIdent":"Path-p-is-hlevel","idType":"(n : Nat) → is-hlevel (A i1) n → is-hlevel (PathP A x y) n"},{"idAnchor":"1Lab.HLevel.html#3818","idDesc":null,"idIdent":"is-contr→is-prop","idType":"is-contr A → is-prop A"},{"idAnchor":"1Lab.HLevel.html#1847","idDesc":null,"idIdent":"ii1","idType":"[0,1]"},{"idAnchor":"1Lab.HLevel.html#12235","idDesc":null,"idIdent":"is-prop-is-prop","idType":"is-prop (is-prop A)"},{"idAnchor":"1Lab.HLevel.html#1416","idDesc":null,"idIdent":"paths","idType":"(r : is-contr A) (x : A) → r .centre ≡ x"},{"idAnchor":"1Lab.HLevel.html#8566","idDesc":null,"idIdent":"is-hlevel-suc","idType":"(n : Nat) → is-hlevel A n → is-hlevel A (suc n)"},{"idAnchor":"1Lab.HLevel.html#13825","idDesc":null,"idIdent":"is-hlevel→is-hlevel-dep","idType":"(n : Nat) →\n((x : A) → is-hlevel (B₁ x) (suc n)) → is-hlevel-dep B₁ n"},{"idAnchor":"1Lab.HLevel.html#5638","idDesc":null,"idIdent":".extendedlambda0","idType":"(h : is-prop A) (x y : A) (p q : Path A x y) (i j : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → A"},{"idAnchor":"1Lab.HLevel.html#10279","idDesc":null,"idIdent":"Path-is-hlevel'","idType":"(n : Nat) → is-hlevel A (suc n) → (x y : A) → is-hlevel (x ≡ y) n"},{"idAnchor":"1Lab.HLevel.html#3356","idDesc":null,"idIdent":"is-set","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#11538","idDesc":null,"idIdent":"is-contr-is-prop","idType":"is-prop (is-contr A)"},{"idAnchor":"1Lab.HLevel.html#15117","idDesc":null,"idIdent":"is-prop→pathp-is-contr","idType":"((i : I) → is-prop (A i)) →\n(x : A i0) (y : A i1) → is-contr (PathP A x y)"},{"idAnchor":"1Lab.HLevel.html#13076","idDesc":null,"idIdent":"is-hlevel-dep","idType":"(A → Type ℓ') → Nat → Type (ℓ ⊔ ℓ')"},{"idAnchor":"1Lab.HLevel.html#1808","idDesc":null,"idIdent":"[0,1]","idType":"Type"},{"idAnchor":"1Lab.HLevel.html#9181","idDesc":null,"idIdent":"is-prop→is-hlevel-suc","idType":"is-prop A → is-hlevel A (suc n)"},{"idAnchor":"1Lab.HLevel.html#2042","idDesc":null,"idIdent":"interval-contractible","idType":"is-contr [0,1]"},{"idAnchor":"1Lab.HLevel.html#13498","idDesc":null,"idIdent":"is-prop→pathp","idType":"((i : I) → is-prop (B₁ i)) →\n(b0 : B₁ i0) (b1 : B₁ i1) → PathP B₁ b0 b1"},{"idAnchor":"1Lab.HLevel.html#2813","idDesc":null,"idIdent":"is-hlevel","idType":"Type ℓ → Nat → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#9678","idDesc":null,"idIdent":"Path-is-hlevel","idType":"(n : Nat) → is-hlevel A n → is-hlevel (x ≡ y) n"},{"idAnchor":"1Lab.HLevel.html#1831","idDesc":null,"idIdent":"ii0","idType":"[0,1]"},{"idAnchor":"1Lab.HLevel.html#12473","idDesc":null,"idIdent":"is-hlevel-is-prop","idType":"(n : Nat) → is-prop (is-hlevel A n)"},{"idAnchor":"1Lab.HLevel.html#2597","idDesc":null,"idIdent":"is-prop","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#5554","idDesc":null,"idIdent":"is-prop→is-set","idType":"is-prop A → is-set A"},{"idAnchor":"1Lab.HLevel.html#4342","idDesc":null,"idIdent":".extendedlambda0","idType":"(A : I → Type ℓ) (a : A i0) (x : A i1) (p : PathP A a x)\n(i j j₁ : I) →\n.(IsOne (~ i ∨ i)) → A j₁"},{"idAnchor":"1Lab.HLevel.html#11703","idDesc":null,"idIdent":".extendedlambda0","idType":"(c₁ : A) (h₁ : (x : A) → c₁ ≡ x) (c₂ : A) (h₂ : (x : A) → c₂ ≡ x)\n(i : I) (x : A) (j : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → A"},{"idAnchor":"1Lab.HLevel.html#10482","idDesc":null,"idIdent":"Path-p-is-hlevel'","idType":"(n : Nat) →\nis-hlevel (A i1) (suc n) →\n(x : A i0) (y : A i1) → is-hlevel (PathP A x y) n"},{"idAnchor":"1Lab.HLevel.html#14174","idDesc":null,"idIdent":"helper","idType":"(n : Nat) →\n((x : A) → is-hlevel (B₁ x) (suc (suc n))) →\n(b0 : B₁ a0) →\nB₁ a1 →\n(a1 : A) (p : a0 ≡ a1) (b1 : B₁ a1) →\nis-hlevel (PathP (λ i → B₁ (p i)) b0 b1) (suc n)"},{"idAnchor":"1Lab.HLevel.html#15038","idDesc":null,"idIdent":"base","idType":"((i j : I) → is-prop (B₁ i j)) →\nPathP (λ j → B₁ j i0) a c →\nPathP (B₁ i0) a b →\nPathP (B₁ i1) c d →\nPathP (λ j → B₁ j i1) b d → I → I → (i j : I) → B₁ i j"},{"idAnchor":"1Lab.HLevel.html#8872","idDesc":null,"idIdent":"is-hlevel-+","idType":"(n k : Nat) → is-hlevel A n → is-hlevel A (k + n)"},{"idAnchor":"1Lab.HLevel.html#4032","idDesc":null,"idIdent":"SingletonP","idType":"(A : I → Type ℓ) (a : A i0) → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#14783","idDesc":null,"idIdent":".extendedlambda0","idType":"(is-propB : (i j : I) → is-prop (B₁ i j))\n(p : PathP (λ j → B₁ j i0) a c) (q : PathP (B₁ i0) a b)\n(s : PathP (B₁ i1) c d) (r : PathP (λ j → B₁ j i1) b d) (i j : I) →\nI → Partial (~ j ∨ j ∨ ~ i ∨ i) (B₁ i j)"},{"idAnchor":"1Lab.HLevel.html#15401","idDesc":null,"idIdent":"is-set→squarep","idType":"((i j : I) → is-set (A i j)) →\n(p : PathP (λ j → A j i0) a c) (q : PathP (A i0) a b)\n(s : PathP (A i1) c d) (r : PathP (λ j → A j i1) b d) →\nSquareP A p q s r"},{"idAnchor":"1Lab.HLevel.html#1863","idDesc":null,"idIdent":"seg","idType":"ii0 ≡ ii1"},{"idAnchor":"1Lab.HLevel.html#3488","idDesc":null,"idIdent":"is-groupoid","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.HLevel.html#4742","idDesc":null,"idIdent":"contractible-if-inhabited","idType":"(A → is-contr A) → is-prop A"},{"idAnchor":"1Lab.HLevel.Universe.html#1499","idDesc":null,"idIdent":"f-eqv","idType":"(Ahl : is-hlevel A zero) (Bhl : is-hlevel B₁ zero) →\nis-equiv (f Ahl Bhl)"},{"idAnchor":"1Lab.HLevel.Universe.html#5063","idDesc":null,"idIdent":"n-Type-is-hlevel","idType":"(n : Nat) → is-hlevel (n-Type ℓ n) (suc n)"},{"idAnchor":"1Lab.HLevel.Universe.html#5974","idDesc":null,"idIdent":"H-Level-nType","idType":"H-Level (n-Type ℓ k) (1 + k + n)"},{"idAnchor":"1Lab.HLevel.Universe.html#3194","idDesc":null,"idIdent":"_,_","idType":"(∣_∣₁ : Type ℓ) (is-tr₁ : is-hlevel ∣_∣₁ n) → n-Type ℓ n"},{"idAnchor":"1Lab.HLevel.Universe.html#3229","idDesc":null,"idIdent":"is-tr","idType":"(r : n-Type ℓ n) → is-hlevel (r .∣_∣) n"},{"idAnchor":"1Lab.HLevel.Universe.html#5575","idDesc":null,"idIdent":"n-Type-square","idType":"Square (ap ∣_∣ p) (ap ∣_∣ q) (ap ∣_∣ s) (ap ∣_∣ r) → Square p q s r"},{"idAnchor":"1Lab.HLevel.Universe.html#2838","idDesc":null,"idIdent":"≡-is-hlevel","idType":"(n : Nat) → is-hlevel A n → is-hlevel B₁ n → is-hlevel (A ≡ B₁) n"},{"idAnchor":"1Lab.HLevel.Universe.html#4448","idDesc":null,"idIdent":"path","idType":"n-ua (inv refl) ≡ refl"},{"idAnchor":"1Lab.HLevel.Universe.html#4227","idDesc":null,"idIdent":"linv","idType":"is-left-inverse inv n-ua"},{"idAnchor":"1Lab.HLevel.Universe.html#2127","idDesc":null,"idIdent":"deform","idType":"(Ahl : is-hlevel A zero) (Bhl : is-hlevel B₁ zero) (g : A ≃ B₁) →\n(f Ahl Bhl , f-eqv Ahl Bhl) ≡ g"},{"idAnchor":"1Lab.HLevel.Universe.html#1466","idDesc":null,"idIdent":"f","idType":"(Ahl : is-hlevel A zero) (Bhl : is-hlevel B₁ zero) → A → B₁"},{"idAnchor":"1Lab.HLevel.Universe.html#3210","idDesc":null,"idIdent":"∣_∣","idType":"n-Type ℓ n → Type ℓ"},{"idAnchor":"1Lab.HLevel.Universe.html#3129","idDesc":null,"idIdent":"n-Type","idType":"(ℓ : Level) (n : Nat) → Type (lsuc ℓ)"},{"idAnchor":"1Lab.HLevel.Universe.html#1312","idDesc":null,"idIdent":"≃-is-hlevel","idType":"(n : Nat) → is-hlevel A n → is-hlevel B₁ n → is-hlevel (A ≃ B₁) n"},{"idAnchor":"1Lab.HLevel.Universe.html#5510","idDesc":null,"idIdent":"Prop","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"1Lab.HLevel.Universe.html#5464","idDesc":null,"idIdent":"Set","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"1Lab.HLevel.Universe.html#4348","idDesc":null,"idIdent":"rinv","idType":"is-right-inverse inv n-ua"},{"idAnchor":"1Lab.HLevel.Universe.html#3814","idDesc":null,"idIdent":"n-ua","idType":"∣ X ∣ ≃ ∣ Y ∣ → X ≡ Y"},{"idAnchor":"1Lab.HLevel.Universe.html#4156","idDesc":null,"idIdent":"inv","idType":"X ≡ Y → ∣ X ∣ ≃ ∣ Y ∣"},{"idAnchor":"1Lab.HLevel.Universe.html#3284","idDesc":null,"idIdent":"H-Level-n-type","idType":"(r : n-Type ℓ n) → H-Level ∣ r ∣ (n + k)"},{"idAnchor":"1Lab.HLevel.Universe.html#4824","idDesc":null,"idIdent":"isic","idType":"is-iso n-ua"},{"idAnchor":"1Lab.HLevel.Universe.html#4017","idDesc":null,"idIdent":"n-univalence","idType":"(∣ X ∣ ≃ ∣ Y ∣) ≃ (X ≡ Y)"},{"idAnchor":"1Lab.HLevel.Universe.html#6106","idDesc":null,"idIdent":"H-Level-is-equiv","idType":"H-Level (is-equiv f) (suc n)"},{"idAnchor":"Data.Set.Truncation.html#714","idDesc":null,"idIdent":"inc","idType":"A → ∥ A ∥₀"},{"idAnchor":"Data.Set.Truncation.html#1265","idDesc":null,"idIdent":"g","idType":"(Bset : (x : ∥ A ∥₀) → is-set (B₁ x)) (binc : (x : A) → B₁ (inc x))\n(x y : ∥ A ∥₀) (p q : Path ∥ A ∥₀ x y) (i j : I) (x₁ : ∥ A ∥₀) →\nB₁ x₁"},{"idAnchor":"Data.Set.Truncation.html#2398","idDesc":null,"idIdent":"∥-∥₀-map₂","idType":"(A → B₁ → C) → ∥ A ∥₀ → ∥ B₁ ∥₀ → ∥ C ∥₀"},{"idAnchor":"Data.Set.Truncation.html#918","idDesc":null,"idIdent":"∥-∥₀-elim","idType":"((x : ∥ A ∥₀) → is-set (B₁ x)) →\n((x : A) → B₁ (inc x)) → (x : ∥ A ∥₀) → B₁ x"},{"idAnchor":"Data.Set.Truncation.html#3197","idDesc":null,"idIdent":"∥-∥₀-elim₃","idType":"((x : ∥ A ∥₀) (y : ∥ B₁ ∥₀) (z : ∥ C ∥₀) → is-set (D x y z)) →\n((x : A) (y : B₁) (z : C) → D (inc x) (inc y) (inc z)) →\n(x : ∥ A ∥₀) (y : ∥ B₁ ∥₀) (z : ∥ C ∥₀) → D x y z"},{"idAnchor":"Data.Set.Truncation.html#1819","idDesc":null,"idIdent":"inc∘proj","idType":"(aset : is-set A) (x : ∥ A ∥₀) → inc (proj aset x) ≡ x"},{"idAnchor":"Data.Set.Truncation.html#736","idDesc":null,"idIdent":"squash","idType":"is-set ∥ A ∥₀"},{"idAnchor":"Data.Set.Truncation.html#1493","idDesc":null,"idIdent":"∥-∥₀-idempotent","idType":"is-set A → is-equiv inc"},{"idAnchor":"Data.Set.Truncation.html#2904","idDesc":null,"idIdent":"∥-∥₀-elim₂","idType":"((x : ∥ A ∥₀) (y : ∥ B₁ ∥₀) → is-set (C x y)) →\n((x : A) (y : B₁) → C (inc x) (inc y)) →\n(x : ∥ A ∥₀) (y : ∥ B₁ ∥₀) → C x y"},{"idAnchor":"Data.Set.Truncation.html#675","idDesc":null,"idIdent":"∥_∥₀","idType":"Type ℓ → Type ℓ"},{"idAnchor":"Data.Set.Truncation.html#2122","idDesc":null,"idIdent":"∥-∥₀-map","idType":"(A → B₁) → ∥ A ∥₀ → ∥ B₁ ∥₀"},{"idAnchor":"Data.Set.Truncation.html#1672","idDesc":null,"idIdent":"proj","idType":"(aset : is-set A) → ∥ A ∥₀ → A"},{"idAnchor":"Cat.Instances.Slice.html#8965","idDesc":null,"idIdent":"is-pullback→π₂","idType":"(pb : is-pullback C π₁ (map f) π₂ (map g)) →\nSlice C c .Hom (is-pullback→product-over pb) g"},{"idAnchor":"Cat.Instances.Slice.html#9597","idDesc":null,"idIdent":"factor","idType":"(pb : is-pullback C π₁ (map f) π₂ (map g))\n(/f : Hom (Slice C c) Q f) (/g : Hom (Slice C c) Q g) →\nSlice C c .Hom Q (is-pullback→product-over pb)"},{"idAnchor":"Cat.Instances.Slice.html#4161","idDesc":null,"idIdent":"/-Hom-is-set","idType":"is-set (/-Hom a b)"},{"idAnchor":"Cat.Instances.Slice.html#2264","idDesc":null,"idIdent":"cut","idType":"(map₁ : Hom C domain c) → /-Obj c"},{"idAnchor":"Cat.Instances.Slice.html#15379","idDesc":null,"idIdent":"linv","idType":"is-left-inverse (F₁ Total-space) from"},{"idAnchor":"Cat.Instances.Slice.html#17880","idDesc":null,"idIdent":"Ad≡Bd","idType":"(isc : is-category C) (A B₁ : Ob (Slice C o))\n(isom : (Slice C o ≅ A) B₁) →\nA .domain ≡ B₁ .domain"},{"idAnchor":"Cat.Instances.Slice.html#22322","idDesc":null,"idIdent":"is-complete→slice-is-complete","idType":"is-complete o′ ℓ′ C → is-complete o′ ℓ′ (Slice C c)"},{"idAnchor":"Cat.Instances.Slice.html#16488","idDesc":null,"idIdent":"functor","idType":"(fam : Slice (Sets ℓ) I₁ .Ob) → Functor (Disc′ I₁) (Sets ℓ)"},{"idAnchor":"Cat.Instances.Slice.html#2816","idDesc":null,"idIdent":"/-Hom","idType":"(a b : /-Obj c) → Type ℓ"},{"idAnchor":"Cat.Instances.Slice.html#16373","idDesc":null,"idIdent":"Total-space-is-eso","idType":"is-split-eso Total-space"},{"idAnchor":"Cat.Instances.Slice.html#18221","idDesc":null,"idIdent":"eql","idType":"(isc : is-category C) (A B₁ : Ob (Slice C o))\n(isom : (Slice C o ≅ A) B₁) →\nPathP (λ i → (Slice C o ≅ A) (A≡B isc A B₁ isom i))\n(id-iso (Slice C o)) isom"},{"idAnchor":"Cat.Instances.Slice.html#14716","idDesc":null,"idIdent":"Total-space-is-ff","idType":"is-fully-faithful Total-space"},{"idAnchor":"Cat.Instances.Slice.html#18062","idDesc":null,"idIdent":"Af≡Bf","idType":"(isc : is-category C) (A B₁ : Ob (Slice C o))\n(isom : (Slice C o ≅ A) B₁) →\nPathP (λ i → C .Hom (Ad≡Bd isc A B₁ isom i) o) (A .map) (B₁ .map)"},{"idAnchor":"Cat.Instances.Slice.html#3307","idDesc":null,"idIdent":"/-Hom-pathp","idType":"(p : a ≡ a′) (q : b ≡ b′) →\nPathP (λ i → Hom C (p i .domain) (q i .domain)) (x .map) (y .map) →\nPathP (λ i → /-Hom (p i) (q i)) x y"},{"idAnchor":"Cat.Instances.Slice.html#10139","idDesc":null,"idIdent":"Pullback→Fibre-product","idType":"Pullback C (f .map) (g .map) → Product (Slice C c) f g"},{"idAnchor":"Cat.Instances.Slice.html#3664","idDesc":null,"idIdent":"path","idType":"(p : a ≡ a′) (q : b ≡ b′)\n(r\n : PathP (λ i → Hom C (p i .domain) (q i .domain)) (x .map)\n   (y .map)) →\nPathP (λ i → /-Hom (p i) (q i)) x y"},{"idAnchor":"Cat.Instances.Slice.html#11174","idDesc":null,"idIdent":"pullback-above→pullback-below","idType":"is-pullback C (p1 .map) (f .map) (p2 .map) (g .map) →\nis-pullback (Slice C X) p1 f p2 g"},{"idAnchor":"Cat.Instances.Slice.html#18187","idDesc":null,"idIdent":"A≡B","idType":"(isc : is-category C) (A B₁ : Ob (Slice C o))\n(isom : (Slice C o ≅ A) B₁) →\nA ≡ B₁"},{"idAnchor":"Cat.Instances.Slice.html#21263","idDesc":null,"idIdent":"lim","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F)) → Limit F"},{"idAnchor":"Cat.Instances.Slice.html#9371","idDesc":null,"idIdent":"is-pullback→is-fibre-product","idType":"(pb : is-pullback C π₁ (map f) π₂ (map g)) →\nis-product (Slice C c) (is-pullback→π₁ pb) (is-pullback→π₂ pb)"},{"idAnchor":"Cat.Instances.Slice.html#21750","idDesc":null,"idIdent":"ch","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F))\n(other : Cones F .Ob) →\nCone-hom F other (nadir F lims)"},{"idAnchor":"Cat.Instances.Slice.html#14907","idDesc":null,"idIdent":"from","idType":"/-Hom (Total-space .F₀ f1) (Total-space .F₀ f2) → f1 => f2"},{"idAnchor":"Cat.Instances.Slice.html#12231","idDesc":null,"idIdent":"pullback-below→pullback-above","idType":"is-pullback (Slice C X) p1 f p2 g →\nis-pullback C (p1 .map) (f .map) (p2 .map) (g .map)"},{"idAnchor":"Cat.Instances.Slice.html#2285","idDesc":null,"idIdent":"domain","idType":"/-Obj c → Ob C"},{"idAnchor":"Cat.Instances.Slice.html#21946","idDesc":null,"idIdent":"cont","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F))\n(other : Cones F .Ob) (c : Cone-hom F other (nadir F lims)) →\nch F lims other ≡ c"},{"idAnchor":"Cat.Instances.Slice.html#15006","idDesc":null,"idIdent":"eta","idType":"/-Hom (Total-space .F₀ f1) (Total-space .F₀ f2) →\n(i : Disc′ I₁ .Ob) → ∣ F₀ f1 i ∣ → ∣ F₀ f2 i ∣"},{"idAnchor":"Cat.Instances.Slice.html#21346","idDesc":null,"idIdent":"other′","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F))\n(other : Cones F .Ob) →\nCone (F′ F)"},{"idAnchor":"Cat.Instances.Slice.html#11561","idDesc":null,"idIdent":"pb′","idType":"(pb : is-pullback C (p1 .map) (f .map) (p2 .map) (g .map)) →\nis-pullback (Slice C X) p1 f p2 g"},{"idAnchor":"Cat.Instances.Slice.html#4102","idDesc":null,"idIdent":"eqv","idType":"Iso (/-Hom a b)\n(∑ (Hom C (a .domain) (domain b))\n (λ map₁ → (C ∘ map b) map₁ ≡ a .map))"},{"idAnchor":"Cat.Instances.Slice.html#4300","idDesc":null,"idIdent":"hl","idType":"is-set (/-Hom a b)"},{"idAnchor":"Cat.Instances.Slice.html#2190","idDesc":null,"idIdent":"/-Obj","idType":"(c : Ob C) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Instances.Slice.html#6171","idDesc":null,"idIdent":"Slice-terminal-object","idType":"is-terminal (Slice C c) (cut (C .id))"},{"idAnchor":"Cat.Instances.Slice.html#20853","idDesc":null,"idIdent":"limit-above→limit-in-slice","idType":"(F : Functor J₁ (Slice C o)) → Limit (F′ F) → Limit F"},{"idAnchor":"Cat.Instances.Slice.html#3929","idDesc":null,"idIdent":"/-Hom-path","idType":"x .map ≡ y .map → x ≡ y"},{"idAnchor":"Cat.Instances.Slice.html#22212","idDesc":null,"idIdent":"uniq","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F))\n(other : Cones F .Ob) (c : Cone-hom F other (nadir F lims)) →\nhas⊤ lims (other′ F lims other) .centre ≡ c′ F lims other c"},{"idAnchor":"Cat.Instances.Slice.html#8083","idDesc":null,"idIdent":"is-pullback→product-over","idType":"(pb : is-pullback C π₁ (map f) π₂ (map g)) → Slice C c .Ob"},{"idAnchor":"Cat.Instances.Slice.html#16845","idDesc":null,"idIdent":"path","idType":"(fam : Slice (Sets ℓ) I₁ .Ob) → F₀ Total-space (functor fam) ≡ fam"},{"idAnchor":"Cat.Instances.Slice.html#22038","idDesc":null,"idIdent":"c′","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F))\n(other : Cones F .Ob) (c : Cone-hom F other (nadir F lims)) →\nCone-hom (F′ F) (other′ F lims other) (top lims)"},{"idAnchor":"Cat.Instances.Slice.html#8827","idDesc":null,"idIdent":"is-pullback→π₁","idType":"(pb : is-pullback C π₁ (map f) π₂ (map g)) →\nSlice C c .Hom (is-pullback→product-over pb) f"},{"idAnchor":"Cat.Instances.Slice.html#13935","idDesc":null,"idIdent":"Total-space","idType":"Functor Cat[ Disc′ I₁ , Sets ℓ ] (Slice (Sets ℓ) I₁)"},{"idAnchor":"Cat.Instances.Slice.html#4649","idDesc":null,"idIdent":"precat","idType":"(C : Precategory o ℓ) (c : Ob C) → Precategory (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Instances.Slice.html#21015","idDesc":null,"idIdent":"nadir","idType":"(F : Functor J₁ (Slice C o)) (lims : Limit (F′ F)) → Cone F"},{"idAnchor":"Cat.Instances.Slice.html#3045","idDesc":null,"idIdent":"/-Obj-path","idType":"(p : x .domain ≡ y .domain) →\nPathP (λ i → Hom C (p i) c) (x .map) (y .map) → x ≡ y"},{"idAnchor":"Cat.Instances.Slice.html#20273","idDesc":null,"idIdent":"F′","idType":"(F : Functor J₁ (Slice C o)) → Functor (J₁ ⋆ ⊤Cat) C"},{"idAnchor":"Cat.Instances.Slice.html#4479","idDesc":null,"idIdent":"Slice","idType":"(C : Precategory o ℓ) → Ob C → Precategory (o ⊔ ℓ) ℓ"},{"idAnchor":"Cat.Instances.Slice.html#15150","idDesc":null,"idIdent":"nt","idType":"(mp : /-Hom (Total-space .F₀ f1) (Total-space .F₀ f2)) → f1 => f2"},{"idAnchor":"Cat.Instances.Slice.html#2992","idDesc":null,"idIdent":"commutes","idType":"(r : /-Hom a b) → (C ∘ map b) (r .map) ≡ a .map"},{"idAnchor":"Cat.Instances.Slice.html#12600","idDesc":null,"idIdent":"pb′","idType":"(pb : is-pullback (Slice C X) p1 f p2 g) →\nis-pullback C (p1 .map) (f .map) (p2 .map) (g .map)"},{"idAnchor":"Cat.Instances.Slice.html#2951","idDesc":null,"idIdent":"map","idType":"/-Hom a b → Hom C (a .domain) (domain b)"},{"idAnchor":"Cat.Instances.Slice.html#2306","idDesc":null,"idIdent":"map","idType":"(r : /-Obj c) → Hom C (r .domain) c"},{"idAnchor":"Cat.Instances.Slice.html#5486","idDesc":null,"idIdent":"fog","idType":"(C : Precategory o ℓ) (c : Ob C) (f : precat C c .Hom y z)\n(g : precat C c .Hom x y) →\n/-Hom x z"},{"idAnchor":"Cat.Instances.Slice.html#17721","idDesc":null,"idIdent":"slice-is-category","idType":"(isc : is-category C) → is-category (Slice C o)"},{"idAnchor":"Cat.Diagram.Initial.html#326","idDesc":null,"idIdent":"is-initial","idType":"(C : Precategory o h) → Ob C → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Initial.html#646","idDesc":null,"idIdent":"¡-unique","idType":"(r : Initial C) (h : Hom C (bot r) x) → ¡ r ≡ h"},{"idAnchor":"Cat.Diagram.Initial.html#600","idDesc":null,"idIdent":"¡","idType":"(r : Initial C) → Hom C (bot r) x"},{"idAnchor":"Cat.Diagram.Initial.html#1977","idDesc":null,"idIdent":"⊥-contractible","idType":"(C : Precategory o h) → is-category C → is-prop (Initial C)"},{"idAnchor":"Cat.Diagram.Initial.html#456","idDesc":null,"idIdent":"has⊥","idType":"(r : Initial C) → is-initial C (r .bot)"},{"idAnchor":"Cat.Diagram.Initial.html#442","idDesc":null,"idIdent":"bot","idType":"Initial C → Ob C"},{"idAnchor":"Cat.Diagram.Initial.html#401","idDesc":null,"idIdent":"Initial","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Initial.html#717","idDesc":null,"idIdent":"¡-unique₂","idType":"(r : Initial C) (f g : Hom C (bot r) x) → f ≡ g"},{"idAnchor":"Cat.Diagram.Initial.html#1755","idDesc":null,"idIdent":"⊥-unique","idType":"(C : Precategory o h) (i i′ : Initial C) → (C ≅ bot i) (bot i′)"},{"idAnchor":"Topoi.Reasoning.html#2854","idDesc":null,"idIdent":"product-presheaf","idType":"(T : Topos ℓ 𝒯) (A B₁ : Ob 𝒯) →\nProduct (PSh ℓ (site T)) (₀ T A) (₀ T B₁)"},{"idAnchor":"Topoi.Reasoning.html#3694","idDesc":null,"idIdent":"pullback-presheaf","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z) →\nPullback (PSh ℓ (site T)) (₁ T f) (₁ T g)"},{"idAnchor":"Topoi.Reasoning.html#2775","idDesc":null,"idIdent":"product-sheaf","idType":"Topos ℓ 𝒯 → (A B₁ : Ob 𝒯) → Product 𝒯 A B₁"},{"idAnchor":"Topoi.Reasoning.html#3571","idDesc":null,"idIdent":"pullback-sheaf","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z) → Pullback 𝒯 f g"},{"idAnchor":"Topoi.Reasoning.html#4772","idDesc":null,"idIdent":"path","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z)\n(p : (𝒯 ∘ f) p₁' ≡ (𝒯 ∘ g) p₂') →\n(T ∘ ₁ T (₁ T f)) ((T ∘ η T X) p₁') ≡\n(T ∘ ₁ T (₁ T g)) ((T ∘ η T Y) p₂')"},{"idAnchor":"Topoi.Reasoning.html#1564","idDesc":null,"idIdent":"ε⁻¹","idType":"(T : Topos ℓ 𝒯) → Id => T .L F∘ T .ι"},{"idAnchor":"Topoi.Reasoning.html#1709","idDesc":null,"idIdent":"psh-equal","idType":"(T : Topos ℓ 𝒯) → ₁ T f ≡ ₁ T g → f ≡ g"},{"idAnchor":"Topoi.Reasoning.html#3975","idDesc":null,"idIdent":"pullback′","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z) → Pullback 𝒯 f g"},{"idAnchor":"Topoi.Reasoning.html#2615","idDesc":null,"idIdent":"terminal-sheaf","idType":"(T : Topos ℓ 𝒯) → Terminal 𝒯"},{"idAnchor":"Topoi.Reasoning.html#4165","idDesc":null,"idIdent":"pb′","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z) →\nis-pullback 𝒯 ((T ∘ ε T X) (₁ T (pullback-presheaf T f g .p₁))) f\n((T ∘ ε T Y) (₁ T (pullback-presheaf T f g .p₂))) g"},{"idAnchor":"Topoi.Reasoning.html#4244","idDesc":null,"idIdent":"square′","idType":"(T : Topos ℓ 𝒯) (f : Hom T X Z) (g : Hom T Y Z) →\n(T ∘ f) ((T ∘ ε T X) (₁ T (pullback-presheaf T f g .p₁))) ≡\n(T ∘ g) ((T ∘ ε T Y) (₁ T (pullback-presheaf T f g .p₂)))"},{"idAnchor":"Topoi.Reasoning.html#1424","idDesc":null,"idIdent":"Lι-iso","idType":"(T : Topos ℓ 𝒯) (x : 𝒯 .Ob) → is-invertible T (ε T x)"},{"idAnchor":"Topoi.Reasoning.html#5564","idDesc":null,"idIdent":"finitely-complete","idType":"(T : Topos ℓ 𝒯) → Finitely-complete 𝒯"},{"idAnchor":"Topoi.Reasoning.html#2983","idDesc":null,"idIdent":"product′","idType":"(T : Topos ℓ 𝒯) (A B₁ : Ob 𝒯) → Product 𝒯 A B₁"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1366","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : A) (v : P x) (p : total f (x , v) ≡ (x₁ , v₁)) (y : Σ Q) →\ntotal f (x , v) ≡ y → Type (P.ℓ ⊔ Q.ℓ)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1694","idDesc":null,"idIdent":".extendedlambda2","idType":"(x : A) (v : P x) (p : total f (x , v) ≡ (x₁ , v₁)) (y : Σ Q) →\n(x , f x v) ≡ y → Type (P.ℓ ⊔ Q.ℓ)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#946","idDesc":null,"idIdent":"total-fibres","idType":"Iso (fibre (f x) v) (fibre (total f) (x , v))"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1160","idDesc":null,"idIdent":"to","idType":"fibre (f x) v → fibre (total f) (x , v)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#2357","idDesc":null,"idIdent":"equiv→total","idType":"is-equiv (f x) → is-equiv (total f)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#767","idDesc":null,"idIdent":"total","idType":"((x : A) → P x → Q x) → Σ P → Σ Q"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1428","idDesc":null,"idIdent":"the-iso","idType":"Iso (fibre (f x) v) (fibre (total f) (x , v))"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1860","idDesc":null,"idIdent":".extendedlambda4","idType":"(v : P x) (p : f x v ≡ v₁) (y : Σ Q) →\n(x , f x v) ≡ y → Type (P.ℓ ⊔ Q.ℓ)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1609","idDesc":null,"idIdent":".extendedlambda1","idType":"(x : A) (v : P x) (p : total f (x , v) ≡ (x₁ , v₁)) (y : Σ Q) →\ntotal f (x , v) ≡ y → Type (Q..1 ⊔ P.ℓ ⊔ Q.ℓ)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#2067","idDesc":null,"idIdent":"total→equiv","idType":"is-equiv (total f) → is-equiv (f x)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1794","idDesc":null,"idIdent":".extendedlambda3","idType":"(v : P x) (p : f x v ≡ v₁) (y : Q x) → f x v ≡ y → Type (P.ℓ ⊔ Q.ℓ)"},{"idAnchor":"1Lab.Equiv.Fibrewise.html#1269","idDesc":null,"idIdent":"from","idType":"fibre (total f) (x , v) → fibre (f x) v"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4274","idDesc":null,"idIdent":"is-coproduct","idType":"is-disjoint-coproduct C F ι → is-indexed-coproduct C F ι"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#5000","idDesc":null,"idIdent":"is-coprod","idType":"(C : Precategory o ℓ) (init : is-initial C ∅) →\nis-indexed-coproduct C F i"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4763","idDesc":null,"idIdent":"is-initial→is-disjoint-coproduct","idType":"(C : Precategory o ℓ) →\nis-initial C ∅ → is-disjoint-coproduct C F i"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1497","idDesc":null,"idIdent":"has-indexed-coproducts","idType":"(C : Precategory o ℓ) (ℓ : Level) → Type (o ⊔ ℓ₁ ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#2890","idDesc":null,"idIdent":"Colimit→IC","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) →\nColimit F → Indexed-coproduct C (₀ F)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#777","idDesc":null,"idIdent":"commute","idType":"(r : is-indexed-coproduct C F ι) → (C ∘ r .match f) (ι i) ≡ f i"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#3023","idDesc":null,"idIdent":"the-ic","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) (colim : Colimit F) →\nIndexed-coproduct C (₀ F)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#5205","idDesc":null,"idIdent":"is-disjoint","idType":"(C : Precategory o ℓ) (init : is-initial C ∅) →\nis-disjoint-coproduct C F i"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1886","idDesc":null,"idIdent":"IC→Colimit","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁)\n(F : I₁ → Ob C) →\nIndexed-coproduct C F → Colimit (Disc-adjunct F)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4434","idDesc":null,"idIdent":"different-images-are-disjoint","idType":"(r : is-disjoint-coproduct C F ι) (i j : Idx) →\n(i ≡ j → ⊥) → is-initial C (r .summands-intersect i j .apex)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1255","idDesc":null,"idIdent":"Indexed-coproduct","idType":"(C : Precategory o ℓ) (F : Idx → Ob C) → Type (o ⊔ ℓ ⊔ Idx.ℓ')"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#976","idDesc":null,"idIdent":"eta","idType":"(r : is-indexed-coproduct C F ι) (h : Hom C S₁ Y) →\nh ≡ match r (λ i → (C ∘ h) (ι i))"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1377","idDesc":null,"idIdent":"ι","idType":"(r : Indexed-coproduct C F) (i : Idx) → Hom C (F i) (r .ΣF)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#851","idDesc":null,"idIdent":"unique","idType":"(r : is-indexed-coproduct C F ι) (f : (i : Idx) → Hom C (F i) Y) →\n((i : Idx) → (C ∘ h) (ι i) ≡ f i) → h ≡ r .match f"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#721","idDesc":null,"idIdent":"match","idType":"is-indexed-coproduct C F ι →\n((i : Idx) → Hom C (F i) Y) → Hom C S₁ Y"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#2702","idDesc":null,"idIdent":"Inj→Cocone","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) →\n((i : Disc I₁ isg .Ob) → Hom C (₀ F i) Y) → Cocone F"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#589","idDesc":null,"idIdent":"is-indexed-coproduct","idType":"(C : Precategory o ℓ) (F : Idx → Ob C)\n(ι : (i : Idx) → Hom C (F i) S₁) →\nType (o ⊔ ℓ ⊔ Idx.ℓ')"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#2256","idDesc":null,"idIdent":"colim","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁) (F : I₁ → Ob C)\n(IC : Indexed-coproduct C F) →\nColimit (Disc-adjunct F)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4159","idDesc":null,"idIdent":"is-disjoint-coproduct","idType":"(C : Precategory o ℓ) (F : Idx → Ob C)\n(ι : (i : Idx) → Hom C (F i) S₁) →\nType (o ⊔ ℓ ⊔ Idx.ℓ')"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1414","idDesc":null,"idIdent":"has-is-ic","idType":"(r : Indexed-coproduct C F) → is-indexed-coproduct C F (r .ι)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#1357","idDesc":null,"idIdent":"ΣF","idType":"Indexed-coproduct C F → Ob C"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4376","idDesc":null,"idIdent":"summands-intersect","idType":"is-disjoint-coproduct C F ι → (i j : Idx) → Pullback C (ι i) (ι j)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#4326","idDesc":null,"idIdent":"injections-are-monic","idType":"is-disjoint-coproduct C F ι → (i : Idx) → is-monic C (ι i)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#3367","idDesc":null,"idIdent":"h′","idType":"(C : Precategory o ℓ) (isg : is-groupoid I₁)\n(F : Functor (Disc I₁ isg) C) (colim : Colimit F)\n(f : (i : Disc I₁ isg .Ob) → Hom C (₀ F i) Y)\n(p\n : (i : Disc I₁ isg .Ob) →\n   (C ∘ h) (the-ic C isg F colim .ι i) ≡ f i)\n(i : I) →\nCocone-hom F (colim .bot) (Inj→Cocone C isg F f)"},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#2044","idDesc":null,"idIdent":"thecolim","idType":"(C : Precategory o ℓ) (i-is-grpd : is-groupoid I₁) (F : I₁ → Ob C)\n(IC : Indexed-coproduct C F) →\nCocone (Disc-adjunct F)"},{"idAnchor":"1Lab.HIT.Suspension.html#314","idDesc":null,"idIdent":"S","idType":"Susp A"},{"idAnchor":"1Lab.HIT.Suspension.html#329","idDesc":null,"idIdent":"merid","idType":"A → N ≡ S"},{"idAnchor":"1Lab.HIT.Suspension.html#273","idDesc":null,"idIdent":"Susp","idType":"Type ℓ → Type ℓ"},{"idAnchor":"1Lab.HIT.Suspension.html#312","idDesc":null,"idIdent":"N","idType":"Susp A"},{"idAnchor":"Cat.Instances.Functor.Duality.html#1130","idDesc":null,"idIdent":"isom","idType":"is-precat-iso op-functor→"},{"idAnchor":"Cat.Instances.Functor.Duality.html#724","idDesc":null,"idIdent":"op-functor→","idType":"Functor (Cat[ C , D ] ^op) Cat[ C ^op , D ^op ]"},{"idAnchor":"Cat.Instances.Functor.Duality.html#1845","idDesc":null,"idIdent":"op-functor←→","idType":"op-functor← F∘ op-functor→ ≡ Id"},{"idAnchor":"Cat.Instances.Functor.Duality.html#1729","idDesc":null,"idIdent":"op-functor←","idType":"Functor Cat[ C ^op , D ^op ] (Cat[ C , D ] ^op)"},{"idAnchor":"Cat.Instances.Functor.Duality.html#1202","idDesc":null,"idIdent":"ff","idType":"is-iso (F₁ op-functor→)"},{"idAnchor":"Cat.Instances.Functor.Duality.html#2495","idDesc":null,"idIdent":".extendedlambda0","idType":"(i : I) →\nI →\nPartial (~ i ∨ i)\n(Hom D (F₀ Y (transp (λ j → C .Ob) (i ∨ i) x))\n (F₀ Y (transp (λ j → C .Ob) (i ∨ i) x)))"},{"idAnchor":"Cat.Instances.Functor.Duality.html#997","idDesc":null,"idIdent":"op-functor-is-iso","idType":"is-precat-iso op-functor→"},{"idAnchor":"Cat.Instances.Functor.Duality.html#2198","idDesc":null,"idIdent":"lemma","idType":"coe0→1\n(λ i →\n   Hom D (F₀ Y (transp (λ j → C .Ob) i x))\n   (F₀ Y (transp (λ j → C .Ob) i x)))\n(id D)\n≡ id D"},{"idAnchor":"Cat.Instances.Functor.Duality.html#1592","idDesc":null,"idIdent":"op-functor-is-equiv","idType":"is-equivalence op-functor→"},{"idAnchor":"Cat.Instances.Functor.Duality.html#2956","idDesc":null,"idIdent":"op-natural-iso","idType":"(Cat[ C , D ] ≅ F) G → (Cat[ C ^op , D ^op ] ≅ op F) (op G)"},{"idAnchor":"1Lab.Univalence.SIP.html#23578","idDesc":null,"idIdent":"transfer-axioms","idType":"(A : Type-with (Axiom-str σ axioms)) (B₁ : Type-with σ) →\n(A .fst , A .snd .fst) ≃[ σ ] B₁ → axioms (B₁ .fst) (B₁ .snd)"},{"idAnchor":"1Lab.Univalence.SIP.html#7596","idDesc":null,"idIdent":"Product-str","idType":"Structure ℓ S₁ →\nStructure ℓ₂ T → Structure (ℓ ⊔ ℓ₂) (λ X → S₁ X × T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#24970","idDesc":null,"idIdent":"Term→action","idType":"Str-term ℓ ℓ₁ S₁ → Equiv-action S₁"},{"idAnchor":"1Lab.Univalence.SIP.html#19894","idDesc":null,"idIdent":"Id-action-is-transport","idType":"is-transport-str id"},{"idAnchor":"1Lab.Univalence.SIP.html#24298","idDesc":null,"idIdent":"s-const","idType":"(A : Type ℓ₁) → Str-term ℓ ℓ₁ (λ X → A)"},{"idAnchor":"1Lab.Univalence.SIP.html#15898","idDesc":null,"idIdent":"sym-transport-str","idType":"(α : Equiv-action S₁) →\nis-transport-str α →\n(e : X ≃ Y) (t : S₁ Y) →\nequiv→inverse (α e .snd) t ≡ subst S₁ (sym (ua e)) t"},{"idAnchor":"1Lab.Univalence.SIP.html#20154","idDesc":null,"idIdent":"Product-action-is-transport","idType":"is-transport-str α →\nis-transport-str β → is-transport-str (Product-action α β)"},{"idAnchor":"1Lab.Univalence.SIP.html#4663","idDesc":null,"idIdent":"SIP","idType":"is-univalent σ → (X ≃[ σ ] Y) ≃ (X ≡ Y)"},{"idAnchor":"1Lab.Univalence.SIP.html#24499","idDesc":null,"idIdent":"_s×_","idType":"Str-term ℓ ℓ₁ S₁ →\nStr-term ℓ ℓ₂ T → Str-term ℓ (ℓ₁ ⊔ ℓ₂) (λ X → S₁ X × T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#28196","idDesc":null,"idIdent":"axioms","idType":"Str-desc ℓ ℓ₁ S₁ ax → (X : Type ℓ) → S₁ X → Type ax"},{"idAnchor":"1Lab.Univalence.SIP.html#14229","idDesc":null,"idIdent":"is-transport-str","idType":"Equiv-action S₁ → Type (lsuc ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#17124","idDesc":null,"idIdent":"Function-str","idType":"Equiv-action S₁ →\nStructure ℓ T → Structure (S.ℓ₁ ⊔ ℓ) (λ X → S₁ X → T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#13657","idDesc":null,"idIdent":"Equiv-action","idType":"(S₁ : Type ℓ → Type ℓ₁) → Type (lsuc ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#28229","idDesc":null,"idIdent":"axioms-prop","idType":"(r : Str-desc ℓ ℓ₁ S₁ ax) (X : Type ℓ) (s : S₁ X) →\nis-prop (r .axioms X s)"},{"idAnchor":"1Lab.Univalence.SIP.html#20405","idDesc":null,"idIdent":"Function-action","idType":"Equiv-action S₁ → Equiv-action T → Equiv-action (λ X → S₁ X → T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#24388","idDesc":null,"idIdent":"_s→_","idType":"Str-term ℓ ℓ₁ S₁ →\nStr-term ℓ ℓ₂ T → Str-term ℓ (ℓ₁ ⊔ ℓ₂) (λ X → S₁ X → T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#24914","idDesc":null,"idIdent":"Term→structure","idType":"Str-term ℓ ℓ₁ S₁ → Structure ℓ₁ S₁"},{"idAnchor":"1Lab.Univalence.SIP.html#6331","idDesc":null,"idIdent":"Constant-str-univalent","idType":"is-univalent (Constant-str A)"},{"idAnchor":"1Lab.Univalence.SIP.html#13769","idDesc":null,"idIdent":"Action→Structure","idType":"Equiv-action S₁ → Structure ℓ₁ S₁"},{"idAnchor":"1Lab.Univalence.SIP.html#1952","idDesc":null,"idIdent":"Structure","idType":"(ℓ₃ : Level) (S₁ : Type ℓ₁ → Type ℓ₂) →\nType (lsuc ℓ₁ ⊔ ℓ₂ ⊔ lsuc ℓ₃)"},{"idAnchor":"1Lab.Univalence.SIP.html#6224","idDesc":null,"idIdent":"Constant-str","idType":"(A : Type ℓ) → Structure ℓ (λ X → A)"},{"idAnchor":"1Lab.Univalence.SIP.html#16473","idDesc":null,"idIdent":"is-transport→is-univalent","idType":"(a : Equiv-action S₁) →\nis-transport-str a → is-univalent (Action→Structure a)"},{"idAnchor":"1Lab.Univalence.SIP.html#3328","idDesc":null,"idIdent":"Type-with","idType":"Structure ℓ₂ S₁ → Type (lsuc ℓ ⊔ ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#28162","idDesc":null,"idIdent":"descriptor","idType":"Str-desc ℓ ℓ₁ S₁ ax → Str-term ℓ ℓ₁ S₁"},{"idAnchor":"1Lab.Univalence.SIP.html#7790","idDesc":null,"idIdent":"Product-str-univalent","idType":"is-univalent σ → is-univalent τ → is-univalent (Product-str σ τ)"},{"idAnchor":"1Lab.Univalence.SIP.html#5523","idDesc":null,"idIdent":"sip","idType":"is-univalent σ → X ≃[ σ ] Y → X ≡ Y"},{"idAnchor":"1Lab.Univalence.SIP.html#26796","idDesc":null,"idIdent":"Term→structure-univalent","idType":"(s : Str-term ℓ ℓ₁ S₁) → is-univalent (Term→structure s)"},{"idAnchor":"1Lab.Univalence.SIP.html#8792","idDesc":null,"idIdent":"Str-function-str-univalent","idType":"is-univalent σ →\nis-univalent τ → is-univalent (Str-function-str σ τ)"},{"idAnchor":"1Lab.Univalence.SIP.html#17456","idDesc":null,"idIdent":"Function-str-univalent","idType":"(α : Equiv-action S₁) →\nis-transport-str α →\n(τ : Structure ℓ T) →\nis-univalent τ → is-univalent (Function-str α τ)"},{"idAnchor":"1Lab.Univalence.SIP.html#4231","idDesc":null,"idIdent":"_≃[_]_","idType":"Σ S₁ → Structure ℓ S₁ → Σ S₁ → Type (S.ℓ ⊔ ℓ)"},{"idAnchor":"1Lab.Univalence.SIP.html#22470","idDesc":null,"idIdent":"Axiom-str-univalent","idType":"(σ : Structure ℓ S₁) (axioms : (X : Type S.ℓ) → S₁ X → Type ℓ₃)\n(univ : is-univalent σ) (axioms-prop : is-prop (axioms X s)) →\nis-univalent (Axiom-str σ axioms)"},{"idAnchor":"1Lab.Univalence.SIP.html#20009","idDesc":null,"idIdent":"Product-action","idType":"Equiv-action S₁ → Equiv-action T → Equiv-action (λ X → S₁ X × T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#2884","idDesc":null,"idIdent":"is-hom","idType":"Structure ℓ₃ S₁ → (A B₁ : Σ S₁) → A .fst ≃ B₁ .fst → Type ℓ₃"},{"idAnchor":"1Lab.Univalence.SIP.html#15539","idDesc":null,"idIdent":"lemma'","idType":"(σ : Equiv-action S₁) (pres-id : preserves-id σ) (e : X ≃ Y)\n(s : S₁ X) →\nσ (id , id-equiv) .fst s ≡ subst S₁ (ua (id , id-equiv)) s"},{"idAnchor":"1Lab.Univalence.SIP.html#14708","idDesc":null,"idIdent":"preserves-id","idType":"Equiv-action S₁ → Type (lsuc ℓ)"},{"idAnchor":"1Lab.Univalence.SIP.html#24235","idDesc":null,"idIdent":"Str-term","idType":"(ℓ ℓ₁ : Level) → (Type ℓ → Type ℓ₁) → Typeω"},{"idAnchor":"1Lab.Univalence.SIP.html#26879","idDesc":null,"idIdent":"Term→action-is-transport","idType":"(s : Str-term ℓ ℓ₁ S₁) → is-transport-str (Term→action s)"},{"idAnchor":"1Lab.Univalence.SIP.html#22078","idDesc":null,"idIdent":"Axiom-str","idType":"(σ : Structure ℓ S₁) (axioms : (X : Type S.ℓ) → S₁ X → Type ℓ₃) →\nStructure ℓ (λ X → Σ (axioms X))"},{"idAnchor":"1Lab.Univalence.SIP.html#8543","idDesc":null,"idIdent":"Str-function-str","idType":"Structure ℓ₁ S₁ →\nStructure ℓ₂ T → Structure (ℓ₁ ⊔ S.ℓ₁ ⊔ ℓ₂) (λ X → S₁ X → T X)"},{"idAnchor":"1Lab.Univalence.SIP.html#2055","idDesc":null,"idIdent":"HomT→Str","idType":"(is-hom₁ : (A B₁ : Σ S₁) → A .fst ≃ B₁ .fst → Type ℓ₃) →\nStructure ℓ₃ S₁"},{"idAnchor":"1Lab.Univalence.SIP.html#23872","idDesc":null,"idIdent":".extendedlambda2","idType":"(A : Type-with (Axiom-str σ axioms)) (B₁ : Type-with σ)\n(eqv : (A .fst , A .snd .fst) ≃[ σ ] B₁) →\n∑ (Type S.ℓ) S₁ → Type ℓ₃"},{"idAnchor":"1Lab.Univalence.SIP.html#20553","idDesc":null,"idIdent":"Function-action-is-transport","idType":"is-transport-str α →\nis-transport-str β → is-transport-str (Function-action α β)"},{"idAnchor":"1Lab.Univalence.SIP.html#28573","idDesc":null,"idIdent":"Desc→is-univalent","idType":"(S₁ : Str-desc ℓ ℓ₁ S₂ ax) → is-univalent (Desc→Str S₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#7299","idDesc":null,"idIdent":"Pointed-str-univalent","idType":"is-univalent Pointed-str"},{"idAnchor":"1Lab.Univalence.SIP.html#19638","idDesc":null,"idIdent":"Constant-action","idType":"(A : Type ℓ) → Equiv-action (λ X → A)"},{"idAnchor":"1Lab.Univalence.SIP.html#28117","idDesc":null,"idIdent":"Str-desc","idType":"(ℓ ℓ₁ : Level) (S₁ : Type ℓ → Type ℓ₁) (ax : Level) → Typeω"},{"idAnchor":"1Lab.Univalence.SIP.html#3856","idDesc":null,"idIdent":"is-univalent","idType":"Structure ℓ S₁ → Type (ℓ ⊔ lsuc S.ℓ ⊔ S.ℓ₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#28412","idDesc":null,"idIdent":"Desc→Str","idType":"(S₁ : Str-desc ℓ ℓ₁ S₂ ax) → Structure ℓ₁ (Desc→Fam S₁)"},{"idAnchor":"1Lab.Univalence.SIP.html#19741","idDesc":null,"idIdent":"Constant-action-is-transport","idType":"is-transport-str (Constant-action A)"},{"idAnchor":"1Lab.Univalence.SIP.html#7088","idDesc":null,"idIdent":"Pointed-str","idType":"Structure ℓ (λ X → X)"},{"idAnchor":"1Lab.Univalence.SIP.html#24357","idDesc":null,"idIdent":"s∙","idType":"Str-term ℓ ℓ (λ X → X)"},{"idAnchor":"1Lab.Univalence.SIP.html#28273","idDesc":null,"idIdent":"Desc→Fam","idType":"Str-desc ℓ ℓ₁ S₁ ax → Type ℓ → Type (ℓ₁ ⊔ ax)"},{"idAnchor":"1Lab.Univalence.SIP.html#15147","idDesc":null,"idIdent":"preserves-id→is-transport-str","idType":"(σ : Equiv-action S₁) → preserves-id σ → is-transport-str σ"},{"idAnchor":"1Lab.HIT.Sphere.html#1203","idDesc":null,"idIdent":"iso-pf","idType":"is-iso SuspS⁻¹→S⁰"},{"idAnchor":"1Lab.HIT.Sphere.html#1947","idDesc":null,"idIdent":"SuspS⁰≃S¹","idType":"Sⁿ⁻¹ 2 ≡ S¹"},{"idAnchor":"1Lab.HIT.Sphere.html#3572","idDesc":null,"idIdent":".extendedlambda0","idType":"(i j : I) → I → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → Susp (Susp (Sⁿ⁻¹ 0))"},{"idAnchor":"1Lab.HIT.Sphere.html#669","idDesc":null,"idIdent":"S⁰","idType":"Type"},{"idAnchor":"1Lab.HIT.Sphere.html#2739","idDesc":null,"idIdent":"S¹→SuspS⁰","idType":"S¹ → Sⁿ⁻¹ 2"},{"idAnchor":"1Lab.HIT.Sphere.html#1053","idDesc":null,"idIdent":"SuspS⁻¹→S⁰","idType":"Susp S⁻¹ → S⁰"},{"idAnchor":"1Lab.HIT.Sphere.html#964","idDesc":null,"idIdent":"SuspS⁻¹≃S⁰","idType":"Susp S⁻¹ ≡ S⁰"},{"idAnchor":"1Lab.HIT.Sphere.html#649","idDesc":null,"idIdent":"S⁻¹","idType":"Type"},{"idAnchor":"1Lab.HIT.Sphere.html#1729","idDesc":null,"idIdent":"Sⁿ⁻¹","idType":"Nat → Type"},{"idAnchor":"1Lab.HIT.Sphere.html#2357","idDesc":null,"idIdent":"SuspS⁰→S¹","idType":"Sⁿ⁻¹ 2 → S¹"},{"idAnchor":"1Lab.HIT.Sphere.html#3129","idDesc":null,"idIdent":"iso-pf","idType":"is-iso SuspS⁰→S¹"},{"idAnchor":"1Lab.HIT.Sphere.html#1128","idDesc":null,"idIdent":"S⁰→SuspS⁻¹","idType":"S⁰ → Susp S⁻¹"},{"idAnchor":"Relation.Order.Lexicographic.html#693","idDesc":null,"idIdent":"done","idType":"Lex _≺_ [] (y ∷ ys)"},{"idAnchor":"Relation.Order.Lexicographic.html#2847","idDesc":null,"idIdent":".absurdlambda","idType":"(tri : is-trichotomous _≺_) (x : _≺_.A) (ys : List _≺_.A) →\nLex _≺_ (x ∷ ys) [] → ⊥"},{"idAnchor":"Relation.Order.Lexicographic.html#763","idDesc":null,"idIdent":"here","idType":"x ≺ y → Lex _≺_ (x ∷ xs) (y ∷ ys)"},{"idAnchor":"Relation.Order.Lexicographic.html#2657","idDesc":null,"idIdent":"lex-trichotomous","idType":"is-trichotomous _≺_ → is-trichotomous (Lex _≺_)"},{"idAnchor":"Relation.Order.Lexicographic.html#1270","idDesc":null,"idIdent":"lex-antisym-head","idType":"(x ≺ y → ⊥) → (x ≡ y → ⊥) → Lex _≺_ (x ∷ xs) (y ∷ ys) → ⊥"},{"idAnchor":"Relation.Order.Lexicographic.html#2033","idDesc":null,"idIdent":"ap-∷-next","idType":"x ≡ y → Lex _≺_ xs ys → Lex _≺_ (x ∷ xs) (y ∷ ys)"},{"idAnchor":"Relation.Order.Lexicographic.html#834","idDesc":null,"idIdent":"next","idType":"Lex _≺_ xs ys → Lex _≺_ (x ∷ xs) (x ∷ ys)"},{"idAnchor":"Relation.Order.Lexicographic.html#2779","idDesc":null,"idIdent":".absurdlambda","idType":"(tri : is-trichotomous _≺_) → Lex _≺_ [] [] → ⊥"},{"idAnchor":"Relation.Order.Lexicographic.html#2897","idDesc":null,"idIdent":".absurdlambda","idType":"(tri : is-trichotomous _≺_) (x : _≺_.A) (xs : List _≺_.A) →\nLex _≺_ (x ∷ xs) [] → ⊥"},{"idAnchor":"Relation.Order.Lexicographic.html#2767","idDesc":null,"idIdent":".absurdlambda","idType":"(tri : is-trichotomous _≺_) → Lex _≺_ [] [] → ⊥"},{"idAnchor":"Relation.Order.Lexicographic.html#594","idDesc":null,"idIdent":"Lex","idType":"(A → A → Type ℓ') → List A → List A → Type (ℓ ⊔ ℓ')"},{"idAnchor":"Relation.Order.Lexicographic.html#1522","idDesc":null,"idIdent":"lex-antisym-tail","idType":"(x ≺ y → ⊥) → (Lex _≺_ xs ys → ⊥) → Lex _≺_ (x ∷ xs) (y ∷ ys) → ⊥"},{"idAnchor":"Cat.Displayed.Fibre.html#2876","idDesc":null,"idIdent":"Fibre","idType":"(E : Displayed B₁ o′ ℓ′) → B₁ .Ob → Precategory o′ ℓ′"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#5092","idDesc":null,"idIdent":"helper","idType":"(p' : f (f1 .fst) ≡ y) →\n(subst (λ x → f x ≡ y) refl (f1 .snd) ≡ p') ≡\n(ap f refl ∙ p' ≡ f1 .snd)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#6497","idDesc":null,"idIdent":"contract","idType":"(g : B₁ → A) (η : (x : A) → g (f x) ≡ x)\n(ε : (y : B₁) → f (g y) ≡ y) (zig : (x : A) → ap f (η x) ≡ ε (f x))\n(y : B₁) (fib₂ : fibre f y) →\nfib g η ε zig y ≡ fib₂"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#8370","idDesc":null,"idIdent":"commSqIsEq","idType":"(eqv : is-equiv f) (a : A) →\nSquare (sym (ap f (equiv→retraction eqv a))) refl\n(equiv→section eqv (f a)) refl"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#7939","idDesc":null,"idIdent":"is-iso→is-equiv'","idType":"is-iso f → is-equiv f"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#4365","idDesc":null,"idIdent":"fibre-paths","idType":"(f1 ≡ f2) ≃ Σ (λ γ → ap f γ ∙ f2 .snd ≡ f1 .snd)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#8156","idDesc":null,"idIdent":"equiv→zig","idType":"(eqv : is-equiv f) (a : A) →\nap f (equiv→retraction eqv a) ≡ equiv→section eqv (f a)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#6639","idDesc":null,"idIdent":"path","idType":"(g : B₁ → A) (η : (x : A) → g (f x) ≡ x)\n(ε : (y : B₁) → f (g y) ≡ y) (zig : (x : A) → ap f (η x) ≡ ε (f x))\n(y : B₁) (x : A) (p : f x ≡ y) →\nap f (ap g (sym p) ∙ η x) ∙ p ≡ ε y"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#8746","idDesc":null,"idIdent":".extendedlambda0","idType":"(eqv : is-equiv f) (a : A) (i j : I) →\nI → .(IsOne (i ∨ ~ i ∨ ~ j ∨ j)) → B₁"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#8975","idDesc":null,"idIdent":"is-equiv→is-half-adjoint-equiv","idType":"is-equiv f → is-half-adjoint-equiv f"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#3221","idDesc":null,"idIdent":"zig","idType":"(iiso : is-iso f) (x : A) → ε' iiso (f x) ≡ ap f (linv iiso x)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#8623","idDesc":null,"idIdent":"commPathIsEq","idType":"(eqv : is-equiv f) (a : A) →\nap f (equiv→retraction eqv a) ≡ equiv→section eqv (f a)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#6097","idDesc":null,"idIdent":"is-half-adjoint-equiv→is-equiv","idType":"is-half-adjoint-equiv f → is-equiv f"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#5616","idDesc":null,"idIdent":"lemma","idType":"(γ : f1 .fst ≡ x') →\n(subst (λ x → f x ≡ y) γ (f1 .snd) ≡ p') ≡ (ap f γ ∙ p' ≡ f1 .snd)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#1847","idDesc":null,"idIdent":"is-iso→is-half-adjoint-equiv","idType":"is-iso f → is-half-adjoint-equiv f"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#1248","idDesc":null,"idIdent":"is-half-adjoint-equiv","idType":"(f : A → B₁) → Type (ℓ₁ ⊔ ℓ₂)"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#6608","idDesc":null,"idIdent":"x≡gy","idType":"(g : B₁ → A) (η : (x : A) → g (f x) ≡ x)\n(ε : (y : B₁) → f (g y) ≡ y) (zig : (x : A) → ap f (η x) ≡ ε (f x))\n(y : B₁) (x : A) (p : f x ≡ y) →\ng y ≡ x"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#6327","idDesc":null,"idIdent":"fib","idType":"(g : B₁ → A) (η : (x : A) → g (f x) ≡ x)\n(ε : (y : B₁) → f (g y) ≡ y) (zig : (x : A) → ap f (η x) ≡ ε (f x))\n(y : B₁) →\nfibre f y"},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#2390","idDesc":null,"idIdent":"ε'","idType":"(iiso : is-iso f) (y : B₁) → f (inv iiso y) ≡ y"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#6972","idDesc":null,"idIdent":"comm2","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) (o : J₁ .Ob) →\n(C ∘ ψ (lim-over .top) o)\n((C ∘ lim-over .has⊤ (cone₂ F lim-over) .centre .hom)\n (M M .F₁ (lim-over .has⊤ (cone₂ F lim-over) .centre .hom)))\n≡\nC ._∘_ (C ._∘_ (₀ F o .snd .ν) (₁ (M .M) (lim-over .top .ψ o)))\n(mult M .η (lim-over .top .apex))"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#5637","idDesc":null,"idIdent":"cone₂","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) →\nCone (Forget C M F∘ F)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#4015","idDesc":null,"idIdent":"unique","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F)\n(uniq : is-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K))\n(other : Cones F .Ob) (x : Cone-hom F other K) →\n! F K uniq other ≡ x"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#2337","idDesc":null,"idIdent":"!′","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F)\n(uniq : is-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K))\n(other : Cones F .Ob) →\nHom (Cones (Forget C M F∘ F)) (F-map-cone (Forget C M) other)\n(F-map-cone (Forget C M) K)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#7323","idDesc":null,"idIdent":"alg","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) →\nAlgebra-on C M (lim-over .top .apex)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#6768","idDesc":null,"idIdent":"comm1","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) (o : J₁ .Ob) →\n(C ∘ ψ (lim-over .top) o)\n((C ∘ lim-over .has⊤ (cone₂ F lim-over) .centre .hom)\n (unit M .η (lim-over .top .apex)))\n≡ ₁ Id (lim-over .top .ψ o)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#3567","idDesc":null,"idIdent":"cone′","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F)\n(uniq : is-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K))\n(other : Cones F .Ob) →\nCone (Forget C M F∘ F)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#2766","idDesc":null,"idIdent":"!","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F)\n(uniq : is-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K))\n(other : Cones F .Ob) →\nCone-hom F other K"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#2150","idDesc":null,"idIdent":"Forget-reflects-limits","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F) →\nis-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K) →\nis-limit F K"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#4174","idDesc":null,"idIdent":"hom′","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) (K : Cone F)\n(uniq : is-limit (Forget C M F∘ F) (F-map-cone (Forget C M) K))\n(other : Cones F .Ob) (x : Cone-hom F other K) →\nCone-hom (Forget C M F∘ F) (F-map-cone (Forget C M) other)\n(F-map-cone (Forget C M) K)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#8377","idDesc":null,"idIdent":"U$L≡L","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) →\nF-map-cone (Forget C M) (cone′ F lim-over) ≡ lim-over .top"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#6210","idDesc":null,"idIdent":"cone²","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) →\nCone (Forget C M F∘ F)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#6685","idDesc":null,"idIdent":"cone′","idType":"(F : Functor J₁ (Eilenberg-Moore C M))\n(lim-over : Limit (Forget C M F∘ F)) →\nCone F"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#8602","idDesc":null,"idIdent":"Eilenberg-Moore-is-complete","idType":"is-complete a b C → is-complete a b (Eilenberg-Moore C M)"},{"idAnchor":"Cat.Diagram.Monad.Limits.html#4677","idDesc":null,"idIdent":"Forget-lift-limit","idType":"(F : Functor J₁ (Eilenberg-Moore C M)) →\nLimit (Forget C M F∘ F) → Limit F"},{"idAnchor":"Agda.Builtin.List.html#173","idDesc":null,"idIdent":"_∷_","idType":"A → List A → List A"},{"idAnchor":"Agda.Builtin.List.html#121","idDesc":null,"idIdent":"List","idType":"Type a → Type a"},{"idAnchor":"Agda.Builtin.List.html#158","idDesc":null,"idIdent":"[]","idType":"List A"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3388","idDesc":null,"idIdent":"path","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P))\n(pb₁ : Σ (Restrict P ≅ pb)) →\nto P pprop univ pb (from P pprop univ pb pb₁) .fst ≡ pb₁ .fst"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3603","idDesc":null,"idIdent":"linv","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nis-left-inverse (from P pprop univ pb) (to P pprop univ pb)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#5794","idDesc":null,"idIdent":"is-fully-faithful-Forget-full-subcat","idType":"is-fully-faithful Forget-full-subcat"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3696","idDesc":null,"idIdent":"equiv","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nΣ (C ≅ A P pprop univ pb) ≃ Σ (Restrict P ≅ pb)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3292","idDesc":null,"idIdent":"rinv","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nis-right-inverse (from P pprop univ pb) (to P pprop univ pb)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#1047","idDesc":null,"idIdent":"_,_","idType":"(object₁ : Ob C) (witness₁ : P object₁) → Restrict-ob P"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3134","idDesc":null,"idIdent":"A≡B","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) (B₁ : Ob C)\n(isom : (C ≅ A P pprop univ pb) B₁) →\nA P pprop univ pb ≡ B₁"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2953","idDesc":null,"idIdent":"A","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nOb C"},{"idAnchor":"Cat.Functor.FullSubcategory.html#4307","idDesc":null,"idIdent":"Full-inclusion→Full-subcat","idType":"(ff : is-fully-faithful F) → Precategory (o ⊔ (h ⊔ o')) h"},{"idAnchor":"Cat.Functor.FullSubcategory.html#1081","idDesc":null,"idIdent":"witness","idType":"(r : Restrict-ob P) → P (r .object)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#1126","idDesc":null,"idIdent":"Restrict","idType":"(Ob C → Type ℓ) → Precategory (o ⊔ ℓ) h"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2997","idDesc":null,"idIdent":"to","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nΣ (C ≅ A P pprop univ pb) → Σ (Restrict P ≅ pb)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#5094","idDesc":null,"idIdent":"is-eso-domain→Full-subcat","idType":"(ff : is-fully-faithful F) → is-eso (Ff-domain→Full-subcat ff)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#5574","idDesc":null,"idIdent":"Forget-full-subcat","idType":"Functor (Restrict P) C"},{"idAnchor":"Cat.Functor.FullSubcategory.html#4968","idDesc":null,"idIdent":"is-fully-faithful-domain→Full-subcat","idType":"(ff : is-fully-faithful F) →\nis-fully-faithful (Ff-domain→Full-subcat ff)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#3168","idDesc":null,"idIdent":"from","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nΣ (Restrict P ≅ pb) → Σ (C ≅ A P pprop univ pb)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#4709","idDesc":null,"idIdent":"Ff-domain→Full-subcat","idType":"(ff : is-fully-faithful F) →\nFunctor D (Full-inclusion→Full-subcat ff)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#962","idDesc":null,"idIdent":"Restrict-ob","idType":"(P : Ob C → Type ℓ) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2974","idDesc":null,"idIdent":"p","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x))\n(univ : is-category C) (pb : Ob (Restrict P)) →\nP (pb .object)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2812","idDesc":null,"idIdent":"Restrict-is-category","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x)) →\nis-category C → is-category (Restrict P)"},{"idAnchor":"Cat.Functor.FullSubcategory.html#1063","idDesc":null,"idIdent":"object","idType":"Restrict-ob P → Ob C"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2397","idDesc":null,"idIdent":"super-iso→sub-iso","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x)) →\n(C ≅ A .object) (B₁ .object) → (Restrict P ≅ A) B₁"},{"idAnchor":"Cat.Functor.FullSubcategory.html#2220","idDesc":null,"idIdent":"sub-iso→super-iso","idType":"(P : Ob C → Type ℓ) (pprop : (x : Ob C) → is-prop (P x)) →\n(Restrict P ≅ A) B₁ → (C ≅ A .object) (B₁ .object)"},{"idAnchor":"Cat.Instances.StrictCat.html#748","idDesc":null,"idIdent":"Functor-is-set","idType":"is-set (Ob D) → is-set (Functor C D)"},{"idAnchor":"Cat.Instances.StrictCat.html#1979","idDesc":null,"idIdent":"Strict-Cat-Product","idType":"(cob : is-set (Ob C)) (dob : is-set (Ob D)) →\nProduct (Strict-Cat o h) (C , cob) (D , dob)"},{"idAnchor":"Cat.Instances.StrictCat.html#702","idDesc":null,"idIdent":"eqv","idType":"Iso (Functor C D)\n(∑ (C .Ob → Ob D)\n (λ F₂ →\n    ∑ ({x y : Ob C} → C .Hom x y → Hom D (F₂ x) (F₂ y))\n    (λ F₃ →\n       ∑ ({x : Ob C} → F₃ (C .id) ≡ id D)\n       (λ F-id₁ →\n          {x y z : Ob C} (f : C .Hom y z) (g : C .Hom x y) →\n          F₃ (C ._∘_ f g) ≡ (D ∘ F₃ f) (F₃ g)))))"},{"idAnchor":"Cat.Instances.StrictCat.html#2181","idDesc":null,"idIdent":"prod","idType":"(cob : is-set (Ob C)) (dob : is-set (Ob D)) →\nProduct (Strict-Cat o h) (C , cob) (D , dob)"},{"idAnchor":"Cat.Instances.StrictCat.html#1083","idDesc":null,"idIdent":"Strict-Cat","idType":"(o h : Level) → Precategory (lsuc o ⊔ lsuc h) (o ⊔ h)"},{"idAnchor":"Cat.Instances.Lift.html#543","idDesc":null,"idIdent":"liftc","idType":"(o′ ℓ′ : Level) (C : Precategory o ℓ) →\nPrecategory (o ⊔ o′) (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Instances.Lift.html#986","idDesc":null,"idIdent":"Lift-functor-l","idType":"(bo bℓ : Level) → Functor C D → Functor (Lift-cat bo bℓ C) D"},{"idAnchor":"Cat.Instances.Lift.html#1485","idDesc":null,"idIdent":"F","idType":"(bo bℓ : Level) (G : Functor C D) → Functor C (Lift-cat bo bℓ D)"},{"idAnchor":"Cat.Instances.Lift.html#391","idDesc":null,"idIdent":"Lift-cat","idType":"(o′ ℓ′ : Level) → Precategory o ℓ → Precategory (o ⊔ o′) (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Instances.Lift.html#1299","idDesc":null,"idIdent":"Lift-functor-r","idType":"(bo bℓ : Level) → Functor C D → Functor C (Lift-cat bo bℓ D)"},{"idAnchor":"Cat.Instances.Lift.html#1172","idDesc":null,"idIdent":"F","idType":"(bo bℓ : Level) (G : Functor C D) → Functor (Lift-cat bo bℓ C) D"},{"idAnchor":"Cat.Displayed.Base.html#3224","idDesc":null,"idIdent":"idl′","idType":"(r : Displayed B₁ o′ ℓ′) (f′ : r .Hom[_] f x y) →\nPathP (λ i → r .Hom[_] (B₁ .idl f i) x y) (r ._∘′_ (r .id′) f′) f′"},{"idAnchor":"Cat.Displayed.Base.html#686","idDesc":null,"idIdent":"Displayed","idType":"(B₁ : Precategory o ℓ) (o′ ℓ′ : Level) →\nType (o ⊔ ℓ ⊔ lsuc o′ ⊔ lsuc ℓ′)"},{"idAnchor":"Cat.Displayed.Base.html#2835","idDesc":null,"idIdent":"_≡[_]_","idType":"(r : Displayed B₁ o′ ℓ′) →\nHom[ r ] f x y → f ≡ g → Hom[ r ] g x y → Type ℓ′"},{"idAnchor":"Cat.Displayed.Base.html#3311","idDesc":null,"idIdent":"assoc′","idType":"(r : Displayed B₁ o′ ℓ′) (f′ : r .Hom[_] f y z)\n(g′ : r .Hom[_] g x y) (h′ : r .Hom[_] h w x) →\nPathP (λ i → r .Hom[_] (B₁ .assoc f g h i) w z)\n(r ._∘′_ f′ (r ._∘′_ g′ h′)) (r ._∘′_ (r ._∘′_ f′ g′) h′)"},{"idAnchor":"Cat.Displayed.Base.html#3137","idDesc":null,"idIdent":"idr′","idType":"(r : Displayed B₁ o′ ℓ′) (f′ : r .Hom[_] f x y) →\nPathP (λ i → r .Hom[_] (B₁ .idr f i) x y) (r ._∘′_ f′ (r .id′)) f′"},{"idAnchor":"Cat.Displayed.Base.html#1729","idDesc":null,"idIdent":"Hom[_]-set","idType":"(r : Displayed B₁ o′ ℓ′) (f : B₁ .Hom a b) (x : r .Ob[_] a)\n(y : r .Ob[_] b) →\nis-set (r .Hom[_] f x y)"},{"idAnchor":"Cat.Displayed.Base.html#1197","idDesc":null,"idIdent":"Ob[_]","idType":"Displayed B₁ o′ ℓ′ → B₁ .Ob → Type o′"},{"idAnchor":"Cat.Displayed.Base.html#1668","idDesc":null,"idIdent":"Hom[_]","idType":"(r : Displayed B₁ o′ ℓ′) →\nB₁ .Hom x y → r .Ob[_] x → r .Ob[_] y → Type ℓ′"},{"idAnchor":"Cat.Displayed.Base.html#2219","idDesc":null,"idIdent":"id′","idType":"(r : Displayed B₁ o′ ℓ′) → r .Hom[_] (B₁ .id) x x"},{"idAnchor":"Cat.Displayed.Base.html#2265","idDesc":null,"idIdent":"_∘′_","idType":"(r : Displayed B₁ o′ ℓ′) →\nr .Hom[_] f y z → r .Hom[_] g x y → r .Hom[_] (B₁ ._∘_ f g) x z"},{"idAnchor":"Cat.Diagram.Coend.html#2995","idDesc":null,"idIdent":"Cowedge","idType":"(F : Functor (C ^op ×ᶜ C) D) → Type (C.o′ ⊔ C.ℓ′ ⊔ D.o′ ⊔ D.ℓ′)"},{"idAnchor":"Cat.Diagram.Coend.html#3400","idDesc":null,"idIdent":"ψ","idType":"(r : Cowedge F) (c : Ob (C ^op)) → D .Hom (₀ F (c , c)) (r .nadir)"},{"idAnchor":"Cat.Diagram.Coend.html#4767","idDesc":null,"idIdent":"cowedge","idType":"Coend F → Cowedge F"},{"idAnchor":"Cat.Diagram.Coend.html#3383","idDesc":null,"idIdent":"nadir","idType":"Cowedge F → D .Ob"},{"idAnchor":"Cat.Diagram.Coend.html#5233","idDesc":null,"idIdent":"commutes","idType":"(r : Coend F) → D ._∘_ (r .factor W) (ψ (r .cowedge) a) ≡ W .ψ a"},{"idAnchor":"Cat.Diagram.Coend.html#5167","idDesc":null,"idIdent":"factor","idType":"(r : Coend F) (W : Cowedge F) →\nD .Hom (nadir (r .cowedge)) (W .nadir)"},{"idAnchor":"Cat.Diagram.Coend.html#5306","idDesc":null,"idIdent":"unique","idType":"(r : Coend F) →\nD ._∘_ g (ψ (r .cowedge) a) ≡ W .ψ a → g ≡ r .factor W"},{"idAnchor":"Cat.Diagram.Coend.html#4577","idDesc":null,"idIdent":"Coend","idType":"(F : Functor (C ^op ×ᶜ C) D) → Type (C.o′ ⊔ C.ℓ′ ⊔ D.o′ ⊔ D.ℓ′)"},{"idAnchor":"Cat.Diagram.Coend.html#4137","idDesc":null,"idIdent":"extranatural","idType":"(r : Cowedge F) (f : C .Hom c c′) →\nD ._∘_ (r .ψ c′) (second F f) ≡ D ._∘_ (r .ψ c) (first F f)"},{"idAnchor":"Agda.Builtin.Maybe.html#168","idDesc":null,"idIdent":"nothing","idType":"Maybe A"},{"idAnchor":"Agda.Builtin.Maybe.html#147","idDesc":null,"idIdent":"just","idType":"A → Maybe A"},{"idAnchor":"Agda.Builtin.Maybe.html#109","idDesc":null,"idIdent":"Maybe","idType":"Type a → Type a"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#3722","idDesc":null,"idIdent":"TTA","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) → Algebra C (T F⊣G)"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#8418","idDesc":null,"idIdent":"path","idType":"(F⊣G : F ⊣ G)\n(has-coeq\n : (M : Algebra C (T F⊣G)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣G (F₀ F (M .fst))))\n(alg-map : Eilenberg-Moore C (T F⊣G) .Hom X Y) →\nD ._∘_ (e′ F⊣G has-coeq alg-map) (₁ F (X .snd .ν)) ≡\nD ._∘_ (e′ F⊣G has-coeq alg-map) (ε F⊣G (₀ F (X .fst)))"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#728","idDesc":null,"idIdent":"T","idType":"(F⊣G : F ⊣ G) → Monad C"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#8097","idDesc":null,"idIdent":"Comparison⁻¹","idType":"(F⊣G : F ⊣ G)\n(has-coeq\n : (M : Algebra C (T F⊣G)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣G (F₀ F (M .fst)))) →\nFunctor (Eilenberg-Moore C (T F⊣G)) D"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#3785","idDesc":null,"idIdent":"mult","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) →\nAlgebra-hom C (T F⊣G) (TTA F⊣G Aalg) (TA F⊣G Aalg)"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#769","idDesc":null,"idIdent":"C^T","idType":"(F⊣G : F ⊣ G) → Precategory (o ⊔ ℓ) (o ⊔ ℓ)"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#3668","idDesc":null,"idIdent":"TA","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) → Algebra C (T F⊣G)"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#8274","idDesc":null,"idIdent":"e′","idType":"(F⊣G : F ⊣ G)\n(has-coeq\n : (M : Algebra C (T F⊣G)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣G (F₀ F (M .fst))))\n(alg-map : Eilenberg-Moore C (T F⊣G) .Hom X Y) →\nD .Hom (F .F₀ (X .fst)) (Comparison⁻¹ F⊣G has-coeq .F₀ Y)"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#9501","idDesc":null,"idIdent":"Comparison⁻¹⊣Comparison","idType":"(F⊣G : F ⊣ G)\n(has-coeq\n : (M : Algebra C (T F⊣G)) →\n   Coequaliser D (₁ F (M .snd .ν)) (ε F⊣G (F₀ F (M .fst)))) →\nComparison⁻¹ F⊣G has-coeq ⊣ Comparison F⊣G"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#3611","idDesc":null,"idIdent":"A","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) → Ob C"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#4526","idDesc":null,"idIdent":"algebra-is-coequaliser","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) →\nis-coequaliser (C^T F⊣G) (mult F⊣G Aalg) (fold F⊣G Aalg)\n(record\n { morphism = Aalg .snd .ν ; commutes = sym (Aalg .snd .ν-mult) })"},{"idAnchor":"Cat.Functor.Monadic.Beck.html#3891","idDesc":null,"idIdent":"fold","idType":"(F⊣G : F ⊣ G) (Aalg : Algebra C (T F⊣G)) →\nAlgebra-hom C (T F⊣G) (TTA F⊣G Aalg) (TA F⊣G Aalg)"},{"idAnchor":"Agda.Builtin.Sigma.html#139","idDesc":null,"idIdent":"Σ","idType":"(A : Type a) (B₁ : A → Type b) → Type (a ⊔ b)"},{"idAnchor":"Agda.Builtin.Sigma.html#237","idDesc":null,"idIdent":"snd","idType":"(r : ∑ A B₁) → B₁ (fst r)"},{"idAnchor":"Agda.Builtin.Sigma.html#209","idDesc":null,"idIdent":"_,_","idType":"(fst₁ : A) (snd₁ : B₁ fst₁) → ∑ A B₁"},{"idAnchor":"Agda.Builtin.Sigma.html#225","idDesc":null,"idIdent":"fst","idType":"∑ A B₁ → A"},{"idAnchor":"Cat.Functor.Hom.html#790","idDesc":null,"idIdent":"Hom[-,-]","idType":"(C : Precategory o h) → Functor (C ^op ×ᶜ C) (Sets h)"},{"idAnchor":"Cat.Functor.Hom.html#7329","idDesc":null,"idIdent":"factors","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h))\n(K : Cocones (よ C F∘ πₚ C P) .Ob) (o : ∫ C P .Ob) →\n(universal C P K ∘nt Reassemble C P .ψ o) ≡ ψ K o"},{"idAnchor":"Cat.Functor.Hom.html#9090","idDesc":null,"idIdent":"Map→cocone-under","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h)) (f : P => Y) →\nCocone (よ C F∘ πₚ C P)"},{"idAnchor":"Cat.Functor.Hom.html#1010","idDesc":null,"idIdent":".extendedlambda0","idType":"(C : Precategory o h) (f : Hom (C ^op) (y .fst) (z .fst))\n(h : Hom C (y .snd) (z .snd)) (f' : Hom (C ^op) (x .fst) (y .fst))\n(h' : Hom C (x .snd) (y .snd)) (x : C .Hom (x₁ .fst) (x₁ .snd)) →\n(C ∘ (C ∘ h) h') ((C ∘ x) ((C ∘ f') f)) ≡\n(C ∘ h) ((C ∘ (C ∘ h') ((C ∘ x) f')) f)"},{"idAnchor":"Cat.Functor.Hom.html#2456","idDesc":null,"idIdent":"Hom[-,_]","idType":"(C : Precategory o h) → Ob C → Functor (C ^op) (Sets h)"},{"idAnchor":"Cat.Functor.Hom.html#11294","idDesc":null,"idIdent":"f′","idType":"(C : Precategory o h)\n(sep\n : (h : よ₀ C A => X) →\n   Cat[ C ^op , Sets h₁ ] ._∘_ f h ≡\n   Cat[ C ^op , Sets h₁ ] ._∘_ g h) →\nCocone-hom (よ C F∘ πₚ C X) (Reassemble C X)\n(Map→cocone-under C X f)"},{"idAnchor":"Cat.Functor.Hom.html#3422","idDesc":null,"idIdent":"isom","idType":"(C : Precategory o h) → is-iso (よ₁ C)"},{"idAnchor":"Cat.Functor.Hom.html#3314","idDesc":null,"idIdent":"よ-is-fully-faithful","idType":"(C : Precategory o h) → is-fully-faithful (よ C)"},{"idAnchor":"Cat.Functor.Hom.html#5102","idDesc":null,"idIdent":"Reassemble","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h)) →\nCocone (よ C F∘ πₚ C P)"},{"idAnchor":"Cat.Functor.Hom.html#2199","idDesc":null,"idIdent":"よ₀","idType":"(C : Precategory o h) → Ob C → Functor (C ^op) (Sets h)"},{"idAnchor":"Cat.Functor.Hom.html#1170","idDesc":null,"idIdent":"Hom[_,-]","idType":"(C : Precategory o h) → Ob C → Functor C (Sets h)"},{"idAnchor":"Cat.Functor.Hom.html#10342","idDesc":null,"idIdent":"Representables-generate-presheaf","idType":"(C : Precategory o h) →\n((h : よ₀ C A => X) →\n Cat[ C ^op , Sets h₁ ] ._∘_ f h ≡\n Cat[ C ^op , Sets h₁ ] ._∘_ g h) →\nf ≡ g"},{"idAnchor":"Cat.Functor.Hom.html#12359","idDesc":null,"idIdent":"よ-cancelr","idType":"(C : Precategory o h) →\n((h : Hom C Z X) → (C ∘ f) h ≡ (C ∘ g) h) → f ≡ g"},{"idAnchor":"Cat.Functor.Hom.html#11435","idDesc":null,"idIdent":"g′","idType":"(C : Precategory o h)\n(sep\n : (h : よ₀ C A => X) →\n   Cat[ C ^op , Sets h₁ ] ._∘_ f h ≡\n   Cat[ C ^op , Sets h₁ ] ._∘_ g h) →\nCocone-hom (よ C F∘ πₚ C X) (Reassemble C X)\n(Map→cocone-under C X f)"},{"idAnchor":"Cat.Functor.Hom.html#2731","idDesc":null,"idIdent":"よ₁","idType":"(C : Precategory o h) → Hom C a b → よ₀ C a => よ₀ C b"},{"idAnchor":"Cat.Functor.Hom.html#5973","idDesc":null,"idIdent":"coyoneda","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h)) →\nis-colimit (よ C F∘ πₚ C P) (Reassemble C P)"},{"idAnchor":"Cat.Functor.Hom.html#6641","idDesc":null,"idIdent":"universal","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h))\n(K : Cocones (よ C F∘ πₚ C P) .Ob) →\nP => coapex K"},{"idAnchor":"Cat.Functor.Hom.html#2968","idDesc":null,"idIdent":"よ","idType":"(C : Precategory o h) → Functor C Cat[ C ^op , Sets h ]"},{"idAnchor":"Cat.Functor.Hom.html#7736","idDesc":null,"idIdent":"unique","idType":"(C : Precategory o h) (P : Functor (C ^op) (Sets h))\n(K : Cocones (よ C F∘ πₚ C P) .Ob)\n(α : Cocone-hom (よ C F∘ πₚ C P) (Reassemble C P) K) →\ncocone-hom (universal C P K) (factors C P K) ≡ α"},{"idAnchor":"Agda.Builtin.Cubical.Path.html#272","idDesc":null,"idIdent":"_≡_","idType":"A → A → Type ℓ"},{"idAnchor":"Cat.Functor.Adjoint.Monad.html#1960","idDesc":null,"idIdent":"path","idType":"(L⊣R : L ⊣ R₁) →\nC ._∘_ (₁ R₁ (ε L⊣R (₀ Id (L .F₀ x))))\n(₁ R₁ (₁ L (₁ R₁ (ε L⊣R (L .F₀ x)))))\n≡\nC ._∘_ (₁ R₁ (ε L⊣R (L .F₀ x)))\n(₁ R₁ (ε L⊣R (L .F₀ (R₁ .F₀ (L .F₀ x)))))"},{"idAnchor":"Cat.Functor.Adjoint.Monad.html#1551","idDesc":null,"idIdent":"path","idType":"(L⊣R : L ⊣ R₁) →\nC ._∘_ (₁ R₁ (ε L⊣R (L .F₀ x))) (₁ R₁ (₁ L (η L⊣R x))) ≡ C .id"},{"idAnchor":"Cat.Functor.Adjoint.Monad.html#658","idDesc":null,"idIdent":"Adjunction→Monad","idType":"(L⊣R : L ⊣ R₁) → Monad C"},{"idAnchor":"Algebra.Group.Cayley.html#1496","idDesc":null,"idIdent":"Cayley-injective","idType":"(G : Group ℓ) → injective (Cayley G)"},{"idAnchor":"Algebra.Group.Cayley.html#733","idDesc":null,"idIdent":"Cayley","idType":"(G : Group ℓ) → G .fst → G .fst ≃ G .fst"},{"idAnchor":"Algebra.Group.Cayley.html#1143","idDesc":null,"idIdent":"Cayley-is-hom","idType":"(G : Group ℓ) →\nGroup-hom G (Sym (underlying-set (G .snd))) (Cayley G)"},{"idAnchor":"Algebra.Group.Cayley.html#1280","idDesc":null,"idIdent":"lemma","idType":"(G : Group ℓ) (x y e : G .fst) →\nG .snd ._⋆_ (G .snd ._⋆_ x y) e ≡ G .snd ._⋆_ x (G .snd ._⋆_ y e)"},{"idAnchor":"Algebra.Group.Cayley.html#800","idDesc":null,"idIdent":"bij","idType":"(G : Group ℓ) (x : G .fst) → Iso (G .fst) (G .fst)"},{"idAnchor":"Cat.Instances.Delooping.html#407","idDesc":null,"idIdent":"r","idType":"(mm : Monoid-on M) → Precategory lzero ℓ"},{"idAnchor":"Cat.Instances.Delooping.html#916","idDesc":null,"idIdent":"find-monoid-names","idType":"Term → TC CategoryNames"},{"idAnchor":"Cat.Instances.Delooping.html#1059","idDesc":null,"idIdent":"solve-monoid-on","idType":"Term → Term → TC ⊤"},{"idAnchor":"Cat.Instances.Delooping.html#276","idDesc":null,"idIdent":"B","idType":"Monoid-on M → Precategory lzero ℓ"},{"idAnchor":"Cat.Instances.Delooping.html#1183","idDesc":null,"idIdent":"solve-monoid","idType":"Monoid ℓ → Term → TC ⊤"},{"idAnchor":"Cat.Diagram.Coproduct.Copower.html#2386","idDesc":null,"idIdent":"cocomplete→copowering","idType":"is-cocomplete ℓ ℓ C → Functor (Sets ℓ ×ᶜ C) C"},{"idAnchor":"Cat.Diagram.Coproduct.Copower.html#1961","idDesc":null,"idIdent":"Copowering","idType":"(coprods\n : (S₁ : Set ℓ) (F : ∣ S₁ ∣ → Ob C) → Indexed-coproduct C F) →\nFunctor (Sets ℓ ×ᶜ C) C"},{"idAnchor":"Cat.Diagram.Coproduct.Copower.html#1632","idDesc":null,"idIdent":"_⊗_","idType":"(coprods\n : (S₁ : Set ℓ) (F : ∣ S₁ ∣ → Ob C) → Indexed-coproduct C F) →\nSet ℓ → C .Ob → C .Ob"},{"idAnchor":"Topoi.Classifying.Diaconescu.html#5521","idDesc":null,"idIdent":"Diaconescu","idType":"(𝓣 : Topos κ C) (F : Functor D C) → Flat 𝓣 F → Geom[ C , PSh κ D ]"},{"idAnchor":"Topoi.Classifying.Diaconescu.html#6043","idDesc":null,"idIdent":"Diaconescu⁻¹","idType":"Topos κ C → Geom[ C , PSh κ D ] → Functor D C"},{"idAnchor":"Topoi.Classifying.Diaconescu.html#5343","idDesc":null,"idIdent":"colim","idType":"(𝓣 : Topos κ C) → is-cocomplete κ κ C"},{"idAnchor":"Topoi.Classifying.Diaconescu.html#6552","idDesc":null,"idIdent":"Diaconescu-invl","idType":"(𝓣 : Topos κ C) (F : Functor D C) (flat : Flat 𝓣 F) →\n(Cat[ D , C ] ≅ Diaconescu⁻¹ 𝓣 (Diaconescu 𝓣 F flat)) F"},{"idAnchor":"Topoi.Classifying.Diaconescu.html#5426","idDesc":null,"idIdent":"Flat","idType":"(𝓣 : Topos κ C) → Functor D C → Type (o ⊔ lsuc κ)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#3814","idDesc":null,"idIdent":"product","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) →\nFunctor (Slice C a ×ᶜ Slice C a) (Slice C a)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#4107","idDesc":null,"idIdent":"p1","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) (x : Slice C a .Ob) →\nF₀ (tensor lcc f) x ≡ F₀ (a×- lcc f) x"},{"idAnchor":"Cat.CartesianClosed.Locally.html#2606","idDesc":null,"idIdent":"is-lcc→slice-is-cc","idType":"(lcc : is-lcc C) →\nis-cc (Slice C a)\n(λ A B₁ →\n   Pullback→Fibre-product (pullbacks lcc (A .map) (B₁ .map)))"},{"idAnchor":"Cat.CartesianClosed.Locally.html#1490","idDesc":null,"idIdent":"finitely-complete","idType":"is-lcc C → Finitely-complete C"},{"idAnchor":"Cat.CartesianClosed.Locally.html#1398","idDesc":null,"idIdent":"is-lcc","idType":"(C : Precategory o ℓ) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#1765","idDesc":null,"idIdent":"f*⊣Πf","idType":"(r : is-lcc C) (f : Hom C a b) →\nBase-change (pullbacks (r .finitely-complete)) f ⊣ r .Πf f"},{"idAnchor":"Cat.CartesianClosed.Locally.html#3619","idDesc":null,"idIdent":"tensor","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) →\nFunctor (Slice C a) (Slice C a)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#1584","idDesc":null,"idIdent":"base-change","idType":"(r : is-lcc C) → C .Hom a b → Functor (Slice C b) (Slice C a)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#2497","idDesc":null,"idIdent":"hom","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) →\nFunctor (Slice C a) (Slice C a)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#4664","idDesc":null,"idIdent":"path","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) (g : Slice C a .Hom x y) →\nC ._∘_ (y .map)\n(C ._∘_ (g .map)\n (p₁ (finitely-complete lcc .pullbacks (x .map) (f .map))))\n≡\nC ._∘_ (f .map)\n(p₂ (finitely-complete lcc .pullbacks (x .map) (f .map)))"},{"idAnchor":"Cat.CartesianClosed.Locally.html#1701","idDesc":null,"idIdent":"Πf","idType":"is-lcc C → Hom C a b → Functor (Slice C a) (Slice C b)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#3662","idDesc":null,"idIdent":"tensor⊣hom′","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) → tensor lcc f ⊣ hom lcc f"},{"idAnchor":"Cat.CartesianClosed.Locally.html#3923","idDesc":null,"idIdent":"a×-","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) →\nFunctor (Slice C a) (Slice C a)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#4227","idDesc":null,"idIdent":"p2","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) (g : Slice C a .Hom x y) →\nPathP (λ i → /-Hom (p1 lcc f x i) (p1 lcc f y i))\n(F₁ (tensor lcc f) g) (F₁ (a×- lcc f) g)"},{"idAnchor":"Cat.CartesianClosed.Locally.html#4914","idDesc":null,"idIdent":"adj","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) → a×- lcc f ⊣ hom lcc f"},{"idAnchor":"Cat.CartesianClosed.Locally.html#4019","idDesc":null,"idIdent":"tensor-is-product","idType":"(lcc : is-lcc C) (f : Slice C a .Ob) → tensor lcc f ≡ a×- lcc f"},{"idAnchor":"Algebra.Monoid.html#1400","idDesc":null,"idIdent":"eqv","idType":"Iso (is-monoid id₁ _⋆₁_)\n(∑ (is-semigroup _⋆₁_)\n (λ has-is-semigroup₁ →\n    ∑ ({x : A} → (id₁ ⋆₁ x) ≡ x) (λ idl₁ → {x : A} → (x ⋆₁ id₁) ≡ x)))"},{"idAnchor":"Algebra.Monoid.html#919","idDesc":null,"idIdent":"is-monoid","idType":"(id₁ : A) (_⋆₁_ : A → A → A) → Type A.ℓ"},{"idAnchor":"Algebra.Monoid.html#5105","idDesc":null,"idIdent":"monoid-inverse-unique","idType":"is-monoid 1M _⋆₁_ →\n(e x y : A) → (x ⋆₁ e) ≡ 1M → (e ⋆₁ y) ≡ 1M → x ≡ y"},{"idAnchor":"Algebra.Monoid.html#2030","idDesc":null,"idIdent":"_⋆_","idType":"Monoid-on A → A → A → A"},{"idAnchor":"Algebra.Monoid.html#994","idDesc":null,"idIdent":"has-is-semigroup","idType":"is-monoid id₁ _⋆₁_ → is-semigroup _⋆₁_"},{"idAnchor":"Algebra.Monoid.html#1119","idDesc":null,"idIdent":"idr","idType":"is-monoid id₁ _⋆₁_ → (x ⋆₁ id₁) ≡ x"},{"idAnchor":"Algebra.Monoid.html#2013","idDesc":null,"idIdent":"identity","idType":"Monoid-on A → A"},{"idAnchor":"Algebra.Monoid.html#2051","idDesc":null,"idIdent":"has-is-monoid","idType":"(r : Monoid-on A) → is-monoid (r .identity) (r ._⋆_)"},{"idAnchor":"Algebra.Monoid.html#2956","idDesc":null,"idIdent":"Monoid-univalent","idType":"is-univalent (HomT→Str Monoid≃)"},{"idAnchor":"Algebra.Monoid.html#2582","idDesc":null,"idIdent":"pres-id","idType":"Monoid-hom A B₁ e → e (A .snd .identity) ≡ B₁ .snd .identity"},{"idAnchor":"Algebra.Monoid.html#2692","idDesc":null,"idIdent":"Monoid≃","idType":"(A B₁ : Σ Monoid-on) (e : A .fst ≃ B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Monoid.html#2413","idDesc":null,"idIdent":"Monoid-hom","idType":"(A B₁ : Σ Monoid-on) (e : A .fst → B₁ .fst) → Type ℓ"},{"idAnchor":"Algebra.Monoid.html#3424","idDesc":null,"idIdent":"Monoid≡","idType":"(A ≃[ HomT→Str Monoid≃ ] B₁) ≃ (A ≡ B₁)"},{"idAnchor":"Algebra.Monoid.html#1459","idDesc":null,"idIdent":"H-Level-is-monoid","idType":"H-Level (is-monoid id₁ _⋆₁_) (suc n)"},{"idAnchor":"Algebra.Monoid.html#1088","idDesc":null,"idIdent":"idl","idType":"is-monoid id₁ _⋆₁_ → (id₁ ⋆₁ x) ≡ x"},{"idAnchor":"Algebra.Monoid.html#2130","idDesc":null,"idIdent":"Monoid","idType":"(ℓ : Level) → Type (lsuc ℓ)"},{"idAnchor":"Algebra.Monoid.html#1963","idDesc":null,"idIdent":"Monoid-on","idType":"(A : Type ℓ) → Type ℓ"},{"idAnchor":"Algebra.Monoid.html#4060","idDesc":null,"idIdent":"is-monoid→is-unital-magma","idType":"is-monoid id₁ _⋆₁_ → is-unital-magma id₁ _⋆₁_"},{"idAnchor":"Algebra.Monoid.html#2622","idDesc":null,"idIdent":"pres-⋆","idType":"Monoid-hom A B₁ e →\n(x y : A .fst) → e (A .snd ._⋆_ x y) ≡ B₁ .snd ._⋆_ (e x) (e y)"},{"idAnchor":"Algebra.Monoid.html#4453","idDesc":null,"idIdent":"is-unital-magma→is-semigroup→is-monoid","idType":"is-unital-magma id₁ _⋆₁_ → is-semigroup _⋆₁_ → is-monoid id₁ _⋆₁_"},{"idAnchor":"Cat.Displayed.Cartesian.html#958","idDesc":null,"idIdent":"Cartesian-fibration","idType":"(E : Displayed B₁ o′ ℓ′) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Displayed.Cartesian.html#581","idDesc":null,"idIdent":"unique","idType":"(r : Cartesian E f f′) (m′ : Hom[ E ] m u′ x) →\n(E ∘′ f′) m′ ≡ h′ → m′ ≡ r .universal m h′"},{"idAnchor":"Cat.Displayed.Cartesian.html#1039","idDesc":null,"idIdent":"has-lift","idType":"Cartesian-fibration E →\n(f : B₁ .Hom x y) (y′ : Ob[ E ] y) → Cartesian-lift E f y′"},{"idAnchor":"Cat.Displayed.Cartesian.html#906","idDesc":null,"idIdent":"cartesian","idType":"(r : Cartesian-lift E f y′) → Cartesian E f (r .lifting)"},{"idAnchor":"Cat.Displayed.Cartesian.html#389","idDesc":null,"idIdent":"universal","idType":"Cartesian E f f′ →\n(m : B₁ .Hom u a) → Hom[ E ] (B₁ ._∘_ f m) u′ y → Hom[ E ] m u′ x"},{"idAnchor":"Cat.Displayed.Cartesian.html#740","idDesc":null,"idIdent":"Cartesian-lift","idType":"(E : Displayed B₁ o′ ℓ′) (f : B₁ .Hom x y) (y′ : Ob[ E ] y) →\nType (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Displayed.Cartesian.html#852","idDesc":null,"idIdent":"x′","idType":"Cartesian-lift E f y′ → Ob[ E ] x"},{"idAnchor":"Cat.Displayed.Cartesian.html#471","idDesc":null,"idIdent":"commutes","idType":"(r : Cartesian E f f′) (m : B₁ .Hom u a)\n(h′ : Hom[ E ] (B₁ ._∘_ f m) u′ y) →\n(E ∘′ f′) (r .universal m h′) ≡ h′"},{"idAnchor":"Cat.Displayed.Cartesian.html#875","idDesc":null,"idIdent":"lifting","idType":"(r : Cartesian-lift E f y′) → Hom[ E ] f (r .x′) y′"},{"idAnchor":"Cat.Displayed.Cartesian.html#257","idDesc":null,"idIdent":"Cartesian","idType":"(E : Displayed B₁ o′ ℓ′) (f : B₁ .Hom a b) (f′ : Hom[ E ] f x y) →\nType (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Pushout.html#2031","idDesc":null,"idIdent":"i₁","idType":"(r : Pushout C f g) → Hom C Y (r .coapex)"},{"idAnchor":"Cat.Diagram.Pushout.html#1695","idDesc":null,"idIdent":"unique","idType":"(r : is-pushout C f i₁ g i₂) →\n(C ∘ colim′) i₁ ≡ i₁′ →\n(C ∘ colim′) i₂ ≡ i₂′ → colim′ ≡ r .colimiting p"},{"idAnchor":"Cat.Diagram.Pushout.html#747","idDesc":null,"idIdent":"square","idType":"is-pushout C f i₁ g i₂ → (C ∘ i₁) f ≡ (C ∘ i₂) g"},{"idAnchor":"Cat.Diagram.Pushout.html#1622","idDesc":null,"idIdent":"i₂∘colimiting","idType":"(r : is-pushout C f i₁ g i₂) → (C ∘ r .colimiting p) i₂ ≡ i₂′"},{"idAnchor":"Cat.Diagram.Pushout.html#1944","idDesc":null,"idIdent":"Pushout","idType":"(C : Precategory o ℓ) (f : Hom C X Y) (g : Hom C X Z) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Pushout.html#635","idDesc":null,"idIdent":"is-pushout","idType":"(C : Precategory o ℓ) (f : Hom C X Y) (i₁ : Hom C Y P)\n(g : Hom C X Z) (i₂ : Hom C Z P) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Pushout.html#2087","idDesc":null,"idIdent":"has-is-po","idType":"(r : Pushout C f g) → is-pushout C f (r .i₁) g (r .i₂)"},{"idAnchor":"Cat.Diagram.Pushout.html#2059","idDesc":null,"idIdent":"i₂","idType":"(r : Pushout C f g) → Hom C Z (r .coapex)"},{"idAnchor":"Cat.Diagram.Pushout.html#1550","idDesc":null,"idIdent":"i₁∘colimiting","idType":"(r : is-pushout C f i₁ g i₂) → (C ∘ r .colimiting p) i₁ ≡ i₁′"},{"idAnchor":"Cat.Diagram.Pushout.html#2014","idDesc":null,"idIdent":"coapex","idType":"Pushout C f g → Ob C"},{"idAnchor":"Cat.Diagram.Pushout.html#1446","idDesc":null,"idIdent":"colimiting","idType":"is-pushout C f i₁ g i₂ → (C ∘ i₁′) f ≡ (C ∘ i₂′) g → Hom C P Q"},{"idAnchor":"1Lab.Univalence.html#28559","idDesc":null,"idIdent":"transport-∙","idType":"(p : A ≡ B₁) (q : B₁ ≡ C) (u : A) →\ntransport (p ∙ q) u ≡ transport q (transport p u)"},{"idAnchor":"1Lab.Univalence.html#19821","idDesc":null,"idIdent":"EquivJ","idType":"(P : (B₁ : Type ℓ) → A ≃ B₁ → Type ℓ') →\nP A ((λ x → x) , id-equiv) → (e : A ≃ B₁) → P B₁ e"},{"idAnchor":"1Lab.Univalence.html#28031","idDesc":null,"idIdent":".extendedlambda5","idType":"(h : (a : A₀) → PathP B₁ (f₀ a) (f₁ (e .fst a))) (i : I)\n(a : ua e i) →\nI → .(IsOne (~ i ∨ i)) → B₁ i"},{"idAnchor":"1Lab.Univalence.html#19321","idDesc":null,"idIdent":"p","idType":"(A B₁ : Type ℓ) (A≃B : A ≃ B₁) (i : I) →\nPathP (λ i₁ → A → ua A≃B i₁) id (A≃B .fst)"},{"idAnchor":"1Lab.Univalence.html#18177","idDesc":null,"idIdent":"univalence-lift","idType":"is-equiv (λ e → lift (path→equiv e))"},{"idAnchor":"1Lab.Univalence.html#19440","idDesc":null,"idIdent":"q","idType":"(A B₁ : Type ℓ) (A≃B : A ≃ B₁) (i : I) →\nPathP (λ i₁ → is-equiv (p A B₁ A≃B i i₁)) id-equiv (A≃B .snd)"},{"idAnchor":"1Lab.Univalence.html#16772","idDesc":null,"idIdent":"univalence","idType":"is-equiv path→equiv"},{"idAnchor":"1Lab.Univalence.html#27462","idDesc":null,"idIdent":"ua∙","idType":"ua (f ∙e g) ≡ ua f ∙ ua g"},{"idAnchor":"1Lab.Univalence.html#6230","idDesc":null,"idIdent":".extendedlambda0","idType":"(φ : I) (u : I → Partial φ (Type ℓ)) (u0 : Type ℓ [ φ ↦ u i0 ])\n(i : I) →\n.(IsOne (φ ∨ ~ i)) → Σ (λ T → T ≃ outS u0)"},{"idAnchor":"1Lab.Univalence.html#25099","idDesc":null,"idIdent":"e","idType":"(E : Type (ℓ ⊔ ℓ')) (p : E → B₁) (i : I) → E ≃ Σ (fibre p)"},{"idAnchor":"1Lab.Univalence.html#14081","idDesc":null,"idIdent":".extendedlambda3","idType":"(e : A ≃ B₁) → e .fst x ≡ y → (i : I) → .(IsOne (~ i)) → A"},{"idAnchor":"1Lab.Univalence.html#13493","idDesc":null,"idIdent":".extendedlambda2","idType":"(e : A ≃ B₁) (i : I) (x : Partial (~ i) A)\n(y : B₁ [ ~ i ↦ (λ { (i = i0) → e .fst (x _) }) ])\n.(p : IsOne (i ∨ ~ i)) →\n(λ { (i = i0) → A , e ; (i = i1) → B₁ , (λ x₁ → x₁) , id-equiv }) _\n.fst"},{"idAnchor":"1Lab.Univalence.html#16838","idDesc":null,"idIdent":"univalence⁻¹","idType":"is-equiv ua"},{"idAnchor":"1Lab.Univalence.html#28267","idDesc":null,"idIdent":"ua→2","idType":"((a : A₀) (b : B₀) →\n PathP C (f₀ a b) (f₁ (e₁ .fst a) (e₂ .fst b))) →\nPathP (λ i → ua e₁ i → ua e₂ i → C i) f₀ f₁"},{"idAnchor":"1Lab.Univalence.html#8884","idDesc":null,"idIdent":".extendedlambda1","idType":"(eqv : A ≃ B₁) (i : I) → .(IsOne (~ i ∨ i)) → Σ (λ T → T ≃ B₁)"},{"idAnchor":"1Lab.Univalence.html#19108","idDesc":null,"idIdent":"Equiv-is-contr","idType":"(A : Type ℓ) → is-contr (Σ (_≃_ A))"},{"idAnchor":"1Lab.Univalence.html#2897","idDesc":null,"idIdent":"primGlue","idType":"(A : Type ℓ) (T : Partial φ (Type ℓ')) →\nPartialP φ (λ .o → T _ ≃ A) → Type ℓ'"},{"idAnchor":"1Lab.Univalence.html#3198","idDesc":null,"idIdent":"prim^unglue","idType":"primGlue A T e → A"},{"idAnchor":"1Lab.Univalence.html#3033","idDesc":null,"idIdent":"prim^glue","idType":"PartialP φ T → A → primGlue A T e"},{"idAnchor":"1Lab.Univalence.html#15486","idDesc":null,"idIdent":"path→equiv","idType":"A ≡ B₁ → A ≃ B₁"},{"idAnchor":"1Lab.Univalence.html#3439","idDesc":null,"idIdent":"Glue","idType":"(A : Type ℓ) → Partial φ (Σ (λ T → T ≃ A)) → Type ℓ'"},{"idAnchor":"1Lab.Univalence.html#18316","idDesc":null,"idIdent":"morp","idType":"is-iso (λ e → lift (path→equiv e))"},{"idAnchor":"1Lab.Univalence.html#7681","idDesc":null,"idIdent":".extendedlambda1","idType":"(u : I → Partial φ A) (u0 : A [ φ ↦ u i0 ])\n(h2\n : (i : I) →\n   A [ ~ i ∨ φ ↦ (λ { (i = i0) → outS u0 ; (φ = i1) → u i _ }) ])\n(i : I) →\nI → .(IsOne (φ ∨ i)) → A"},{"idAnchor":"1Lab.Univalence.html#19397","idDesc":null,"idIdent":".extendedlambda4","idType":"(A B₁ : Type ℓ) (A≃B : A ≃ B₁) (i : I) (i₁ : I) →\nA → .(IsOne (~ i₁)) → A"},{"idAnchor":"1Lab.Univalence.html#13901","idDesc":null,"idIdent":"path→ua-pathp","idType":"(e : A ≃ B₁) → e .fst x ≡ y → PathP (λ i → ua e i) x y"},{"idAnchor":"1Lab.Univalence.html#12067","idDesc":null,"idIdent":"ua-unglue","idType":"(e : A ≃ B₁) (i : I) (x : ua e i) →\nB₁ [ ~ i ∨ i ↦ (λ { (i = i0) → e .fst x ; (i = i1) → x }) ]"},{"idAnchor":"1Lab.Univalence.html#8250","idDesc":null,"idIdent":".extendedlambda1","idType":"(u : I → Partial φ (Type ℓ)) (u0 : Type ℓ [ φ ↦ u i0 ]) →\n.(IsOne φ) → Σ (λ T → T ≃ outS u0)"},{"idAnchor":"1Lab.Univalence.html#5471","idDesc":null,"idIdent":"glue-hfill","idType":"(φ : I) (u : I → Partial φ (Type ℓ)) (u0 : Type ℓ [ φ ↦ u i0 ])\n(i : I) →\nType ℓ [ ~ i ∨ φ ↦ (λ { (i = i0) → outS u0 ; (φ = i1) → u i _ }) ]"},{"idAnchor":"1Lab.Univalence.html#8818","idDesc":null,"idIdent":"ua","idType":"A ≃ B₁ → A ≡ B₁"},{"idAnchor":"1Lab.Univalence.html#13248","idDesc":null,"idIdent":".extendedlambda2","idType":"(genTel : GeneralizeTel) (e : A ≃ B₁) (i : I)\n(x : Partial (~ i) A) →\n.(IsOne (~ i)) → B₁"},{"idAnchor":"1Lab.Univalence.html#16952","idDesc":null,"idIdent":"iiso","idType":"is-iso path→equiv"},{"idAnchor":"1Lab.Univalence.html#4557","idDesc":null,"idIdent":"unglue","idType":"(φ : I) → primGlue A T e → A"},{"idAnchor":"1Lab.Univalence.html#24822","idDesc":null,"idIdent":"isom","idType":"Iso (Σ (λ E → E → B₁)) (B₁ → Type (ℓ ⊔ ℓ'))"},{"idAnchor":"1Lab.Univalence.html#28792","idDesc":null,"idIdent":"subst-∙","idType":"(B₁ : A → Type ℓ′) (p : x ≡ y) (q : y ≡ z) (u : B₁ x) →\nsubst B₁ (p ∙ q) u ≡ subst B₁ q (subst B₁ p u)"},{"idAnchor":"1Lab.Univalence.html#8097","idDesc":null,"idIdent":"hcomp≡Glue","idType":"(u : I → Partial φ (Type ℓ)) (u0 : Type ℓ [ φ ↦ u i0 ]) →\nhcomp u (outS u0) ≡\nGlue (outS u0)\n(λ { (φ = i1) → u i1 _ , line→equiv (λ j → u (~ j) _) })"},{"idAnchor":"1Lab.Univalence.html#11319","idDesc":null,"idIdent":"Iso→Path","idType":"Iso A B₁ → A ≡ B₁"},{"idAnchor":"1Lab.Univalence.html#13310","idDesc":null,"idIdent":".extendedlambda3","idType":"(genTel : GeneralizeTel) (e : A ≃ B₁) (i : I) (x : Partial (~ i) A)\n(y : B₁ [ ~ i ↦ (λ { (i = i0) → e .fst (x _) }) ]) →\n.(IsOne (~ i ∨ i)) → ua e i"},{"idAnchor":"1Lab.Univalence.html#24644","idDesc":null,"idIdent":"Fibration-equiv","idType":"Σ (λ E → E → B₁) ≃ (B₁ → Type (ℓ ⊔ ℓ'))"},{"idAnchor":"1Lab.Univalence.html#12152","idDesc":null,"idIdent":".extendedlambda2","idType":"(genTel : GeneralizeTel) (e : A ≃ B₁) (i : I) (x : ua e i) →\n.(IsOne (~ i ∨ i)) → B₁"},{"idAnchor":"1Lab.Univalence.html#29054","idDesc":null,"idIdent":"sym-ua","idType":"(e : A ≃ B₁) → sym (ua e) ≡ ua (e e⁻¹)"},{"idAnchor":"1Lab.Univalence.html#20329","idDesc":null,"idIdent":"is-equiv→is-embedding","idType":"(f : A → B₁) → is-equiv f → is-equiv (ap f)"},{"idAnchor":"1Lab.Univalence.html#23068","idDesc":null,"idIdent":"isom","idType":"(B₁ : A → Type ℓ') (a : A) → Iso (fibre fst a) (B₁ a)"},{"idAnchor":"1Lab.Univalence.html#12491","idDesc":null,"idIdent":"ua-pathp→path","idType":"(e : A ≃ B₁) → PathP (λ i → ua e i) x y → e .fst x ≡ y"},{"idAnchor":"1Lab.Univalence.html#15838","idDesc":null,"idIdent":"path→equiv-refl","idType":"path→equiv refl ≡ (id , id-equiv)"},{"idAnchor":"1Lab.Univalence.html#5574","idDesc":null,"idIdent":".extendedlambda0","idType":"(φ : I) (u : I → Partial φ (Type ℓ)) (u0 : Type ℓ [ φ ↦ u i0 ])\n(i : I) →\n.(IsOne (~ i ∨ φ)) → Type ℓ"},{"idAnchor":"1Lab.Univalence.html#23802","idDesc":null,"idIdent":"isom","idType":"(p : E → B₁) → Iso E (Σ (fibre p))"},{"idAnchor":"1Lab.Univalence.html#7497","idDesc":null,"idIdent":".extendedlambda1","idType":"(u : I → Partial φ A) (u0 : A [ φ ↦ u i0 ]) (i : I) →\n.(IsOne (~ i ∨ φ)) → A"},{"idAnchor":"1Lab.Univalence.html#10966","idDesc":null,"idIdent":"uaβ","idType":"(f : A ≃ B₁) (x : A) → transport (ua f) x ≡ f .fst x"},{"idAnchor":"1Lab.Univalence.html#22945","idDesc":null,"idIdent":"Fibre-equiv","idType":"(B₁ : A → Type ℓ') (a : A) → fibre fst a ≃ B₁ a"},{"idAnchor":"1Lab.Univalence.html#27033","idDesc":null,"idIdent":"Map-classifier","idType":"(P : Type (ℓ ⊔ ℓ') → Type ℓ'') → (ℓ /[ P ] B₁) ≃ (B₁ → Σ P)"},{"idAnchor":"1Lab.Univalence.html#16720","idDesc":null,"idIdent":"Path≃Equiv","idType":"Iso (A ≡ B₁) (A ≃ B₁)"},{"idAnchor":"1Lab.Univalence.html#7349","idDesc":null,"idIdent":"hcomp-unique","idType":"(u : I → Partial φ A) (u0 : A [ φ ↦ u i0 ])\n(h2\n : (i : I) →\n   A [ ~ i ∨ φ ↦ (λ { (i = i0) → outS u0 ; (φ = i1) → u i _ }) ]) →\nhcomp u (outS u0) ≡ outS (h2 i1)"},{"idAnchor":"1Lab.Univalence.html#14292","idDesc":null,"idIdent":"ua-pathp≃path","idType":"(e : A ≃ B₁) → (e .fst x ≡ y) ≃ PathP (λ i → ua e i) x y"},{"idAnchor":"1Lab.Univalence.html#27786","idDesc":null,"idIdent":"ua→","idType":"((a : A₀) → PathP B₁ (f₀ a) (f₁ (e .fst a))) →\nPathP (λ i → ua e i → B₁ i) f₀ f₁"},{"idAnchor":"1Lab.Univalence.html#16267","idDesc":null,"idIdent":"ua-id-equiv","idType":"ua ((λ x → x) , id-equiv) ≡ refl"},{"idAnchor":"1Lab.Univalence.html#26397","idDesc":null,"idIdent":"_/[_]_","idType":"(ℓ : Level) →\n(Type (ℓ' ⊔ ℓ) → Type ℓ'') →\nType ℓ' → Type (lsuc ℓ' ⊔ ℓ'' ⊔ lsuc ℓ)"},{"idAnchor":"1Lab.Univalence.html#28158","idDesc":null,"idIdent":"lem","idType":"((a : A₀) → PathP B₁ (f₀ a) (f₁ (e .fst a))) →\n(i : I) →\nua e i → (a₁ : A₁) → e .fst (transport (sym (ua e)) a₁) ≡ a₁"},{"idAnchor":"1Lab.Univalence.html#13141","idDesc":null,"idIdent":"ua-glue","idType":"(e : A ≃ B₁) (i : I) (x : Partial (~ i) A)\n(y : B₁ [ ~ i ↦ (λ { (i = i0) → e .fst (x _) }) ]) →\nua e i [ ~ i ∨ i ↦ (λ { (i = i0) → x _ ; (i = i1) → outS y }) ]"},{"idAnchor":"1Lab.Univalence.html#23719","idDesc":null,"idIdent":"Total-equiv","idType":"(p : E → B₁) → E ≃ Σ (fibre p)"},{"idAnchor":"Cat.Displayed.Total.html#2637","idDesc":null,"idIdent":"∫","idType":"(E : Displayed B₁ o′ ℓ′) → Precategory (o ⊔ o′) (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Displayed.Total.html#1023","idDesc":null,"idIdent":"Total","idType":"Displayed B₁ o′ ℓ′ → Type (o ⊔ o′)"},{"idAnchor":"Cat.Displayed.Total.html#1927","idDesc":null,"idIdent":"total-hom-path","idType":"(E : Displayed B₁ o′ ℓ′) (p : f .hom ≡ g .hom) →\n(E ≡[ f .preserves ] p) (g .preserves) → f ≡ g"},{"idAnchor":"Cat.Displayed.Total.html#1674","idDesc":null,"idIdent":"total-hom-is-set","idType":"(E : Displayed B₁ o′ ℓ′) (X Y : Total E) → is-set (Total-hom E X Y)"},{"idAnchor":"Cat.Displayed.Total.html#1822","idDesc":null,"idIdent":"Total-hom′-is-set","idType":"(E : Displayed B₁ o′ ℓ′) (X Y : Total E) →\nis-set (Σ (λ z → E .Hom[_] z (snd X) (snd Y)))"},{"idAnchor":"Cat.Displayed.Total.html#1357","idDesc":null,"idIdent":"preserves","idType":"(r : Total-hom E X Y) → Hom[ E ] (r .hom) (X .snd) (Y .snd)"},{"idAnchor":"Cat.Displayed.Total.html#1452","idDesc":null,"idIdent":"eqv","idType":"(E : Displayed B₁ o′ ℓ′) →\nIso (Total-hom E X Y)\n(∑ (B₁ .Hom (fst X) (fst Y))\n (λ hom → Hom[ E ] hom (snd X) (snd Y)))"},{"idAnchor":"Cat.Displayed.Total.html#1319","idDesc":null,"idIdent":"hom","idType":"Total-hom E X Y → B₁ .Hom (X .fst) (Y .fst)"},{"idAnchor":"Cat.Displayed.Total.html#1237","idDesc":null,"idIdent":"Total-hom","idType":"(E : Displayed B₁ o′ ℓ′) (X Y : Total E) → Type (ℓ ⊔ ℓ′)"},{"idAnchor":"Cat.Displayed.Total.html#2171","idDesc":null,"idIdent":"total-hom-pathp","idType":"(E : Displayed B₁ o′ ℓ′) (p : X ≡ X′) (q : Y ≡ Y′)\n(r\n : PathP (λ z → B₁ .Hom (p z .fst) (q z .fst)) (f .hom) (g .hom)) →\nPathP (λ z → Hom[ E ] (r z) (p z .snd) (q z .snd)) (f .preserves)\n(g .preserves) →\nPathP (λ i → Total-hom E (p i) (q i)) f g"},{"idAnchor":"Cat.Displayed.Total.html#1297","idDesc":null,"idIdent":"total-hom","idType":"(hom : B₁ .Hom (X .fst) (Y .fst))\n(preserves : Hom[ E ] hom (X .snd) (Y .snd)) →\nTotal-hom E X Y"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#6835","idDesc":null,"idIdent":"A≡M","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nPath (Algebra C M) (A , Am) (X , Xm)"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#2223","idDesc":null,"idIdent":"Eilenberg-Moore-is-category","idType":"(isc : is-category C) (M : Monad C) → is-category (EM isc M)"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#5426","idDesc":null,"idIdent":"same-mults","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nPathP\n(λ i →\n   C .Hom\n   (iso→path C isc (F-map-iso (M M) (A₀≅X₀ isc M A Am X Xm A≅X)) i)\n   (A₀≡X₀ isc M A Am X Xm A≅X i))\n(Am .ν) (Xm .ν)"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#7229","idDesc":null,"idIdent":"triv","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nPathP (λ i → (EM isc M ≅ (A , Am)) (A≡M isc M A Am X Xm A≅X i))\n(id-iso (EM isc M)) A≅X"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#3886","idDesc":null,"idIdent":"A₀≅X₀","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\n(C ≅ A) X"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#1689","idDesc":null,"idIdent":"EM","idType":"(isc : is-category C) (M : Monad C) → Precategory (o ⊔ ℓ) (o ⊔ ℓ)"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#6531","idDesc":null,"idIdent":"same-mults′","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nPathP\n(λ i →\n   C .Hom (M₀ M (A₀≡X₀ isc M A Am X Xm A≅X i))\n   (A₀≡X₀ isc M A Am X Xm A≅X i))\n(Am .ν) (Xm .ν)"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#4368","idDesc":null,"idIdent":"A₀≡X₀","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nA ≡ X"},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#5312","idDesc":null,"idIdent":"Am≡Xm","idType":"(isc : is-category C) (M : Monad C) (A : Ob C)\n(Am : Algebra-on C M A) (X : Ob C) (Xm : Algebra-on C M X)\n(A≅X : (EM isc M ≅ (A , Am)) (X , Xm)) →\nPathP (λ i → Algebra-on C M (A₀≡X₀ isc M A Am X Xm A≅X i)) Am Xm"},{"idAnchor":"Cat.Diagram.Monad.html#1861","idDesc":null,"idIdent":"Algebra-on","idType":"(C : Precategory o h) (M : Monad C) (ob : Ob C) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Monad.html#2343","idDesc":null,"idIdent":"ν-unit","idType":"(r : Algebra-on C M ob) → (C ∘ r .ν) (η M ob) ≡ id C"},{"idAnchor":"Cat.Diagram.Monad.html#2418","idDesc":null,"idIdent":"Algebra","idType":"(C : Precategory o h) → Monad C → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Monad.html#2496","idDesc":null,"idIdent":"Algebra-on-pathp","idType":"(C : Precategory o h) (p : X ≡ Y) →\nPathP (λ i → Hom C (M₀ M (p i)) (p i)) (A .ν) (B₁ .ν) →\nPathP (λ i → Algebra-on C M (p i)) A B₁"},{"idAnchor":"Cat.Diagram.Monad.html#811","idDesc":null,"idIdent":"mult","idType":"(r : Monad C) → r .M F∘ r .M => r .M"},{"idAnchor":"Cat.Diagram.Monad.html#1219","idDesc":null,"idIdent":"mult-assoc","idType":"(r : Monad C) →\n(C ∘ η (r .mult) x) (F₁ (r .M) (η (r .mult) x)) ≡\n(C ∘ η (r .mult) x) (η (r .mult) (F₀ (r .M) x))"},{"idAnchor":"Cat.Diagram.Monad.html#7661","idDesc":null,"idIdent":"Forget","idType":"(C : Precategory o h) (M : Monad C) →\nFunctor (Eilenberg-Moore C M) C"},{"idAnchor":"Cat.Diagram.Monad.html#1963","idDesc":null,"idIdent":"ν","idType":"Algebra-on C M ob → Hom C (M₀ M ob) ob"},{"idAnchor":"Cat.Diagram.Monad.html#1150","idDesc":null,"idIdent":"right-ident","idType":"(r : Monad C) →\n(C ∘ η (r .mult) x) (r .unit .η (F₀ (r .M) x)) ≡ id C"},{"idAnchor":"Cat.Diagram.Monad.html#928","idDesc":null,"idIdent":"M-∘","idType":"(r : Monad C) (f : C .Hom y z) (g : C .Hom x y) →\nM r .F₁ (C ._∘_ f g) ≡ (C ∘ M r .F₁ f) (M r .F₁ g)"},{"idAnchor":"Cat.Diagram.Monad.html#5103","idDesc":null,"idIdent":"Algebra-hom-pathp","idType":"(C : Precategory o h) (p : W ≡ Y) (q : X ≡ Z) →\nPathP (λ z → Hom C (p z .fst) (q z .fst)) (morphism F)\n(morphism G) →\nPathP (λ i → Algebra-hom C M (p i) (q i)) F G"},{"idAnchor":"Cat.Diagram.Monad.html#3646","idDesc":null,"idIdent":"Algebra-hom","idType":"(C : Precategory o h) (M : Monad C) (X Y : Algebra C M) →\nType (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Monad.html#912","idDesc":null,"idIdent":"M-id","idType":"(r : Monad C) → M r .F₁ (C .id) ≡ id C"},{"idAnchor":"Cat.Diagram.Monad.html#4623","idDesc":null,"idIdent":"Algebra-hom-path","idType":"(C : Precategory o h) → morphism F ≡ morphism G → F ≡ G"},{"idAnchor":"Cat.Diagram.Monad.html#888","idDesc":null,"idIdent":"M₀","idType":"(r : Monad C) → C .Ob → Ob C"},{"idAnchor":"Cat.Diagram.Monad.html#8751","idDesc":null,"idIdent":"Free","idType":"(C : Precategory o h) (M : Monad C) →\nFunctor C (Eilenberg-Moore C M)"},{"idAnchor":"Cat.Diagram.Monad.html#9971","idDesc":null,"idIdent":"Free⊣Forget","idType":"(C : Precategory o h) (M : Monad C) → Free C M ⊣ Forget C M"},{"idAnchor":"Cat.Diagram.Monad.html#712","idDesc":null,"idIdent":"Monad","idType":"(C : Precategory o h) → Type (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Monad.html#2379","idDesc":null,"idIdent":"ν-mult","idType":"(r : Algebra-on C M ob) →\n(C ∘ r .ν) (M₁ M (r .ν)) ≡ (C ∘ r .ν) (η M ob)"},{"idAnchor":"Cat.Diagram.Monad.html#5054","idDesc":null,"idIdent":"eqv","idType":"(C : Precategory o h) →\nIso (Algebra-hom C M X Y)\n(∑ (Hom C (fst X) (fst Y))\n (λ morphism →\n    (C ∘ morphism) (X .snd .ν) ≡ (C ∘ Y .snd .ν) (M₁ M morphism)))"},{"idAnchor":"Cat.Diagram.Monad.html#6002","idDesc":null,"idIdent":"Eilenberg-Moore","idType":"(C : Precategory o h) (M : Monad C) → Precategory (o ⊔ h) (o ⊔ h)"},{"idAnchor":"Cat.Diagram.Monad.html#3836","idDesc":null,"idIdent":"morphism","idType":"Algebra-hom C M X Y → Hom C (X .fst) (Y .fst)"},{"idAnchor":"Cat.Diagram.Monad.html#1090","idDesc":null,"idIdent":"left-ident","idType":"(r : Monad C) →\n(C ∘ η (r .mult) x) (F₁ (r .M) (r .unit .η x)) ≡ id C"},{"idAnchor":"Cat.Diagram.Monad.html#792","idDesc":null,"idIdent":"unit","idType":"(r : Monad C) → Id => r .M"},{"idAnchor":"Cat.Diagram.Monad.html#7894","idDesc":null,"idIdent":"Forget-is-faithful","idType":"(C : Precategory o h) (M : Monad C) → is-faithful (Forget C M)"},{"idAnchor":"Cat.Diagram.Monad.html#900","idDesc":null,"idIdent":"M₁","idType":"(r : Monad C) → C .Hom x y → Hom C (M r .F₀ x) (M r .F₀ y)"},{"idAnchor":"Cat.Diagram.Monad.html#3875","idDesc":null,"idIdent":"commutes","idType":"(r : Algebra-hom C M X Y) →\n(C ∘ r .morphism) (X .snd .ν) ≡\n(C ∘ Y .snd .ν) (M₁ M (r .morphism))"},{"idAnchor":"Cat.Diagram.Monad.html#769","idDesc":null,"idIdent":"M","idType":"Monad C → Functor C C"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4320","idDesc":null,"idIdent":"eqv","idType":"(F : Functor J₁ C) →\nIso (Cocone-hom F x y)\n(∑ (C .Hom (coapex x) (coapex y))\n (λ hom → (o₁ : J₁ .Ob) → C ._∘_ hom (ψ x o₁) ≡ ψ y o₁))"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#2661","idDesc":null,"idIdent":"coapex","idType":"Cocone F → C .Ob"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#3115","idDesc":null,"idIdent":"commutes","idType":"(r : Cocone F) (f : J₁ .Hom x y) → C ._∘_ (r .ψ y) (₁ F f) ≡ r .ψ x"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#2374","idDesc":null,"idIdent":"cocone","idType":"(coapex : C .Ob) (ψ : (x : J₁ .Ob) → C .Hom (₀ F x) coapex)\n(commutes : (f : J₁ .Hom x y) → C ._∘_ (ψ y) (₁ F f) ≡ ψ x) →\nCocone F"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#2300","idDesc":null,"idIdent":"Cocone","idType":"(F : Functor J₁ C) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#5271","idDesc":null,"idIdent":"cat","idType":"(F : Functor J₁ C) → Precategory (o ⊔ ℓ ⊔ o′ ⊔ ℓ′) (o ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4239","idDesc":null,"idIdent":"commutes","idType":"(r : Cocone-hom F x y) (o : J₁ .Ob) →\nC ._∘_ (r .hom) (x .ψ o) ≡ y .ψ o"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#8150","idDesc":null,"idIdent":"is-cocomplete","idType":"(o ℓ : Level) →\nPrecategory oc ℓc → Type (oc ⊔ ℓc ⊔ lsuc o ⊔ lsuc ℓ)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#6228","idDesc":null,"idIdent":"Colimit","idType":"(F : Functor J₁ C) → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#6925","idDesc":null,"idIdent":"F-map-cocone","idType":"(F : Functor C D) → Cocone Dia → Cocone (F F∘ Dia)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4865","idDesc":null,"idIdent":"Cocones","idType":"(F : Functor J₁ C) → Precategory (o ⊔ ℓ ⊔ o′ ⊔ ℓ′) (o ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4939","idDesc":null,"idIdent":"compose","idType":"(F : Functor J₁ C) →\nCocone-hom F y z → Cocone-hom F x y → Cocone-hom F x z"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#6158","idDesc":null,"idIdent":"is-colimit","idType":"(F : Functor J₁ C) → Cocone F → Type (o ⊔ ℓ ⊔ o′ ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4493","idDesc":null,"idIdent":"Cocone-hom-path","idType":"(F : Functor J₁ C) → f .hom ≡ g .hom → f ≡ g"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#7425","idDesc":null,"idIdent":"Preserves-colimit","idType":"(F : Functor C D) → Cocone Dia → Type (o₁ ⊔ h₁ ⊔ o₂ ⊔ h₂ ⊔ o₃ ⊔ h₃)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4197","idDesc":null,"idIdent":"hom","idType":"Cocone-hom F x y → C .Hom (x .coapex) (y .coapex)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#6276","idDesc":null,"idIdent":"Colimit-apex","idType":"(F : Functor J₁ C) → Colimit F → C .Ob"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#2681","idDesc":null,"idIdent":"ψ","idType":"(r : Cocone F) (x : J₁ .Ob) → C .Hom (₀ F x) (r .coapex)"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#3281","idDesc":null,"idIdent":"Cocone-path","idType":"(F : Functor J₁ C) (p : coapex x ≡ coapex y) →\n((o : J₁ .Ob) →\n PathP (λ i → C .Hom (₀ F o) (p i)) (ψ x o) (ψ y o)) →\nx ≡ y"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4170","idDesc":null,"idIdent":"cocone-hom","idType":"(hom : C .Hom (x .coapex) (y .coapex))\n(commutes : (o : J₁ .Ob) → C ._∘_ hom (x .ψ o) ≡ y .ψ o) →\nCocone-hom F x y"},{"idAnchor":"Cat.Diagram.Colimit.Base.html#4086","idDesc":null,"idIdent":"Cocone-hom","idType":"(F : Functor J₁ C) (x y : Cocone F) → Type (o ⊔ ℓ′)"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1236","idDesc":null,"idIdent":"is-regular-epi→is-epic","idType":"(r : is-regular-epi C f) → is-epic C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#2491","idDesc":null,"idIdent":"is-regular-epi→is-effective-epi","idType":"(C : Precategory o ℓ) →\nPullback C f f → is-regular-epi C f → is-effective-epi C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#2143","idDesc":null,"idIdent":"re","idType":"(r : is-effective-epi C f) → is-regular-epi C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1877","idDesc":null,"idIdent":"p₂","idType":"(r : is-effective-epi C f) → Hom C (r .kernel) a"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1025","idDesc":null,"idIdent":"arr₁","idType":"(r : is-regular-epi C f) → Hom C (r .r) a"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#981","idDesc":null,"idIdent":"reg-epi","idType":"(has-is-coeq : is-coequaliser C arr₁ arr₂ f) → is-regular-epi C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#2780","idDesc":null,"idIdent":"eff","idType":"(C : Precategory o ℓ) (kp : Pullback C f f)\n(reg : is-regular-epi C f) →\nis-effective-epi C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1851","idDesc":null,"idIdent":"kernel","idType":"is-effective-epi C f → Ob C"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1052","idDesc":null,"idIdent":"has-is-coeq","idType":"(r : is-regular-epi C f) → is-coequaliser C (r .arr₁) (r .arr₂) f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1002","idDesc":null,"idIdent":"r","idType":"is-regular-epi C f → Ob C"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1032","idDesc":null,"idIdent":"arr₂","idType":"(r : is-regular-epi C f) → Hom C (r .r) a"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1768","idDesc":null,"idIdent":"is-effective-epi","idType":"(C : Precategory o ℓ) (f : Hom C a b) → Type (o ⊔ ℓ)"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#3017","idDesc":null,"idIdent":"q","idType":"(C : Precategory o ℓ) (kp : Pullback C f f)\n(reg : is-regular-epi C f)\n(p : (C ∘ e′) (eff C kp reg .p₁) ≡ (C ∘ e′) (eff C kp reg .p₂)) →\n(C ∘ e′) (arr₁ reg) ≡ (C ∘ e′) (arr₂ reg)"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1874","idDesc":null,"idIdent":"p₁","idType":"(r : is-effective-epi C f) → Hom C (r .kernel) a"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1998","idDesc":null,"idIdent":"is-effective-epi→is-regular-epi","idType":"(r : is-effective-epi C f) → is-regular-epi C f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1953","idDesc":null,"idIdent":"has-is-coeq","idType":"(r : is-effective-epi C f) → is-coequaliser C (r .p₁) (r .p₂) f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#1908","idDesc":null,"idIdent":"is-kernel-pair","idType":"(r : is-effective-epi C f) → is-pullback C (r .p₁) f (r .p₂) f"},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#899","idDesc":null,"idIdent":"is-regular-epi","idType":"(C : Precategory o ℓ) (f : Hom C a b) → Type (o ⊔ ℓ)"},{"idAnchor":"Agda.Primitive.html#1428","idDesc":null,"idIdent":"primPOr","idType":"(i j : I) →\nPartialP i (λ .z → A _) →\nPartialP j (λ .z → A _) → PartialP (i ∨ j) A"},{"idAnchor":"Agda.Primitive.html#418","idDesc":null,"idIdent":"primIMax","idType":"I → I → I"},{"idAnchor":"Agda.Primitive.html#1851","idDesc":null,"idIdent":"primTransp","idType":"(A : (i : I) → Type (ℓ i)) → I → A i0 → A i1"},{"idAnchor":"Agda.Primitive.html#1924","idDesc":null,"idIdent":"primHComp","idType":"(I → Partial φ A) → A → A"},{"idAnchor":"Agda.Primitive.html#150","idDesc":null,"idIdent":"I","idType":"IUniv"},{"idAnchor":"Agda.Primitive.html#601","idDesc":null,"idIdent":"IsOne2","idType":"(i j : I) → IsOne j → IsOne (i ∨ j)"},{"idAnchor":"Agda.Primitive.html#2013","idDesc":null,"idIdent":"PathP","idType":"(A : I → Type ℓ) → A i0 → A i1 → Type ℓ"},{"idAnchor":"Agda.Primitive.html#101","idDesc":null,"idIdent":"IUniv","idType":"SSet (lsuc lzero)"},{"idAnchor":"Agda.Primitive.html#529","idDesc":null,"idIdent":"itIsOne","idType":"IsOne i1"},{"idAnchor":"Agda.Primitive.html#482","idDesc":null,"idIdent":"IsOne","idType":"I → SSet lzero"},{"idAnchor":"Agda.Primitive.html#393","idDesc":null,"idIdent":"primIMin","idType":"I → I → I"},{"idAnchor":"Agda.Primitive.html#1115","idDesc":null,"idIdent":"Partial","idType":"(φ : I) (A : Type a) → SSet a"},{"idAnchor":"Agda.Primitive.html#550","idDesc":null,"idIdent":"IsOne1","idType":"(i j : I) → IsOne i → IsOne (i ∨ j)"},{"idAnchor":"Agda.Primitive.html#193","idDesc":null,"idIdent":"i0","idType":"I"},{"idAnchor":"Agda.Primitive.html#443","idDesc":null,"idIdent":"primINeg","idType":"I → I"},{"idAnchor":"Agda.Primitive.html#1697","idDesc":null,"idIdent":"primComp","idType":"(A : (i : I) → Type (ℓ i)) →\n((i : I) → Partial φ (A i)) → A i0 → A i1"},{"idAnchor":"Agda.Primitive.html#1175","idDesc":null,"idIdent":"isOneEmpty","idType":"PartialP i0 A"},{"idAnchor":"Agda.Primitive.html#1149","idDesc":null,"idIdent":"PartialP","idType":"(φ : I) (A : .(o : IsOne φ) → Type a) → SSet a"},{"idAnchor":"Agda.Primitive.html#221","idDesc":null,"idIdent":"i1","idType":"I"},{"idAnchor":"1Lab.Path.Groupoid.html#7128","idDesc":null,"idIdent":"∙-cancel'-l","idType":"(p : x ≡ y) (q r : y ≡ z) → p ∙ q ≡ p ∙ r → q ≡ r"},{"idAnchor":"1Lab.Path.Groupoid.html#2470","idDesc":null,"idIdent":"∙-assoc","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) → (p ∙ (q ∙ r)) ≡ ((p ∙ q) ∙ r)"},{"idAnchor":"1Lab.Path.Groupoid.html#6272","idDesc":null,"idIdent":"ap-comp-path","idType":"(f : A → B₁) (p : x ≡ y) (q : y ≡ z) →\nap f (p ∙ q) ≡ ap f p ∙ ap f q"},{"idAnchor":"1Lab.Path.Groupoid.html#4623","idDesc":null,"idIdent":"∙-id-l","idType":"(p : x ≡ y) → refl ∙ p ≡ p"},{"idAnchor":"1Lab.Path.Groupoid.html#5058","idDesc":null,"idIdent":"∙-inv-r","idType":"(p : x ≡ y) → p ∙ sym p ≡ refl"},{"idAnchor":"1Lab.Path.Groupoid.html#4076","idDesc":null,"idIdent":"∙-inv-r","idType":"(p : x ≡ y) → (inv p ∙ p) ≡ refl"},{"idAnchor":"1Lab.Path.Groupoid.html#6877","idDesc":null,"idIdent":"∙-cancel-l","idType":"(p : x ≡ y) (q : y ≡ z) → sym p ∙ p ∙ q ≡ q"},{"idAnchor":"1Lab.Path.Groupoid.html#7738","idDesc":null,"idIdent":"homotopy-invert","idType":"(H : (x : A) → f x ≡ x) → H (f x) ≡ ap f (H x)"},{"idAnchor":"1Lab.Path.Groupoid.html#2700","idDesc":null,"idIdent":"lemma","idType":"w ≡ x →\nx ≡ y →\ny ≡ z →\n(q : w ≡ y) (r : y ≡ z) → (refl ∙ (q ∙ r)) ≡ ((refl ∙ q) ∙ r)"},{"idAnchor":"1Lab.Path.Groupoid.html#4743","idDesc":null,"idIdent":"∙-assoc","idType":"(p : w ≡ x) (q : x ≡ y) (r : y ≡ z) → p ∙ q ∙ r ≡ (p ∙ q) ∙ r"},{"idAnchor":"1Lab.Path.Groupoid.html#5500","idDesc":null,"idIdent":"∙-inv-l","idType":"(p : x ≡ y) → sym p ∙ p ≡ refl"},{"idAnchor":"1Lab.Path.Groupoid.html#6431","idDesc":null,"idIdent":".extendedlambda0","idType":"(f : A → B₁) (p : x ≡ y) (q : y ≡ z) (i j : I) →\nI → .(IsOne (~ i ∨ ~ j ∨ j)) → B₁"},{"idAnchor":"1Lab.Path.Groupoid.html#1892","idDesc":null,"idIdent":"∙-id-r","idType":"(p : x ≡ y) → (p ∙ refl) ≡ p"},{"idAnchor":"1Lab.Path.Groupoid.html#3477","idDesc":null,"idIdent":"inv","idType":"x ≡ y → y ≡ x"},{"idAnchor":"1Lab.Path.Groupoid.html#2251","idDesc":null,"idIdent":"∙-id-l","idType":"(p : y ≡ z) → (refl ∙ p) ≡ p"},{"idAnchor":"1Lab.Path.Groupoid.html#4549","idDesc":null,"idIdent":"∙-id-r","idType":"(p : x ≡ y) → p ∙ refl ≡ p"},{"idAnchor":"1Lab.Path.Groupoid.html#3648","idDesc":null,"idIdent":"inv-inv","idType":"(p : x ≡ y) → inv (inv p) ≡ p"},{"idAnchor":"1Lab.Path.Groupoid.html#7357","idDesc":null,"idIdent":"∙-cancel'-r","idType":"(p : y ≡ z) (q r : x ≡ y) → q ∙ p ≡ r ∙ p → q ≡ r"},{"idAnchor":"1Lab.Path.Groupoid.html#1652","idDesc":null,"idIdent":"_∙_","idType":"x ≡ y → y ≡ z → x ≡ z"},{"idAnchor":"1Lab.Path.Groupoid.html#5154","idDesc":null,"idIdent":".extendedlambda0","idType":"(p : x ≡ y) (i j : I) → I → .(IsOne (~ j ∨ j ∨ i)) → A"},{"idAnchor":"1Lab.Path.Groupoid.html#3911","idDesc":null,"idIdent":"∙-inv-l","idType":"(p : x ≡ y) → (p ∙ inv p) ≡ refl"},{"idAnchor":"1Lab.HIT.S1.html#622","idDesc":null,"idIdent":"S¹","idType":"Type"},{"idAnchor":"1Lab.HIT.S1.html#2628","idDesc":null,"idIdent":"lemma","idType":"sym loop ∙ loop ∙ loop ≡ loop"},{"idAnchor":"1Lab.HIT.S1.html#3005","idDesc":null,"idIdent":"Cover","idType":"S¹ → Type"},{"idAnchor":"1Lab.HIT.S1.html#2320","idDesc":null,"idIdent":"S¹-elim'","idType":"(pb : P base) → subst P loop pb ≡ pb → (x : S¹) → P x"},{"idAnchor":"1Lab.HIT.S1.html#8737","idDesc":null,"idIdent":".extendedlambda0","idType":"(i : I) (n : Cover (loop i)) (j : I) →\nI → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → S¹"},{"idAnchor":"1Lab.HIT.S1.html#3290","idDesc":null,"idIdent":"encode","idType":"(x : S¹) → base ≡ x → Cover x"},{"idAnchor":"1Lab.HIT.S1.html#1873","idDesc":null,"idIdent":"refl≠loop","idType":"refl ≡ loop → ⊥"},{"idAnchor":"1Lab.HIT.S1.html#640","idDesc":null,"idIdent":"base","idType":"S¹"},{"idAnchor":"1Lab.HIT.S1.html#7011","idDesc":null,"idIdent":".extendedlambda0","idType":"(i : I) (n : Cover (loop i)) (j : I) (x : Nat) (i₁ j₁ : I) →\nI → .(IsOne (~ j₁ ∨ j₁)) → S¹"},{"idAnchor":"1Lab.HIT.S1.html#1746","idDesc":null,"idIdent":"parity","idType":"base ≡ base → Bool"},{"idAnchor":"1Lab.HIT.S1.html#652","idDesc":null,"idIdent":"loop","idType":"base ≡ base"},{"idAnchor":"1Lab.HIT.S1.html#4119","idDesc":null,"idIdent":"encode-loop^","idType":"(n : Int) → encode base (loop^ n) ≡ n"},{"idAnchor":"1Lab.HIT.S1.html#4724","idDesc":null,"idIdent":"decode","idType":"(x : S¹) → Cover x → base ≡ x"},{"idAnchor":"1Lab.HIT.S1.html#6108","idDesc":null,"idIdent":"loop^-square","idType":"(i : I) →\nCover (loop i) →\nI → (n : Int) → Square refl (loop^ (pred-int n)) (loop^ n) loop"},{"idAnchor":"1Lab.HIT.S1.html#1246","idDesc":null,"idIdent":"möbius","idType":"S¹ → Type"},{"idAnchor":"1Lab.HIT.S1.html#9373","idDesc":null,"idIdent":"ΩS¹≃Int","idType":"(base ≡ base) ≃ Int"},{"idAnchor":"1Lab.HIT.S1.html#8715","idDesc":null,"idIdent":"square","idType":"(i : I) (n : Cover (loop i)) (j : I) → S¹"},{"idAnchor":"1Lab.HIT.S1.html#3658","idDesc":null,"idIdent":"loop^","idType":"Int → base ≡ base"},{"idAnchor":"1Lab.HIT.S1.html#2531","idDesc":null,"idIdent":"always-loop","idType":"(x : S¹) → x ≡ x"},{"idAnchor":"1Lab.HIT.S1.html#8467","idDesc":null,"idIdent":".extendedlambda0","idType":"(i : I) (n : Cover (loop i)) (j : I) (x : Nat) (i₁ j₁ : I) →\nI → .(IsOne (~ j₁ ∨ j₁)) → S¹"},{"idAnchor":"1Lab.HIT.S1.html#1545","idDesc":null,"idIdent":"S¹-rec","idType":"(b : A) → b ≡ b → S¹ → A"},{"idAnchor":"1Lab.HIT.S1.html#2141","idDesc":null,"idIdent":"S¹-elim","idType":"(pb : P base) → PathP (λ i → P (loop i)) pb pb → (x : S¹) → P x"},{"idAnchor":"1Lab.HIT.S1.html#9156","idDesc":null,"idIdent":"decode-encode","idType":"(p : base ≡ x) → decode x (encode x p) ≡ p"},{"idAnchor":"Agda.Builtin.String.html#681","idDesc":null,"idIdent":"primShowNat","idType":"Nat → String"},{"idAnchor":"Agda.Builtin.String.html#605","idDesc":null,"idIdent":"primShowChar","idType":"Char → String"},{"idAnchor":"Agda.Builtin.String.html#309","idDesc":null,"idIdent":"String","idType":"Type"},{"idAnchor":"Agda.Builtin.String.html#511","idDesc":null,"idIdent":"primStringAppend","idType":"String → String → String"},{"idAnchor":"Agda.Builtin.String.html#642","idDesc":null,"idIdent":"primShowString","idType":"String → String"},{"idAnchor":"Agda.Builtin.String.html#365","idDesc":null,"idIdent":"primStringUncons","idType":"String → Maybe (∑ Char (λ _ → String))"},{"idAnchor":"Agda.Builtin.String.html#559","idDesc":null,"idIdent":"primStringEquality","idType":"String → String → Bool"},{"idAnchor":"Agda.Builtin.String.html#427","idDesc":null,"idIdent":"primStringToList","idType":"String → List Char"},{"idAnchor":"Agda.Builtin.String.html#469","idDesc":null,"idIdent":"primStringFromList","idType":"List Char → String"},{"idAnchor":"Data.Int.html#11367","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nsuc x ≤ y → suc y ≤ x → (x₁ y₁ : Nat) → x₁ < y₁ → y₁ < x₁ → ⊥"},{"idAnchor":"Data.Int.html#26170","idDesc":null,"idIdent":"lemma","idType":"(a b c d e f : Nat) →\na * (c + e) + b * (d + f) + (a * d + b * c + (a * f + b * e)) ≡\na * (d + f) + b * (c + e) + (a * c + b * d + (a * e + b * f))"},{"idAnchor":"Data.Int.html#20306","idDesc":null,"idIdent":"suc-predℤ","idType":"(x : Int) → sucℤ (predℤ x) ≡ x"},{"idAnchor":"Data.Int.html#24427","idDesc":null,"idIdent":"l₂","idType":"(a b x y : Nat) →\na * x + b * y + (a * suc y + b * suc x) ≡\na * y + b * x + (a * suc x + b * suc y)"},{"idAnchor":"Data.Int.html#12444","idDesc":null,"idIdent":"go","idType":"(n : Int) → Canonical n"},{"idAnchor":"Data.Int.html#8493","idDesc":null,"idIdent":"lemma₂","idType":"(x y : Nat) → y < x → diff (x - y) 0 ≡ diff x y"},{"idAnchor":"Data.Int.html#2994","idDesc":null,"idIdent":"same-difference","idType":"a + d ≡ b + c → diff a b ≡ diff c d"},{"idAnchor":"Data.Int.html#25165","idDesc":null,"idIdent":"lemma","idType":"(a b c d e f : Nat) →\n(a * c + b * d) * e + (a * d + b * c) * f +\n(a * (c * f + d * e) + b * (c * e + d * f))\n≡\n(a * c + b * d) * f + (a * d + b * c) * e +\n(a * (c * e + d * f) + b * (c * f + d * e))"},{"idAnchor":"Data.Int.html#5300","idDesc":null,"idIdent":"encode-p-to","idType":"a + suc n ≡ b + suc m → a + n ≡ b + m"},{"idAnchor":"Data.Int.html#8600","idDesc":null,"idIdent":"work","idType":"(x y : Nat) → Canonical (diff x y)"},{"idAnchor":"Data.Int.html#20168","idDesc":null,"idIdent":"pred-sucℤ","idType":"(x : Int) → predℤ (sucℤ x) ≡ x"},{"idAnchor":"Data.Int.html#3961","idDesc":null,"idIdent":".extendedlambda0","idType":"(a b : Nat) (i j : I) → I → .(IsOne (~ i ∨ i ∨ ~ j ∨ j)) → Int"},{"idAnchor":"Data.Int.html#20444","idDesc":null,"idIdent":"sucℤ-is-equiv","idType":"is-equiv sucℤ"},{"idAnchor":"Data.Int.html#4194","idDesc":null,"idIdent":"quot-triangle","idType":"(a b : Nat) (i : I) → diff a b ≡ quot a b i"},{"idAnchor":"Data.Int.html#8546","idDesc":null,"idIdent":"lemma₃","idType":"(x y : Nat) → x ≡ y → diff 0 0 ≡ diff x y"},{"idAnchor":"Data.Int.html#662","idDesc":null,"idIdent":"diff","idType":"Nat → Nat → Int"},{"idAnchor":"Data.Int.html#16751","idDesc":null,"idIdent":"Int-elim₂-prop","idType":"((x y : Int) → is-prop (P x y)) →\n((a b x y : Nat) → P (diff a b) (diff x y)) → (x y : Int) → P x y"},{"idAnchor":"Data.Int.html#21318","idDesc":null,"idIdent":"+ℤ-zeror","idType":"(x : Int) → (x +ℤ 0) ≡ x"},{"idAnchor":"Data.Int.html#689","idDesc":null,"idIdent":"quot","idType":"(m n : Nat) → diff m n ≡ diff (suc m) (suc n)"},{"idAnchor":"Data.Int.html#1726","idDesc":null,"idIdent":"cancel","idType":"(a b n : Nat) → diff a b ≡ diff (n + a) (n + b)"},{"idAnchor":"Data.Int.html#12089","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nsuc y ≤ x → suc x ≡ suc y → (x₁ y₁ : Nat) → y₁ < x₁ → x₁ ≡ y₁ → ⊥"},{"idAnchor":"Data.Int.html#24062","idDesc":null,"idIdent":"_*ℤ_","idType":"Int → Int → Int"},{"idAnchor":"Data.Int.html#24873","idDesc":null,"idIdent":"*ℤ-distrib-+ℤ-l","idType":"(x y z : Int) → (x *ℤ (y +ℤ z)) ≡ ((x *ℤ y) +ℤ (x *ℤ z))"},{"idAnchor":"Data.Int.html#2475","idDesc":null,"idIdent":"offset-positive","idType":"(a b : Nat) → diff (a + b) a ≡ diff b 0"},{"idAnchor":"Data.Int.html#24845","idDesc":null,"idIdent":"*ℤ-idr","idType":"(x : Int) → (x *ℤ 1) ≡ x"},{"idAnchor":"Data.Int.html#643","idDesc":null,"idIdent":"Int","idType":"Type"},{"idAnchor":"Data.Int.html#25953","idDesc":null,"idIdent":"lemma","idType":"(a b : Nat) → a * 1 + b * 0 + b ≡ a * 0 + b * 1 + a"},{"idAnchor":"Data.Int.html#26994","idDesc":null,"idIdent":"Discrete-Int","idType":"Discrete Int"},{"idAnchor":"Data.Int.html#20539","idDesc":null,"idIdent":"predℤ-is-equiv","idType":"is-equiv predℤ"},{"idAnchor":"Data.Int.html#12868","idDesc":null,"idIdent":"into","idType":"Nat × Nat → Int"},{"idAnchor":"Data.Int.html#2224","idDesc":null,"idIdent":"offset-negative","idType":"(a b : Nat) → diff a (a + b) ≡ diff 0 b"},{"idAnchor":"Data.Int.html#25772","idDesc":null,"idIdent":"lemma","idType":"(a b : Nat) → a + 0 + 0 + b ≡ b + 0 + 0 + a"},{"idAnchor":"Data.Int.html#17101","idDesc":null,"idIdent":"Int-elim₃-prop","idType":"((x y z : Int) → is-prop (P x y z)) →\n((a b c d e f : Nat) → P (diff a b) (diff c d) (diff e f)) →\n(x y z : Int) → P x y z"},{"idAnchor":"Data.Int.html#6892","idDesc":null,"idIdent":"Negative-Int","idType":"Negative Int"},{"idAnchor":"Data.Int.html#15604","idDesc":null,"idIdent":"Int-rec₂-set","idType":"⦃ iss-b : H-Level B₁ 2 ⦄ (f : Nat × Nat → Nat × Nat → B₁) →\n((a b x y : Nat) → f (a , b) (x , y) ≡ f (suc a , suc b) (x , y)) →\n((a b x y : Nat) → f (a , b) (x , y) ≡ f (a , b) (suc x , suc y)) →\nInt → Int → B₁"},{"idAnchor":"Data.Int.html#13023","idDesc":null,"idIdent":"linv","idType":"(x : Int) → into (from x) ≡ x"},{"idAnchor":"Data.Int.html#24940","idDesc":null,"idIdent":"*ℤ-distrib-+ℤ-r","idType":"(x y z : Int) → ((y +ℤ z) *ℤ x) ≡ ((y *ℤ x) +ℤ (z *ℤ x))"},{"idAnchor":"Data.Int.html#17951","idDesc":null,"idIdent":"canonicalise-not-both-suc","idType":"(x : Int) →\ncanonicalise x .fst ≡ suc k → canonicalise x .snd .fst ≡ suc n → ⊥"},{"idAnchor":"Data.Int.html#12719","idDesc":null,"idIdent":"H-Level-Int","idType":"H-Level Int (2 + n)"},{"idAnchor":"Data.Int.html#12930","idDesc":null,"idIdent":"from","idType":"Int → Nat × Nat"},{"idAnchor":"Data.Int.html#21211","idDesc":null,"idIdent":"+ℤ-associative","idType":"(x y z : Int) → ((x +ℤ y) +ℤ z) ≡ (x +ℤ (y +ℤ z))"},{"idAnchor":"Data.Int.html#26482","idDesc":null,"idIdent":"lemma","idType":"(a b c d e f : Nat) →\n(c + e) * a + (d + f) * b + (c * b + d * a + (e * b + f * a)) ≡\n(c + e) * b + (d + f) * a + (c * a + d * b + (e * a + f * b))"},{"idAnchor":"Data.Int.html#24774","idDesc":null,"idIdent":"*ℤ-commutative","idType":"(x y : Int) → (x *ℤ y) ≡ (y *ℤ x)"},{"idAnchor":"Data.Int.html#22690","idDesc":null,"idIdent":"+ℤ-inversel","idType":"(x : Int) → (negate x +ℤ x) ≡ 0"},{"idAnchor":"Data.Int.html#15946","idDesc":null,"idIdent":"square","idType":"⦃ iss-b : H-Level B₁ 2 ⦄ (f : Nat × Nat → Nat × Nat → B₁)\n(pl\n : (a b x y : Nat) → f (a , b) (x , y) ≡ f (suc a , suc b) (x , y))\n(pr\n : (a b x y : Nat) → f (a , b) (x , y) ≡ f (a , b) (suc x , suc y))\n(a b x y : Nat) →\nPathP (λ i → pl a b x y i ≡ pl a b (suc x) (suc y) i) (pr a b x y)\n(pr (suc a) (suc b) x y)"},{"idAnchor":"Data.Int.html#24817","idDesc":null,"idIdent":"*ℤ-idl","idType":"(x : Int) → (1 *ℤ x) ≡ x"},{"idAnchor":"Data.Int.html#5086","idDesc":null,"idIdent":"encode-p-from","idType":"a + n ≡ b + m → a + suc n ≡ b + suc m"},{"idAnchor":"Data.Int.html#23229","idDesc":null,"idIdent":"_-ℤ_","idType":"Int → Int → Int"},{"idAnchor":"Data.Int.html#18375","idDesc":null,"idIdent":"go","idType":"(a b : Nat) →\ncanonicalise (diff a b) .fst ≡ suc k →\ncanonicalise (diff a b) .snd .fst ≡ suc n → ⊥"},{"idAnchor":"Data.Int.html#22145","idDesc":null,"idIdent":"negate","idType":"Int → Int"},{"idAnchor":"Data.Int.html#11522","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nsuc x ≤ y → suc x ≡ suc y → (x₁ y₁ : Nat) → x₁ < y₁ → x₁ ≡ y₁ → ⊥"},{"idAnchor":"Data.Int.html#24715","idDesc":null,"idIdent":"*ℤ-associative","idType":"(x y z : Int) → ((x *ℤ y) *ℤ z) ≡ (x *ℤ (y *ℤ z))"},{"idAnchor":"Data.Int.html#24281","idDesc":null,"idIdent":"l₁","idType":"(a b x y : Nat) →\na * x + b * y + (suc a * y + suc b * x) ≡\na * y + b * x + (suc a * x + suc b * y)"},{"idAnchor":"Data.Int.html#20711","idDesc":null,"idIdent":".extendedlambda0","idType":"Nat × Nat → Nat × Nat → Int"},{"idAnchor":"Data.Int.html#5990","idDesc":null,"idIdent":"path","idType":"(a b m n : Nat) (i : I) → (a + n ≡ b + m) ≡ (a + suc n ≡ b + suc m)"},{"idAnchor":"Data.Int.html#22521","idDesc":null,"idIdent":".extendedlambda1","idType":"(a b : Nat) → (diff a b +ℤ negate (diff a b)) ≡ 0"},{"idAnchor":"Data.Int.html#25551","idDesc":null,"idIdent":"lemma","idType":"(a b x y : Nat) →\na * x + b * y + (x * b + y * a) ≡ a * y + b * x + (x * a + y * b)"},{"idAnchor":"Data.Int.html#19704","idDesc":null,"idIdent":"sucℤ","idType":"Int → Int"},{"idAnchor":"Data.Int.html#20661","idDesc":null,"idIdent":"_+ℤ_","idType":"Int → Int → Int"},{"idAnchor":"Data.Int.html#16333","idDesc":null,"idIdent":"Int-elim-prop","idType":"((x : Int) → is-prop (P x)) →\n((a b : Nat) → P (diff a b)) → (x : Int) → P x"},{"idAnchor":"Data.Int.html#21362","idDesc":null,"idIdent":"+ℤ-commutative","idType":"(x y : Int) → (x +ℤ y) ≡ (y +ℤ x)"},{"idAnchor":"Data.Int.html#19794","idDesc":null,"idIdent":"predℤ","idType":"Int → Int"},{"idAnchor":"Data.Int.html#8375","idDesc":null,"idIdent":"canonicalise","idType":"(n : Int) → Canonical n"},{"idAnchor":"Data.Int.html#21274","idDesc":null,"idIdent":"+ℤ-zerol","idType":"(x : Int) → (0 +ℤ x) ≡ x"},{"idAnchor":"Data.Int.html#26666","idDesc":null,"idIdent":"canonicalise-injective","idType":"(x y : Int) →\ncanonicalise x .fst ≡ canonicalise y .fst →\ncanonicalise x .snd .fst ≡ canonicalise y .snd .fst → x ≡ y"},{"idAnchor":"Data.Int.html#11870","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nx ≡ y → suc x ≤ y → (x₁ y₁ : Nat) → x₁ < y₁ → x₁ ≡ y₁ → ⊥"},{"idAnchor":"Data.Int.html#22430","idDesc":null,"idIdent":"+ℤ-inverser","idType":"(x : Int) → (x +ℤ negate x) ≡ 0"},{"idAnchor":"Data.Int.html#19250","idDesc":null,"idIdent":"abs","idType":"Int → Nat"},{"idAnchor":"Data.Int.html#6453","idDesc":null,"idIdent":"encode","idType":"(a b : Nat) (x : Int) → diff a b ≡ x → Code a b x"},{"idAnchor":"Data.Int.html#24108","idDesc":null,"idIdent":".extendedlambda3","idType":"Nat × Nat → Nat × Nat → Int"},{"idAnchor":"Data.Int.html#6785","idDesc":null,"idIdent":"Number-Int","idType":"Number Int"},{"idAnchor":"Data.Int.html#1367","idDesc":null,"idIdent":"zeroes","idType":"(n : Nat) → diff 0 0 ≡ diff n n"},{"idAnchor":"Data.Int.html#5871","idDesc":null,"idIdent":"Code","idType":"Nat → Nat → Int → Type"},{"idAnchor":"Data.Int.html#11725","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nsuc y ≤ x → suc x ≤ y → (x₁ y₁ : Nat) → y₁ < x₁ → x₁ < y₁ → ⊥"},{"idAnchor":"Data.Int.html#4291","idDesc":null,"idIdent":".extendedlambda0","idType":"(a b : Nat) (i j : I) → I → .(IsOne (~ i ∨ ~ j ∨ j)) → Int"},{"idAnchor":"Data.Int.html#18712","idDesc":null,"idIdent":"Int-elim-by-sign","idType":"(P : Int → Type) →\n((x : Nat) → P (diff x 0)) →\n((x : Nat) → P (diff 0 x)) → P (diff 0 0) → (x : Int) → P x"},{"idAnchor":"Data.Int.html#13765","idDesc":null,"idIdent":"Int-rec₂","idType":"(f : Nat × Nat → Nat × Nat → B₁)\n(pl\n : (a b x y : Nat) → f (a , b) (x , y) ≡ f (suc a , suc b) (x , y))\n(pr\n : (a b x y : Nat) →\n   f (a , b) (x , y) ≡ f (a , b) (suc x , suc y)) →\n((a b x y : Nat) →\n Square (pl a b x y) (pr a b x y) (pr (suc a) (suc b) x y)\n (pl a b (suc x) (suc y))) →\nInt → Int → B₁"},{"idAnchor":"Data.Int.html#8296","idDesc":null,"idIdent":"Canonical","idType":"Int → Type"},{"idAnchor":"Data.Int.html#22781","idDesc":null,"idIdent":".extendedlambda2","idType":"(a b : Nat) → (negate (diff a b) +ℤ diff a b) ≡ 0"},{"idAnchor":"Data.Int.html#9771","idDesc":null,"idIdent":"work-respects-quot","idType":"(x y : Nat) →\nPathP (λ i → Canonical (quot x y i)) (work x y)\n(work (suc x) (suc y))"},{"idAnchor":"Data.Int.html#3762","idDesc":null,"idIdent":"quot-diamond","idType":"(a b : Nat) →\nSquare (quot a b) (quot a b) (quot (suc a) (suc b))\n(quot (suc a) (suc b))"},{"idAnchor":"Data.Int.html#8440","idDesc":null,"idIdent":"lemma₁","idType":"(x y : Nat) → x < y → diff 0 (y - x) ≡ diff x y"},{"idAnchor":"Data.Int.html#13292","idDesc":null,"idIdent":"Int-rec","idType":"(f : Nat → Nat → X) →\n((a b : Nat) → f a b ≡ f (suc a) (suc b)) → Int → X"},{"idAnchor":"Data.Int.html#12304","idDesc":null,"idIdent":"go","idType":"(x y : Nat) →\nx ≡ y → suc y ≤ x → (x₁ y₁ : Nat) → x₁ ≡ y₁ → y₁ < x₁ → ⊥"},{"idAnchor":"Cat.Instances.Sets.html#2580","idDesc":null,"idIdent":"equiv→iso","idType":"∣ A ∣ ≃ ∣ B₁ ∣ → (Sets ℓ ≅ A) B₁"},{"idAnchor":"Cat.Instances.Sets.html#1691","idDesc":null,"idIdent":"isc","idType":"(A : Ob (Sets ℓ)) → is-contr (Σ (Sets ℓ ≅ A))"},{"idAnchor":"Cat.Instances.Sets.html#3026","idDesc":null,"idIdent":"q","idType":"is-left-inverse equiv→iso iso→equiv"},{"idAnchor":"Cat.Instances.Sets.html#1614","idDesc":null,"idIdent":"Sets-is-category","idType":"is-category (Sets ℓ)"},{"idAnchor":"Cat.Instances.Sets.html#3229","idDesc":null,"idIdent":"is-category′-Sets","idType":"(A ≡ B₁) ≃ (Sets ℓ ≅ A) B₁"},{"idAnchor":"Cat.Instances.Sets.html#2302","idDesc":null,"idIdent":"A≃B","idType":"(A : Ob (Sets ℓ)) (B₁ : Set ℓ) (isom : (Sets ℓ ≅ A) B₁) →\n∣ A ∣ ≃ ∣ B₁ ∣"},{"idAnchor":"Cat.Instances.Sets.html#2922","idDesc":null,"idIdent":"p","idType":"is-right-inverse equiv→iso iso→equiv"},{"idAnchor":"Cat.Instances.Sets.html#2783","idDesc":null,"idIdent":"equiv≃iso","idType":"(Sets ℓ ≅ A) B₁ ≃ (∣ A ∣ ≃ ∣ B₁ ∣)"},{"idAnchor":"Cat.Instances.Sets.html#1232","idDesc":null,"idIdent":"iso→equiv","idType":"(Sets ℓ ≅ A) B₁ → ∣ A ∣ ≃ ∣ B₁ ∣"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#11092","idDesc":null,"idIdent":"Π₀-preserve-prods","idType":"∣ π₀ (C ×ᶜ D) ∣ ≡ (∣ π₀ C ∣ × ∣ π₀ D ∣)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#7203","idDesc":null,"idIdent":"GlobalSections≅Γ","idType":"(Cat[ Strict-Cat ℓ ℓ , Sets ℓ ] ≅ Γ) GlobalSections"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#3390","idDesc":null,"idIdent":"adj","idType":"Disc ⊣ Γ"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#1805","idDesc":null,"idIdent":"Γ","idType":"Functor (Strict-Cat o h) (Sets o)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#11431","idDesc":null,"idIdent":"f","idType":"∣ π₀ (C ×ᶜ D) ∣ → ∣ π₀ C ∣ × ∣ π₀ D ∣"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#8731","idDesc":null,"idIdent":"π₀","idType":"Precategory o h → Set (o ⊔ h)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#8228","idDesc":null,"idIdent":"f∘g","idType":"(f ∘nt g) ≡ idnt"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#2425","idDesc":null,"idIdent":"lemma","idType":"(f : y ≡ z) (g : x ≡ y) →\nsubst (A .fst .Hom x) (g ∙ f) (A .fst .id) ≡\nA .fst ._∘_ (subst (A .fst .Hom y) f (A .fst .id))\n(subst (A .fst .Hom x) g (A .fst .id))"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#6714","idDesc":null,"idIdent":"GlobalSections","idType":"Functor (Strict-Cat ℓ ℓ) (Sets ℓ)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#8337","idDesc":null,"idIdent":"g∘f","idType":"(g ∘nt f) ≡ idnt"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#7572","idDesc":null,"idIdent":"f","idType":"Γ => GlobalSections"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#10094","idDesc":null,"idIdent":"Π₀⊣Disc","idType":"Π₀ ⊣ Disc"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#5610","idDesc":null,"idIdent":"Γ⊣Codisc","idType":"Γ ⊣ Codisc"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#3817","idDesc":null,"idIdent":"F","idType":"(x : Ob (Strict-Cat ℓ ℓ)) →\nFunctor (Disc′ (x .fst .Ob , x .snd)) (x .fst)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#12407","idDesc":null,"idIdent":"Points→Pieces","idType":"Γ => Π₀"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#11716","idDesc":null,"idIdent":"isom","idType":"is-iso f"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#5134","idDesc":null,"idIdent":"Codisc","idType":"Functor (Sets ℓ) (Strict-Cat ℓ ℓ)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#5659","idDesc":null,"idIdent":"adj","idType":"Γ ⊣ Codisc"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#8138","idDesc":null,"idIdent":"g","idType":"GlobalSections => Γ"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#10140","idDesc":null,"idIdent":"adj","idType":"Π₀ ⊣ Disc"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#12520","idDesc":null,"idIdent":"pieces-have-points","idType":"(y : ∣ ₀ Π₀ x ∣) → ∥ fibre (Points→Pieces .η x) y ∥"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#9107","idDesc":null,"idIdent":"Π₀","idType":"Functor (Strict-Cat o h) (Sets (o ⊔ h))"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#4097","idDesc":null,"idIdent":"nat","idType":"(x y : Ob (Strict-Cat ℓ ℓ)) (f : Hom (Strict-Cat ℓ ℓ) x y) →\nF y F∘ F₁ (Disc F∘ Γ) f ≡ f F∘ F x"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#2153","idDesc":null,"idIdent":"Disc","idType":"Functor (Sets ℓ) (Strict-Cat ℓ ℓ)"},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#2351","idDesc":null,"idIdent":"Disc⊣Γ","idType":"Disc ⊣ Γ"},{"idAnchor":"1Lab.Univalence.SIP.Record.Parse.html#2021","idDesc":null,"idIdent":"parseSpec","idType":"Term → TC (Spec TypedTm)"},{"idAnchor":"1Lab.Univalence.SIP.Record.Parse.html#2203","idDesc":null,"idIdent":".extendedlambda0","idType":"(ℓ ℓ₁ ℓ₁' strTerm homTerm fs : Term) →\nList (InternalField × TypedTm) → Spec TypedTm"},{"idAnchor":"1Lab.Univalence.SIP.Record.Parse.html#354","idDesc":null,"idIdent":"parseFields","idType":"Term → Term → Term → TC (List (InternalField × TypedTm))"},{"idAnchor":"Cat.Reasoning.html#1207","idDesc":null,"idIdent":"introl","idType":"(C : Precategory o ℓ) → a ≡ id C → f ≡ (C ∘ a) f"},{"idAnchor":"Cat.Reasoning.html#4572","idDesc":null,"idIdent":"_⟩∘⟨_","idType":"(C : Precategory o ℓ) → f ≡ h → g ≡ i → (C ∘ f) g ≡ (C ∘ h) i"},{"idAnchor":"Cat.Reasoning.html#4627","idDesc":null,"idIdent":"refl⟩∘⟨_","idType":"(C : Precategory o ℓ) → g ≡ h → (C ∘ f) g ≡ (C ∘ f) h"},{"idAnchor":"Cat.Reasoning.html#3955","idDesc":null,"idIdent":"right-inv-unique","idType":"(C : Precategory o ℓ) (f : (C ≅ y) z) →\n(C ∘ f .to) g ≡ id C → (C ∘ f .to) h ≡ id C → g ≡ h"},{"idAnchor":"Cat.Reasoning.html#789","idDesc":null,"idIdent":"id-comm","idType":"(C : Precategory o ℓ) → (C ∘ f) (id C) ≡ (C ∘ id C) f"},{"idAnchor":"Cat.Reasoning.html#1009","idDesc":null,"idIdent":"eliml","idType":"(C : Precategory o ℓ) → a ≡ id C → (C ∘ a) f ≡ f"},{"idAnchor":"Cat.Reasoning.html#878","idDesc":null,"idIdent":"id-comm-sym","idType":"(C : Precategory o ℓ) → (C ∘ id C) f ≡ (C ∘ f) (id C)"},{"idAnchor":"Cat.Reasoning.html#2184","idDesc":null,"idIdent":"extendr","idType":"(C : Precategory o ℓ) →\n(C ∘ f) h ≡ (C ∘ g) i → (C ∘ (C ∘ a) f) h ≡ (C ∘ (C ∘ a) g) i"},{"idAnchor":"Cat.Reasoning.html#2841","idDesc":null,"idIdent":"insertl","idType":"(C : Precategory o ℓ) → (C ∘ h) i ≡ id C → f ≡ (C ∘ h) ((C ∘ i) f)"},{"idAnchor":"Cat.Reasoning.html#2731","idDesc":null,"idIdent":"cancelr","idType":"(C : Precategory o ℓ) → (C ∘ h) i ≡ id C → (C ∘ (C ∘ f) h) i ≡ f"},{"idAnchor":"Cat.Reasoning.html#1678","idDesc":null,"idIdent":"pullr","idType":"(C : Precategory o ℓ) →\n(C ∘ a) b ≡ c → (C ∘ (C ∘ f) a) b ≡ (C ∘ f) c"},{"idAnchor":"Cat.Reasoning.html#2947","idDesc":null,"idIdent":"cancel-inner","idType":"(C : Precategory o ℓ) →\n(C ∘ h) i ≡ id C → (C ∘ (C ∘ f) h) ((C ∘ i) g) ≡ (C ∘ f) g"},{"idAnchor":"Cat.Reasoning.html#3330","idDesc":null,"idIdent":"left-inv-unique","idType":"(C : Precategory o ℓ) (f : (C ≅ y) z) →\n(C ∘ g) (f .to) ≡ id C → (C ∘ h) (f .to) ≡ id C → g ≡ h"},{"idAnchor":"Cat.Reasoning.html#2361","idDesc":null,"idIdent":"extend-inner","idType":"(C : Precategory o ℓ) →\n(C ∘ f) h ≡ (C ∘ g) i →\n(C ∘ a) ((C ∘ f) ((C ∘ h) b)) ≡ (C ∘ a) ((C ∘ g) ((C ∘ i) b))"},{"idAnchor":"Cat.Reasoning.html#1250","idDesc":null,"idIdent":"intror","idType":"(C : Precategory o ℓ) → a ≡ id C → f ≡ (C ∘ f) a"},{"idAnchor":"Cat.Reasoning.html#2621","idDesc":null,"idIdent":"cancell","idType":"(C : Precategory o ℓ) → (C ∘ h) i ≡ id C → (C ∘ h) ((C ∘ i) f) ≡ f"},{"idAnchor":"Cat.Reasoning.html#4694","idDesc":null,"idIdent":"_⟩∘⟨refl","idType":"(C : Precategory o ℓ) → f ≡ h → (C ∘ f) g ≡ (C ∘ h) g"},{"idAnchor":"Cat.Reasoning.html#3619","idDesc":null,"idIdent":"left-right-inv-unique","idType":"(C : Precategory o ℓ) (f : (C ≅ y) z) →\n(C ∘ g) (f .to) ≡ id C → (C ∘ f .to) h ≡ id C → g ≡ h"},{"idAnchor":"Cat.Reasoning.html#1108","idDesc":null,"idIdent":"elimr","idType":"(C : Precategory o ℓ) → a ≡ id C → (C ∘ f) a ≡ f"},{"idAnchor":"Cat.Reasoning.html#1548","idDesc":null,"idIdent":"pulll","idType":"(C : Precategory o ℓ) →\n(C ∘ a) b ≡ c → (C ∘ a) ((C ∘ b) f) ≡ (C ∘ c) f"},{"idAnchor":"Cat.Reasoning.html#1844","idDesc":null,"idIdent":"pushl","idType":"(C : Precategory o ℓ) →\nc ≡ (C ∘ a) b → (C ∘ c) f ≡ (C ∘ a) ((C ∘ b) f)"},{"idAnchor":"Cat.Reasoning.html#2894","idDesc":null,"idIdent":"insertr","idType":"(C : Precategory o ℓ) → (C ∘ h) i ≡ id C → f ≡ (C ∘ (C ∘ f) h) i"},{"idAnchor":"Cat.Reasoning.html#2007","idDesc":null,"idIdent":"extendl","idType":"(C : Precategory o ℓ) →\n(C ∘ f) h ≡ (C ∘ g) i → (C ∘ f) ((C ∘ h) b) ≡ (C ∘ g) ((C ∘ i) b)"},{"idAnchor":"Cat.Reasoning.html#1908","idDesc":null,"idIdent":"pushr","idType":"(C : Precategory o ℓ) →\nc ≡ (C ∘ a) b → (C ∘ f) c ≡ (C ∘ (C ∘ f) a) b"},{"idAnchor":"Cat.Instances.Shape.Parallel.html#1684","idDesc":null,"idIdent":"par-arrows→par-diagram","idType":"Hom C a b → Hom C a b → Functor ·⇉· C"},{"idAnchor":"Cat.Instances.Shape.Parallel.html#1796","idDesc":null,"idIdent":"funct","idType":"(f g : Hom C a b) → Functor ·⇉· C"},{"idAnchor":"Cat.Instances.Shape.Parallel.html#463","idDesc":null,"idIdent":"precat","idType":"Precategory lzero lzero"},{"idAnchor":"Cat.Instances.Shape.Parallel.html#393","idDesc":null,"idIdent":"·⇉·","idType":"Precategory lzero lzero"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#2310","idDesc":null,"idIdent":"¬is-prop-loops","idType":"(iso-is-prop : is-prop (is-iso f)) → is-prop ((x : S¹) → x ≡ x) → ⊥"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#1913","idDesc":null,"idIdent":"is-prop-loops","idType":"is-prop (is-iso f) → is-prop ((x : A) → x ≡ x)"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#949","idDesc":null,"idIdent":"lemma","idType":"is-prop (is-iso f) → is-iso f → is-iso f ≃ ((x : A) → x ≡ x)"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#2070","idDesc":null,"idIdent":"helper","idType":"(iso-is-prop : is-prop (is-iso f)) →\nis-iso (λ x → x) ≃ ((x : A) → x ≡ x)"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#2478","idDesc":null,"idIdent":"contra","idType":"(iso-is-prop : is-prop (is-iso f)) → ⊥"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#1507","idDesc":null,"idIdent":"helper","idType":"(iso-is-prop : is-prop (is-iso f)) (iiso : is-iso f) →\nIso (is-iso (λ x → x)) ((x : A) → x ≡ x)"},{"idAnchor":"Algebra.Group.Free.html#2623","idDesc":null,"idIdent":"go","idType":"(B₁ : Free-group A → Type ℓ) →\n((x : Free-group A) → is-prop (B₁ x)) →\n((x : A) → B₁ (inc x)) →\n((x y : Free-group A) → B₁ x → B₁ y → B₁ (x ◆ y)) →\n((x : Free-group A) → B₁ x → B₁ (inv x)) →\nB₁ nil → (x : Free-group A) → B₁ x"},{"idAnchor":"Algebra.Group.Free.html#5655","idDesc":null,"idIdent":"Free-universal-maps","idType":"(s : Sets ℓ .Ob) → Universal-morphism s Forget"},{"idAnchor":"Algebra.Group.Free.html#4460","idDesc":null,"idIdent":"go","idType":"(G : Type ℓ) (ggrp : Group-on G) (map₁ : A → G) → Free-group A → G"},{"idAnchor":"Algebra.Group.Free.html#1500","idDesc":null,"idIdent":"f-invl","idType":"(x : Free-group A) → (inv x ◆ x) ≡ nil"},{"idAnchor":"Algebra.Group.Free.html#1814","idDesc":null,"idIdent":"Free-Group","idType":"Type ℓ → Group ℓ"},{"idAnchor":"Algebra.Group.Free.html#6182","idDesc":null,"idIdent":"g","idType":"(S₁ : Sets ℓ .Ob) (other : (S₁ ↙ Forget) .Ob) →\n∣ S₁ ∣ → y other .fst"},{"idAnchor":"Algebra.Group.Free.html#650","idDesc":null,"idIdent":"Free-group","idType":"Type ℓ → Type ℓ"},{"idAnchor":"Algebra.Group.Free.html#6096","idDesc":null,"idIdent":"um","idType":"(S₁ : Sets ℓ .Ob) → Initial (S₁ ↙ Forget)"},{"idAnchor":"Algebra.Group.Free.html#1533","idDesc":null,"idIdent":"f-invr","idType":"(x : Free-group A) → (x ◆ inv x) ≡ nil"},{"idAnchor":"Algebra.Group.Free.html#1452","idDesc":null,"idIdent":"f-assoc","idType":"(x y z : Free-group A) → ((x ◆ y) ◆ z) ≡ (x ◆ (y ◆ z))"},{"idAnchor":"Algebra.Group.Free.html#5752","idDesc":null,"idIdent":"it","idType":"(S₁ : Sets ℓ .Ob) → ↓Obj (const! S₁) Forget"},{"idAnchor":"Algebra.Group.Free.html#7183","idDesc":null,"idIdent":"unique","idType":"(S₁ : Sets ℓ .Ob) (other : (S₁ ↙ Forget) .Ob)\n(x : ↓Hom (const! S₁) Forget (it S₁) other) →\nfactor S₁ other ≡ x"},{"idAnchor":"Algebra.Group.Free.html#7277","idDesc":null,"idIdent":"path","idType":"(S₁ : Sets ℓ .Ob) (other : (S₁ ↙ Forget) .Ob)\n(factoring : ↓Hom (const! S₁) Forget (it S₁) other) →\nfactor S₁ other .β ≡ factoring .β"},{"idAnchor":"Algebra.Group.Free.html#1595","idDesc":null,"idIdent":"squash","idType":"is-set (Free-group A)"},{"idAnchor":"Algebra.Group.Free.html#691","idDesc":null,"idIdent":"inc","idType":"A → Free-group A"},{"idAnchor":"Algebra.Group.Free.html#2224","idDesc":null,"idIdent":"Free-elim-prop","idType":"(B₁ : Free-group A → Type ℓ) →\n((x : Free-group A) → is-prop (B₁ x)) →\n((x : A) → B₁ (inc x)) →\n((x y : Free-group A) → B₁ x → B₁ y → B₁ (x ◆ y)) →\n((x : Free-group A) → B₁ x → B₁ (inv x)) →\nB₁ nil → (x : Free-group A) → B₁ x"},{"idAnchor":"Algebra.Group.Free.html#1566","idDesc":null,"idIdent":"f-idl","idType":"(x : Free-group A) → (nil ◆ x) ≡ x"},{"idAnchor":"Algebra.Group.Free.html#1152","idDesc":null,"idIdent":"nil","idType":"Free-group A"},{"idAnchor":"Algebra.Group.Free.html#1116","idDesc":null,"idIdent":"inv","idType":"Free-group A → Free-group A"},{"idAnchor":"Algebra.Group.Free.html#1065","idDesc":null,"idIdent":"_◆_","idType":"Free-group A → Free-group A → Free-group A"},{"idAnchor":"Algebra.Group.Free.html#3999","idDesc":null,"idIdent":"fold-free-group","idType":"(A → G .fst) → Hom (Free-Group A) G"},{"idAnchor":"Algebra.Group.Free.html#6232","idDesc":null,"idIdent":"factor","idType":"(S₁ : Sets ℓ .Ob) (other : (S₁ ↙ Forget) .Ob) →\n↓Hom (const! S₁) Forget (it S₁) other"},{"idAnchor":"Algebra.Group.Free.html#5097","idDesc":null,"idIdent":"go-hom","idType":"(G : Type ℓ) (ggrp : Group-on G) (map₁ : A → G) →\nGroup-hom\n(Free-group A , r squash nil _◆_ inv f-assoc f-invl f-invr f-idl)\n(G , ggrp) (go G ggrp map₁)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#5628","idDesc":null,"idIdent":".extendedlambda0","idType":"(nt\n : Hom Cat[ ∫ C P ^op , Sets κ ] (slice→total .F₀ x)\n   (slice→total .F₀ y))\n(o : (∫ C P ^op) .Ob) (x : ∣ ₀ (slice→total .F₀ x₁) o ∣) →\nF₁ slice→total (inv nt) .η o x ≡ nt .η o x"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#2687","idDesc":null,"idIdent":"lemma","idType":"(y : Functor (∫ C P ^op) (Sets κ)) (p : F₁ P f s ≡ s′) →\nsubst (λ e → ∣ y .F₀ (elem o′ e) ∣) p (y .F₁ (elem-hom f refl) el)\n≡ y .F₁ (elem-hom f p) el"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#6547","idDesc":null,"idIdent":"lemma′","idType":"(x : Functor (∫ C P ^op) (Sets κ)) (f : Hom (∫ C P ^op) o o′)\n(b : ∣ x .F₀ (elem (o .ob) sect) ∣) (p : sect ≡ o .section) →\nx .F₁ (elem-hom (f .hom) (ap (₁ P (f .hom)) p ∙ f .commute)) b ≡\nx .F₁ f (subst (λ e → ∣ x .F₀ (elem (o .ob) e) ∣) p b)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#4350","idDesc":null,"idIdent":"func","idType":"Functor (Slice Cat[ C ^op , Sets κ ] P) Cat[ ∫ C P ^op , Sets κ ]"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#3765","idDesc":null,"idIdent":".extendedlambda0","idType":"(y : Functor (∫ C P ^op) (Sets κ)) (x : ∣ obj y .domain .F₀ ob ∣) →\nobj y .domain .F₁ ((C ^op) .id) x ≡ id (Sets κ) x"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#7586","idDesc":null,"idIdent":"total→slice","idType":"Functor Cat[ ∫ C P ^op , Sets κ ] (Slice Cat[ C ^op , Sets κ ] P)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#3875","idDesc":null,"idIdent":".extendedlambda1","idType":"(y : Functor (∫ C P ^op) (Sets κ)) (f : (C ^op) .Hom y₁ z)\n(g : (C ^op) .Hom x y₁) (x : ∣ obj y .domain .F₀ x₁ ∣) →\nobj y .domain .F₁ ((C ^op) ._∘_ f g) x ≡\n(Sets κ ∘ obj y .domain .F₁ f) (obj y .domain .F₁ g) x"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#5883","idDesc":null,"idIdent":"slice→total-is-iso","idType":"is-precat-iso slice→total"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#6453","idDesc":null,"idIdent":".extendedlambda0","idType":"(x : Functor (∫ C P ^op) (Sets κ)) (f : (∫ C P ^op) .Hom x₁ y)\n(a\n : ∑ ∣ ₀ (isom .inv x .domain) (x₁ .ob) ∣\n   (λ x₁ → isom .inv x .map .η (x₂ .ob) x₁ ≡ x₂ .section)) →\nPathP\n(λ i →\n   ∣\n   n-ua\n   (Fibre-equiv (λ a₁ → ∣ x .F₀ (elem (y .ob) a₁) ∣) (y .section)) i\n   ∣)\n(F₁ (slice-ob→presheaf (isom .inv x)) f a)\n(F₁ x f\n (isom (λ a₁ → ∣ x .F₀ (elem (x₁ .ob) a₁) ∣) (x₁ .section) .fst a))"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#3454","idDesc":null,"idIdent":"obj","idType":"(y : Functor (∫ C P ^op) (Sets κ)) → /-Obj P"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#5547","idDesc":null,"idIdent":"rinv","idType":"is-right-inverse inv (F₁ slice→total)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#4908","idDesc":null,"idIdent":"slice→total-is-ff","idType":"is-fully-faithful slice→total"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#4237","idDesc":null,"idIdent":"slice→total","idType":"Functor (Slice Cat[ C ^op , Sets κ ] P) Cat[ ∫ C P ^op , Sets κ ]"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#5766","idDesc":null,"idIdent":"linv","idType":"is-left-inverse inv (F₁ slice→total)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#6064","idDesc":null,"idIdent":"isom","idType":"is-iso slice-ob→presheaf"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#3330","idDesc":null,"idIdent":"presheaf→slice-ob","idType":"Functor (∫ C P ^op) (Sets κ) → Ob (Slice Cat[ C ^op , Sets κ ] P)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#7460","idDesc":null,"idIdent":"slice→total-is-equiv","idType":"is-equivalence slice→total"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#2016","idDesc":null,"idIdent":"slice-ob→presheaf","idType":"Ob (Slice Cat[ C ^op , Sets κ ] P) → Functor (∫ C P ^op) (Sets κ)"},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#5034","idDesc":null,"idIdent":"inv","idType":"Hom Cat[ ∫ C P ^op , Sets κ ] (slice→total .F₀ x)\n(slice→total .F₀ y) →\nSlice Cat[ C ^op , Sets κ ] P .Hom x y"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#4556","idDesc":null,"idIdent":".extendedlambda0","idType":"(A B₁ : PSh κ C .Ob) (x : ∣ coprod A B₁ .coapex .F₀ x₁ ∣) →\ncoprod A B₁ .coapex .F₁ ((C ^op) .id) x ≡ id (Sets κ) x"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#3340","idDesc":null,"idIdent":"prod","idType":"(A B₁ : PSh κ C .Ob) → Product (PSh κ C) A B₁"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#4683","idDesc":null,"idIdent":".extendedlambda1","idType":"(A B₁ : PSh κ C .Ob) (f : (C ^op) .Hom y z) (g : (C ^op) .Hom x y)\n(x : ∣ coprod A B₁ .coapex .F₀ x₁ ∣) →\ncoprod A B₁ .coapex .F₁ ((C ^op) ._∘_ f g) x ≡\n(Sets κ ∘ coprod A B₁ .coapex .F₁ f) (coprod A B₁ .coapex .F₁ g) x"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#4294","idDesc":null,"idIdent":"coprod","idType":"(A B₁ : PSh κ C .Ob) → Coproduct (PSh κ C) A B₁"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#1090","idDesc":null,"idIdent":"PSh-pullbacks","idType":"(f : PSh κ C .Hom X Z) (g : PSh κ C .Hom Y Z) →\nPullback (PSh κ C) f g"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#5483","idDesc":null,"idIdent":".extendedlambda3","idType":"(A B₁ : PSh κ C .Ob)\n(other : Hom (PSh κ C) (coprod A B₁ .coapex) Q)\n(p : (PSh κ C ∘ other) (coprod A B₁ .in₀) ≡ inj0)\n(q : (PSh κ C ∘ other) (coprod A B₁ .in₁) ≡ inj1) (a : (C ^op) .Ob)\n(x : ∣ ₀ (coprod A B₁ .coapex) a ∣) →\nother .η a x ≡\ncoprod A B₁ .has-is-coproduct .[_,_] inj0 inj1 .η a x"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#9478","idDesc":null,"idIdent":"cc","idType":"is-cc (PSh κ C) PSh-products"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#7254","idDesc":null,"idIdent":"PSh-closed","idType":"is-cc (PSh κ C) PSh-products"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#3162","idDesc":null,"idIdent":"PSh-products","idType":"(A B₁ : PSh κ C .Ob) → Product (PSh κ C) A B₁"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#5184","idDesc":null,"idIdent":".extendedlambda2","idType":"(A B₁ : PSh κ C .Ob) (f : Hom (PSh κ C) A Q)\n(g : Hom (PSh κ C) B₁ Q) (x y : (C ^op) .Ob) (h : (C ^op) .Hom x y)\n(x₁ : ∣ F₀ (coprod A B₁ .coapex) x ∣) →\nSets κ ._∘_ ([ coprod A B₁ .has-is-coproduct , f ] g .η y)\n(₁ (coprod A B₁ .coapex) h) x₁\n≡\nSets κ ._∘_ (₁ Q h) ([ coprod A B₁ .has-is-coproduct , f ] g .η x)\nx₁"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#8566","idDesc":null,"idIdent":"adj","idType":"(A : PSh κ C .Ob) →\nLeft (×-functor (PSh κ C) PSh-products) A ⊣ func A"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#1795","idDesc":null,"idIdent":"pb","idType":"(f : PSh κ C .Hom X Z) (g : PSh κ C .Hom Y Z) →\nPullback (PSh κ C) f g"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#1391","idDesc":null,"idIdent":"pb-path","idType":"(f : PSh κ C .Hom X Z) (g : PSh κ C .Hom Y Z) →\nx .fst ≡ y .fst → x .snd .fst ≡ y .snd .fst → x ≡ y"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#5570","idDesc":null,"idIdent":"PSh-coequaliser","idType":"(f g : PSh κ C .Hom X Y) → Coequaliser (PSh κ C) f g"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#8062","idDesc":null,"idIdent":"func","idType":"(A : PSh κ C .Ob) → Functor (PSh κ C) (PSh κ C)"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#2119","idDesc":null,"idIdent":"path","idType":"(f : PSh κ C .Hom X Z) (g : PSh κ C .Hom Y Z)\n(h : (C ^op) .Hom x y) (a : ∣ ₀ X x ∣) (b : ∣ ₀ Y x ∣)\n(p : f .η x a ≡ η g x b) →\nf .η y (₁ X h a) ≡ η g y (₁ Y h b)"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#932","idDesc":null,"idIdent":"uniq","idType":"is-terminal (PSh κ C) top"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#7334","idDesc":null,"idIdent":"cat","idType":"Precategory (κ ⊔ lsuc κ) (κ ⊔ κ ⊔ κ)"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#7552","idDesc":null,"idIdent":"F","idType":"(A : PSh κ C .Ob) (B₁ : PSh κ C .Ob) → PSh κ C .Ob"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#5866","idDesc":null,"idIdent":"coequ","idType":"(f g : PSh κ C .Hom X Y) → Coequaliser (PSh κ C) f g"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#678","idDesc":null,"idIdent":"PSh-terminal","idType":"Terminal (PSh κ C)"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#774","idDesc":null,"idIdent":"top","idType":"Functor (C ^op) (Sets κ)"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#7469","idDesc":null,"idIdent":"hom₀","idType":"(A : PSh κ C .Ob) → PSh κ C .Ob → PSh κ C .Ob"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#4104","idDesc":null,"idIdent":"PSh-coproducts","idType":"(A B₁ : PSh κ C .Ob) → Coproduct (PSh κ C) A B₁"},{"idAnchor":"Cat.CartesianClosed.Instances.PSh.html#5804","idDesc":null,"idIdent":"incq","idType":"(f g : PSh κ C .Hom X Y) → ∣ ₀ Y i ∣ → Coeq (f .η i) (g .η i)"},{"idAnchor":"Cat.CartesianClosed.Base.html#1937","idDesc":null,"idIdent":"[_,-]","idType":"(r : is-cc C cartesian) → C .Ob → Functor C C"},{"idAnchor":"Cat.CartesianClosed.Base.html#2768","idDesc":null,"idIdent":"ev","idType":"(cc : is-cc C cart) → C .Hom ((cc ⊗ [ cc , X ] Y) X) Y"},{"idAnchor":"Cat.CartesianClosed.Base.html#2820","idDesc":null,"idIdent":"curry","idType":"(cc : is-cc C cart) →\nC .Hom ((cc ⊗ X) Y) Z → C .Hom X ([ cc , Y ] Z)"},{"idAnchor":"Cat.CartesianClosed.Base.html#2898","idDesc":null,"idIdent":"uncurry","idType":"(cc : is-cc C cart) →\nC .Hom X ([ cc , Y ] Z) → C .Hom ((cc ⊗ X) Y) Z"},{"idAnchor":"Cat.CartesianClosed.Base.html#1666","idDesc":null,"idIdent":"is-cc","idType":"(C : Precategory o ℓ)\n(cartesian : (A B₁ : Ob C) → Product C A B₁) →\nType (o ⊔ ℓ)"},{"idAnchor":"Cat.CartesianClosed.Base.html#1769","idDesc":null,"idIdent":"terminal","idType":"is-cc C cartesian → Terminal C"},{"idAnchor":"Cat.CartesianClosed.Base.html#2111","idDesc":null,"idIdent":"[_,_]","idType":"(r : is-cc C cartesian) → C .Ob → C .Ob → C .Ob"},{"idAnchor":"Cat.CartesianClosed.Base.html#1972","idDesc":null,"idIdent":"tensor⊣hom","idType":"(r : is-cc C cartesian) (A : C .Ob) →\nLeft (×-functor C cartesian) A ⊣ r .[_,-] A"},{"idAnchor":"Cat.CartesianClosed.Base.html#3207","idDesc":null,"idIdent":"uncurry∘curry","idType":"(cc : is-cc C cart) → is-right-inverse (curry cc) (uncurry cc)"},{"idAnchor":"Cat.CartesianClosed.Base.html#3083","idDesc":null,"idIdent":"curry∘uncurry","idType":"(cc : is-cc C cart) → is-left-inverse (curry cc) (uncurry cc)"},{"idAnchor":"Cat.Functor.Conservative.html#2156","idDesc":null,"idIdent":"K-lim","idType":"(conservative : is-conservative F) (L-lim : Limit Dia)\n(preserves : (K : Cone Dia) → Preserves-limit F K) (K : Cone Dia)\n(limits : is-limit (F F∘ Dia) (F-map-cone F K)) →\nLimit (F F∘ Dia)"},{"idAnchor":"Cat.Functor.Conservative.html#1448","idDesc":null,"idIdent":"conservative-reflects-limits","idType":"is-conservative F →\nLimit Dia →\n((K : Cone Dia) → Preserves-limit F K) →\n(K : Cone Dia) → Reflects-limit F K"},{"idAnchor":"Cat.Functor.Conservative.html#2364","idDesc":null,"idIdent":"F-preserves-universal","idType":"(conservative : is-conservative F) (L-lim : Limit Dia)\n(preserves : (K : Cone Dia) → Preserves-limit F K) (K : Cone Dia)\n(limits : is-limit (F F∘ Dia) (F-map-cone F K)) →\nhom (! (F∘L-lim conservative L-lim preserves K limits)) ≡\nF .F₁ (hom (! L-lim))"},{"idAnchor":"Cat.Functor.Conservative.html#573","idDesc":null,"idIdent":"is-conservative","idType":"Functor C D → Type (C.o ⊔ C.h ⊔ D.h)"},{"idAnchor":"Cat.Functor.Conservative.html#1974","idDesc":null,"idIdent":"F∘L-lim","idType":"(conservative : is-conservative F) (L-lim : Limit Dia)\n(preserves : (K : Cone Dia) → Preserves-limit F K) (K : Cone Dia)\n(limits : is-limit (F F∘ Dia) (F-map-cone F K)) →\nLimit (F F∘ Dia)"},{"idAnchor":"Cat.Functor.Kan.html#14205","idDesc":null,"idIdent":"invl","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(ff : is-fully-faithful K) (x : C .Ob) →\nE ._∘_ (cocomplete→lan colim K F .eta .η x) (to colim K F ff x) ≡\nE .id"},{"idAnchor":"Cat.Functor.Kan.html#7933","idDesc":null,"idIdent":"lan-approximate","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nD .Hom d e → Cocone (F F∘ Dom K (const! d))"},{"idAnchor":"Cat.Functor.Kan.html#13768","idDesc":null,"idIdent":"cocone′","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(ff : is-fully-faithful K) (x : C .Ob) →\nCocone (diagram colim K F (F₀ K x))"},{"idAnchor":"Cat.Functor.Kan.html#2941","idDesc":null,"idIdent":"eta","idType":"(r : Lan p F) → F => r .Ext F∘ p"},{"idAnchor":"Cat.Functor.Kan.html#14131","idDesc":null,"idIdent":"to","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(ff : is-fully-faithful K) (x : C .Ob) →\nE .Hom (colim (diagram colim K F (F₀ K x)) .bot .coapex) (₀ F x)"},{"idAnchor":"Cat.Functor.Kan.html#12454","idDesc":null,"idIdent":"cocone′","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(α : F => M F∘ K) (x y : D .Ob) (f : D .Hom x y) →\nCocone (diagram colim K F x)"},{"idAnchor":"Cat.Functor.Kan.html#14591","idDesc":null,"idIdent":"invr","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(ff : is-fully-faithful K) (x : C .Ob) →\nE ._∘_ (to colim K F ff x) (cocomplete→lan colim K F .eta .η x) ≡\nE .id"},{"idAnchor":"Cat.Functor.Kan.html#4548","idDesc":null,"idIdent":"adjoint→lan","idType":"(adj : F ⊣ G) → Lan F Id"},{"idAnchor":"Cat.Functor.Kan.html#8574","idDesc":null,"idIdent":"cocomplete→lan","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nLan K F"},{"idAnchor":"Cat.Functor.Kan.html#3827","idDesc":null,"idIdent":"σ-uniq","idType":"(r : Lan p F) → α ≡ (whiskerl σ′ ∘nt r .eta) → r .σ α ≡ σ′"},{"idAnchor":"Cat.Functor.Kan.html#2918","idDesc":null,"idIdent":"Ext","idType":"Lan p F → Functor C′ D"},{"idAnchor":"Cat.Functor.Kan.html#8345","idDesc":null,"idIdent":"path","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(f : D .Hom d e) (h : (K ↓ const! d) .Hom x y) →\nD ._∘_ (D ._∘_ f (y .map)) (₁ K (h .α)) ≡\nD ._∘_ (D .id) (D ._∘_ f (x .map))"},{"idAnchor":"Cat.Functor.Kan.html#14810","idDesc":null,"idIdent":"inv","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(ff : is-fully-faithful K) →\nis-invertible Cat[ C , E ] (cocomplete→lan colim K F .eta)"},{"idAnchor":"Cat.Functor.Kan.html#11370","idDesc":null,"idIdent":"cocone′","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(α : F => M F∘ K) (x : D .Ob) →\nCocone (diagram colim K F x)"},{"idAnchor":"Cat.Functor.Kan.html#2838","idDesc":null,"idIdent":"Lan","idType":"(p : Functor C C′) (F : Functor C D) →\nType (C.o ⊔ C.ℓ ⊔ C′.o ⊔ C′.ℓ ⊔ D.o ⊔ D.ℓ)"},{"idAnchor":"Cat.Functor.Kan.html#3692","idDesc":null,"idIdent":"σ","idType":"(r : Lan p F) → F => M F∘ p → r .Ext => M"},{"idAnchor":"Cat.Functor.Kan.html#11143","idDesc":null,"idIdent":"lan","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nLan K F"},{"idAnchor":"Cat.Functor.Kan.html#10186","idDesc":null,"idIdent":"path","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E)\n(g : D .Hom e f) (h : D .Hom d e) →\nfunc colim K F .F₁ (D ._∘_ g h) ≡\nE ._∘_ (func colim K F .F₁ g) (func colim K F .F₁ h)"},{"idAnchor":"Cat.Functor.Kan.html#13505","idDesc":null,"idIdent":"ff-lan-ext","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nis-fully-faithful K →\n(Cat[ C , E ] ≅ (cocomplete→lan colim K F .Ext F∘ K)) F"},{"idAnchor":"Cat.Functor.Kan.html#8632","idDesc":null,"idIdent":"diagram","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) →\nFunctor C E → (d : D .Ob) → Functor (K ↘ d) E"},{"idAnchor":"Cat.Functor.Kan.html#8709","idDesc":null,"idIdent":"approx","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nD .Hom d e → Cocone (F F∘ Dom K (const! d))"},{"idAnchor":"Cat.Functor.Kan.html#3748","idDesc":null,"idIdent":"σ-comm","idType":"(r : Lan p F) → (whiskerl (r .σ α) ∘nt r .eta) ≡ α"},{"idAnchor":"Cat.Functor.Kan.html#9646","idDesc":null,"idIdent":"func","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nFunctor D E"},{"idAnchor":"Cat.Functor.Kan.html#9851","idDesc":null,"idIdent":"path","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nfunc colim K F .F₁ (D .id) ≡ E .id"},{"idAnchor":"Cat.Functor.Kan.html#13656","idDesc":null,"idIdent":"inv′","idType":"(colim : is-cocomplete κ κ E) (K : Functor C D) (F : Functor C E) →\nis-fully-faithful K →\n(x : C .Ob) → is-invertible E (cocomplete→lan colim K F .eta .η x)"},{"idAnchor":"1Lab.Counterexamples.IsIso.html#is-iso-is-not-a-proposition","idDesc":"We show that if were a proposition, then (x : A) → x ≡ x would be\ncontractible for any choice of A. Taking A to be , we show that this can\nnot be the case. Suppose that is-iso is a proposition.\n","idIdent":"is-iso is not a proposition\n","idType":null},{"idAnchor":"1Lab.Counterexamples.Russell.html#russells-paradox","idDesc":"This page reproduces Russell’s paradox from naïve set theory using an\ninductive type of -indexed trees. By default, Agda places the type Type₀\nin Type₁, meaning the definition of below would not be accepted. The\n--type-in-type flag disables this check, meaning the definition goes\nthrough.\n","idIdent":"Russell’s Paradox\n","idType":null},{"idAnchor":"1Lab.Counterexamples.Sigma.html#σ-is-not","idDesc":"Defined normally, the image of a function is the subset of given by the\nelements for which there exists an element with . In set theoretical\nnotation: .\n","idIdent":"Σ is not ∃\n","idType":null},{"idAnchor":"1Lab.Equiv.html#equivalences","idDesc":"The big idea of homotopy type theory is that isomorphic types can be\nidentified: the univalence axiom. However, the notion of , is, in a\nsense, not “coherent” enough to be used in the definition. For that, we\nneed a coherent definition of equivalence, where “being an equivalence”\nis a proposition.\n","idIdent":"Equivalences\n","idType":null},{"idAnchor":"1Lab.Equiv.html#is-equiv-is-propositional","idDesc":"A function can be an equivalence in at most one way. This follows from\npropositions being closed under dependent products, and being a\nproposition.\n","idIdent":"Equivalences\n > is-equiv is propositional\n","idType":null},{"idAnchor":"1Lab.Equiv.html#isomorphisms-from-equivalences","idDesc":"For this section, we need a definition of isomorphism. This is the same\nas ever! An isomorphism is a function that has a two-sided inverse. We\nfirst define what it means for a function to invert another on the left\nand on the right:\n","idIdent":"Isomorphisms from equivalences\n","idType":null},{"idAnchor":"1Lab.Equiv.html#equivalences-from-isomorphisms","idDesc":"Any isomorphism can be upgraded into an equivalence, in a way that\npreserves the function , its inverse , and the proof that is a right\ninverse to . We can not preserve everything, though, as is usual when\nmaking something “more coherent”. Furthermore, if everything was\npreserved, would be a proposition, and this is provably not the case.\n","idIdent":"Equivalences from isomorphisms\n","idType":null},{"idAnchor":"1Lab.Equiv.html#equivalence-reasoning","idDesc":"To make composing equivalences more intuitive, we implement operators to\ndo equivalence reasoning in the same style as equational reasoning.\n","idIdent":"Equivalence Reasoning\n","idType":null},{"idAnchor":"1Lab.Equiv.html#propositional-extensionality","idDesc":"The following observation is not very complex, but it is incredibly\nuseful: Equivalence of propositions is the same as biimplication.\n","idIdent":"Propositional Extensionality\n","idType":null},{"idAnchor":"1Lab.Equiv.Biinv.html#bi-invertible-maps","idDesc":"Recall the three conditions that make up the notion of equivalence.\n","idIdent":"Bi-invertible maps\n","idType":null},{"idAnchor":"1Lab.Equiv.Embedding.html#embeddings","idDesc":"One of the most important observations leading to the development of\ncategorical set theory is that injective maps into a set correspond to\nmaps from into a universe of propositions, normally denoted .\nClassically, this object is , but there are other settings in which this\nidea makes sense (elementary topoi) where the subobject classifier is\nnot a coproduct .\n","idIdent":"Embeddings\n","idType":null},{"idAnchor":"1Lab.Equiv.Fibrewise.html#fibrewise-equivalences","idDesc":"In HoTT, a type family P : A → Type can be seen as a fibration with\ntotal space Σ P, with the fibration being the projection . Because of\nthis, a function with type (X : _) → P x → Q x can be referred as a\nfibrewise map.\n","idIdent":"Fibrewise Equivalences\n","idType":null},{"idAnchor":"1Lab.Equiv.FromPath.html#equivs-from-paths","idDesc":"In Cubical Type Theory: a constructive interpretation of the univalence\naxiom, Cohen et. al. give a direct cubical construction of an\nequivalence A ≃ B from a path A ≡ B. This is in contrast with the\nindirect definition, transporting the identity equivalence along the\npath:\n","idIdent":"Equivs from Paths\n","idType":null},{"idAnchor":"1Lab.Equiv.HalfAdjoint.html#adjoint-equivalences","idDesc":"An adjoint equivalence is an isomorphism where the homotopies (, )\nsatisfy the triangle identities, thus witnessing and as adjoint\nfunctors. In Homotopy Type Theory, we can use a half adjoint\nequivalence - satisfying only one of the triangle identities - as a good\nnotion of equivalence.\n","idIdent":"Adjoint Equivalences\n","idType":null},{"idAnchor":"1Lab.HIT.S1.html#the-circle","idDesc":"Since the “intended interpretation” of HoTT is in a -category of “good\nspaces”, it makes sense that HoTT has facilities for describing spaces.\nThese are the higher inductive types, one of which is the circle:\n","idIdent":"The Circle\n","idType":null},{"idAnchor":"1Lab.HIT.S1.html#path-space","idDesc":"A classical result of algebraic topology is that the fundamental group\nof the circle is isomorphic to the group of integers. In Homotopy Type\nTheory, we can repeat this proof: The type of integers codes for paths\nin the circle.\n","idIdent":"The Circle\n > Path Space\n","idType":null},{"idAnchor":"1Lab.HIT.Sinfty.html#the-infinite-sphere","idDesc":"The -sphere can be constructed from the -sphere via suspension. By\nwriting a recursive HIT, we can define a type which is its own\nsuspension. It stands to reason that this definition is a good candidate\nfor being conisdered the infinitary limit of the process of iterated\nsuspension and is thus referred to as the -sphere.\n","idIdent":"The Infinite Sphere\n","idType":null},{"idAnchor":"1Lab.HIT.Sinfty.html#the-book-hott-approach","idDesc":null,"idIdent":"The Infinite Sphere\n > The Book HoTT Approach\n","idType":null},{"idAnchor":"1Lab.HIT.Sinfty.html#the-cubical-approach","idDesc":"The cubical approach essentially acomplishes the same thing as the\nprevious proof, without using any helper lemmas, by way of drawing a\nslightly clever cube. The case of the defenition for the higher\nconstructor requires a square in which two of the sides are merid N and\nmerid x. We start with a square in which both of these sides are merid N\n(specifically merid N (i ∧ j)), and then construct a cube in which one\nof the faces morphs merid N into merid x. This is something that we can\neasilly do since we have a path N ≡ x via the recursive call pathsS∞ x.\n","idIdent":"The Infinite Sphere\n > The Cubical Approach\n","idType":null},{"idAnchor":"1Lab.HIT.Sphere.html#the--1-and-0-spheres","idDesc":"In classical topology, the topological space is typically defined as the\nsubspace of consisting of all points at unit distance from the origin.\nWe see from this definition that the -sphere is the discrete two point\nspace , and that the sphere is the empty subspace . We will recycle\nexisting types and define:\n","idIdent":"The -1 and 0 Spheres\n","idType":null},{"idAnchor":"1Lab.HIT.Sphere.html#n-spheres","idDesc":"The spheres of higher dimension can be defined inductively: , that is,\nsuspending the -sphere constructs the -sphere.\n","idIdent":"n-Spheres\n","idType":null},{"idAnchor":"1Lab.HIT.Suspension.html#suspension","idDesc":"Given a type A, the type Susp A is defined by the property that Susp A\nhas two poles denoted N and S and an A-indexed family of paths N ≡ S.\n","idIdent":"Suspension\n","idType":null},{"idAnchor":"1Lab.HIT.Torus.html#the-torus","idDesc":"In classical topology, the two-dimensional torus may be defined as the\nproduct of circles, i.e., may be defined as . Alternatively, the space\nmay be presented as a CW complex, built by beginning with a point,\nattaching two 1-cells to form the wedge of two circles, and finishing by\nattaching a 2-cell.\n","idIdent":"The Torus\n","idType":null},{"idAnchor":"1Lab.HIT.Truncation.html#propositional-truncation","idDesc":"Let be a type. The propositional truncation of is a type which\nrepresents the proposition “A is inhabited”. In MLTT, propositional\ntruncations can not be constructed without postulates, even in the\npresence of impredicative prop. However, Cubical Agda provides a tool to\ndefine them: higher inductive types.\n","idIdent":"Propositional Truncation\n","idType":null},{"idAnchor":"1Lab.HIT.Truncation.html#maps-into-sets","idDesc":"The elimination principle for says that we can only use the inside in a\nway that doesn’t matter: the motive of elimination must be a family of\npropositions, so our use of must not matter in a very strong sense.\nOften, it’s useful to relax this requirement slightly: Can we map out of\nusing a constant function?\n","idIdent":"Propositional Truncation\n > Maps into Sets\n","idType":null},{"idAnchor":"1Lab.HLevel.html#h-levels","idDesc":"The “homotopy level” (h-level for short) of a type is a measure of how\ntruncated it is, where the numbering is offset by 2. Specifically, a\n(-2)-truncated type is a type of h-level 0. In another sense, h-level\nmeasures how “homotopically interesting” a given type is:\n","idIdent":"h-Levels\n","idType":null},{"idAnchor":"1Lab.HLevel.html#preservation-of-h-levels","idDesc":"If a type is of h-level , then it’s automatically of h-level , for any .\nWe first prove a couple of common cases that deserve their own names:\n","idIdent":"Preservation of h-levels\n","idType":null},{"idAnchor":"1Lab.HLevel.html#is-hlevel-is-a-proposition","idDesc":"Perhaps surprisingly, “being of h-level n” is a proposition, for any n!\nTo get an intuitive feel for why this might be true before we go prove\nit, I’d like to suggest an alternative interpretation of the proposition\nis-hlevel A n: The type A admits unique fillers for any n-cube.\n","idIdent":"is-hlevel is a proposition\n","idType":null},{"idAnchor":"1Lab.HLevel.html#dependent-h-levels","idDesc":"In cubical type theory, it’s natural to consider a notion of dependent\nh-level for a family of types, where, rather than having (e.g.) s for\nany two elements, we have s. Since dependent contractibility doesn’t\nmake a lot of sense, this definition is offset by one to start at the\npropositions.\n","idIdent":"Dependent h-Levels\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#closure-of-h-levels","idDesc":null,"idIdent":"Closure of h-levels\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#retractions","idDesc":"The first base case is to show that retracts of contractible types are\ncontractible. We say that is a retract of if there is a map admitting a\nright-inverse. This means that is the retraction (the left inverse). The\nproof is a calculation:\n","idIdent":"Closure of h-levels\n > Retractions\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#equivalences","idDesc":"It follows, without a use of univalence, that h-levels are closed under\nisomorphisms and equivalences:\n","idIdent":"Closure of h-levels\n > Retractions\n > Equivalences\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#functions-into-n-types","idDesc":"Since h-levels are closed under retracts, The type of functions into a\nhomotopy n-type is itself a homotopy n-type.\n","idIdent":"Closure of h-levels\n > Functions into n-types\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#sums-of-n-types","idDesc":"A similar argument, using the fact that paths of pairs are pairs of\npaths, shows that dependent sums are also closed under h-levels.\n","idIdent":"Closure of h-levels\n > Sums of n-types\n","idType":null},{"idAnchor":"1Lab.HLevel.Retracts.html#automation","idDesc":"For the common case of proving that a composite type built out of pieces\nwith a known h-level has that same h-level, we can apply the helpers\nabove very uniformly. So uniformly, in fact, that Agda’s instance\nresolution mechanism can do it for us. However, since is a recursive\ndefinition which unfolds depending on the level, we must introduce a\nrecord wrapper around this type which prevents recursion. Otherwise we\ncould not expect Agda to find instances in scope.\n","idIdent":"Automation\n","idType":null},{"idAnchor":"1Lab.HLevel.Sets.html#sets","idDesc":"A set, in HoTT, is a type that validates UIP (uniqueness of equality\nproofs): Any two proofs of the same equality are equal. There are many\nways to prove that a type is a set. An equivalence that is well-known in\ntype theory is that UIP is equivalent to Axiom K:\n","idIdent":"Sets\n","idType":null},{"idAnchor":"1Lab.HLevel.Sets.html#rijkes-theorem","idDesc":"Another useful way of showing that a type is a set is Rijke’s\ntheorem.[1] Suppose we have the following setup: R is a relation on the\nelements of A; R x y is always a proposition; R is reflexive, and R x y\nimplies x ≡ y. Then we have that (x ≡ y) ≃ R x y, and by closure of\nh-levels under equivalences, A is a set.\n\n[1] Named after a Twitter mutual of mine :)\n","idIdent":"Sets\n > Rijke’s Theorem\n","idType":null},{"idAnchor":"1Lab.HLevel.Sets.html#hedbergs-theorem","idDesc":"As a consequence of Rijke’s theorem, we get that any type for which we\ncan conclude equality from a double-negated equality is a set:\n","idIdent":"Sets\n > Hedberg’s Theorem\n","idType":null},{"idAnchor":"1Lab.HLevel.Universe.html#universes-of-n-types","idDesc":"A common phenomenon in higher category theory is that the collection of\nall -categories in a given universe assembles into an -category in the\nsuccessor universe :\n","idIdent":"Universes of n-types\n","idType":null},{"idAnchor":"1Lab.HLevel.Universe.html#h-levels-of-equivalences","idDesc":"As warmup, we prove that if and are -types, then so is the type of\nequivalences . For the case where is a successor, this only depends on\nthe h-level of .\n","idIdent":"Universes of n-types\n > h-Levels of Equivalences\n","idType":null},{"idAnchor":"1Lab.HLevel.Universe.html#h-levels-of-paths","idDesc":"Univalence states that the type is equivalent to . Since the latter is\nof h-level when and are -types, then so is the former:\n","idIdent":"Universes of n-types\n > h-Levels of Paths\n","idType":null},{"idAnchor":"1Lab.HLevel.Universe.html#universes","idDesc":"We refer to the dependent sum of the family as n-Type:\n","idIdent":"Universes of n-types\n > Universes\n","idType":null},{"idAnchor":"1Lab.Path.html#the-interval","idDesc":"In HoTT, the inductively-defined identity type gets a new meaning\nexplanation: continuous paths, in a topological sense. The “key idea” of\ncubical type theory — and thus, Cubical Agda — is that we can take this\nas a new definition of the identity type, where we interpret a in a type\nby a function where the domain is the interval type.\n","idIdent":"The Interval\n","idType":null},{"idAnchor":"1Lab.Path.html#raising-dimension","idDesc":"To wit: In cubical type theory, a term in a context with interval\nvariables expresses a way of mapping an -cube into that type. One very\nimportant class of these maps are the -cubes — lines or — which\nrepresent identifications between terms of that type.\n","idIdent":"The Interval\n > Raising Dimension\n","idType":null},{"idAnchor":"1Lab.Path.html#symmetry","idDesc":"The involution ~_ on the interval type gives a way of inverting paths —\na proof that identification is symmetric.\n","idIdent":"The Interval\n > Symmetry\n","idType":null},{"idAnchor":"1Lab.Path.html#paths","idDesc":"While the basic structure of the path type is inherited from its nature\nas functions out of an internal De Morgan algebra, the structure of\nidentifications presented by paths is more complicated. For starters,\nlet’s see how paths correspond to identifications in that they witness\nthe logical principle of “indiscernibility of identicals”.\n","idIdent":"Paths\n","idType":null},{"idAnchor":"1Lab.Path.html#transport","idDesc":"A basic principle of identity is that identicals are indiscernible: if\nand holds, then also holds, for any choice of predicate . In type\ntheory, this is generalised, as can be not only a predicate, but any\ntype family.\n","idIdent":"Paths\n > Transport\n","idType":null},{"idAnchor":"1Lab.Path.html#computation","idDesc":"In “Book HoTT”, is defined using path induction, and it computes\ndefinitionally on . We have already seen that this is not definitional\nin cubical type theory, which might lead you to ask: When does compute?\nThe answer is: By cases on the path. The structure of the path P is what\nguides reduction of . Here are some reductions:\n","idIdent":"Paths\n > Transport\n > Computation\n","idType":null},{"idAnchor":"1Lab.Path.html#path-induction","idDesc":"The path induction principle, also known as “axiom J”, essentially\nbreaks down as the following two statements:\n","idIdent":"Paths\n > Path Induction\n","idType":null},{"idAnchor":"1Lab.Path.html#functorial-action","idDesc":"In HoTT, every function behaves like a functor, in that it has an action\non objects (the actual computational content of the function) and an\naction on morphisms — how that function acts on paths. Reading paths as\nidentity, this is a proof that functions take identical inputs to\nidentical outputs.\n","idIdent":"Paths\n > Functorial Action\n","idType":null},{"idAnchor":"1Lab.Path.html#composition","idDesc":"In “Book HoTT”, the primitive operation from which the\nhigher-dimensional structure of types is derived is the eliminator, with\nas a definitional computation rule. This has the benefit of being very\nelegant: This one elimination rule generates an infinite amount of\ncoherent data. However, it’s very hard to make compute in the presence\nof higher inductive types and univalence, so much so that, in the book,\nunivalence and HITs only compute up to paths.\n","idIdent":"Composition\n","idType":null},{"idAnchor":"1Lab.Path.html#partial-elements","idDesc":"The definition of Kan cubical sets as those having fillers for all open\nboxes is all well and good, but to use this from within type theory we\nneed a way of reflecting the idea of “open box” as syntax. This is done\nis by using the type former.\n","idIdent":"Composition\n > Partial Elements\n","idType":null},{"idAnchor":"1Lab.Path.html#extensibility","idDesc":"A partial element in a context with -variables gives us a way of mapping\nsome subobject of the -cube into a type. A natural question to ask,\nthen, is: Given a partial element of , can we extend that to a\nhonest-to-god element of , which agrees with where it is defined?\n","idIdent":"Composition\n > Extensibility\n","idType":null},{"idAnchor":"1Lab.Path.html#uniqueness","idDesc":"A common characteristic of geometric interpretations of higher\ncategories — like the one we have here — when compared to algebraic\ndefinitions is that there is no prescription in general for how to find\ncomposites of morphisms. Instead, we have that each triple of morphism\nhas a contractible space of composites. We call the proof of this fact :\n","idIdent":"Composition\n > Uniqueness\n","idType":null},{"idAnchor":"1Lab.Path.html#syntax-sugar","idDesc":"When constructing long chains of identifications, it’s rather helpful to\nbe able to visualise what is being identified with more “priority” than\nhow it is being identified. For this, a handful of combinators with\nweird names are defined:\n","idIdent":"Composition\n > Syntax Sugar\n","idType":null},{"idAnchor":"1Lab.Path.html#dependent-paths","idDesc":"Surprisingly often, we want to compare inhabitants and where the types\nand are not definitionally equal, but only identified in some specified\nway. We call these “paths over ppaths”, or for short. In the same way\nthat a can be understood as a function I → A with specified endpoints, a\n(path over path) can be understood as a dependent function\n(i : I) → A i.\n","idIdent":"Dependent Paths\n","idType":null},{"idAnchor":"1Lab.Path.html#coercion","idDesc":"In Cubical Agda, the interval is given the structure of a De Morgan\nalgebra. This is not the only choice of structure on the interval that\ngives a model of univalent type theory: We could also subject the\ninterval to no additional structure other than what comes from the\nstructural rules of type theory (introducing variables, ignoring\nvariables, swapping variables, etc). This is a different cubical type\ntheory, called Cartesian cubical type theory.\n","idIdent":"Dependent Paths\n > Coercion\n","idType":null},{"idAnchor":"1Lab.Path.html#path-spaces","idDesc":"A large part of the study of HoTT is the characterisation of path\nspaces. Given a type A, what does Path A x y look like? Hedberg’s\ntheorem says that for types with decidable equality, it’s boring. For\nthe circle, we can prove its loop space is the integers — we have\nPath S¹ base base ≡ Int.\n","idIdent":"Path Spaces\n","idType":null},{"idAnchor":"1Lab.Path.html#σ-types","idDesc":"For types, a path between (a , b) ≡ (x , y) consists of a path\np : a ≡ x, and a path between b and y laying over p.\n","idIdent":"Path Spaces\n > Σ Types\n","idType":null},{"idAnchor":"1Lab.Path.html#π-types","idDesc":"For dependent functions, the paths are homotopies, in the topological\nsense: Path ((x : A) → B x) f g is the same thing as a function\nI → (x : A) → B x — which we could turn into a product if we really\nwanted to.\n","idIdent":"Path Spaces\n > Π types\n","idType":null},{"idAnchor":"1Lab.Path.html#paths-1","idDesc":"The groupoid structure of paths is also interesting. While the\ncharacterisation of Path (Path A x y) p q is fundamentally tied to the\ncharacterisation of A, there are general theorems that can be proven\nabout transport in path spaces. For example, substituting on both\nendpoints of a path is equivalent to a ternary composition:\n","idIdent":"Path Spaces\n > Paths\n","idType":null},{"idAnchor":"1Lab.Path.Groupoid.html#types-are-groupoids","idDesc":"The Path types equip every with the structure of an -groupoid. The\nhigher structure of a type begins with its inhabitants (the 0-cells);\nThen, there are the paths between inhabitants - these are inhabitants of\nthe type Path A x y, which are the 1-cells in A. Then, we can consider\nthe inhabitants of Path (Path A x y) p q, which are homotopies between\npaths.\n","idIdent":"Types are Groupoids\n","idType":null},{"idAnchor":"1Lab.Path.Groupoid.html#book-style","idDesc":"This is the approach taken in the HoTT book. We fix a type, and some\nvariables of that type, and some paths between variables of that type,\nso that each definition doesn’t start with 12 parameters.\n","idIdent":"Types are Groupoids\n > Book-style\n","idType":null},{"idAnchor":"1Lab.Path.Groupoid.html#cubically","idDesc":"Now we do the same using hfill instead of path induction.\n","idIdent":"Types are Groupoids\n > Cubically\n","idType":null},{"idAnchor":"1Lab.Path.Groupoid.html#convenient-helpers","idDesc":"Since a lot of Homotopy Type Theory is dealing with paths, this section\nintroduces useful helpers for dealing with -ary compositions. For\ninstance, we know that is , but this involves more than a handful of\nintermediate steps:\n","idIdent":"Types are Groupoids\n > Cubically\n > Convenient helpers\n","idType":null},{"idAnchor":"1Lab.Path.Groupoid.html#groupoid-structure-of-types-cont.","idDesc":"A useful fact is that if is a homotopy f ~ id, then we can “invert” it\nas such:\n","idIdent":"Groupoid structure of types (cont.)\n","idType":null},{"idAnchor":"1Lab.Type.html#universes","idDesc":"A universe is a type whose inhabitants are types. In Agda, there is a\nfamily of universes, which, by default, is called Set. Rather recently,\nAgda gained a flag to make Set not act like a keyword, and allow\nrenaming it in an import declaration from the Agda.Primitive module.\n","idIdent":"Universes\n","idType":null},{"idAnchor":"1Lab.Type.html#built-in-types","idDesc":"Agda comes with built-in definitions for a bunch of types:\n","idIdent":"Universes\n > Built-in Types\n","idType":null},{"idAnchor":"1Lab.Type.html#lifting","idDesc":"There is a function which lifts a type to a higher universe:\n","idIdent":"Universes\n > Lifting\n","idType":null},{"idAnchor":"1Lab.Type.html#function-composition","idDesc":"Since the following definitions are fundamental, they deserve a place in\nthis module:\n","idIdent":"Universes\n > Function composition\n","idType":null},{"idAnchor":"1Lab.Type.Dec.html#decidable-types","idDesc":"A type is decidable if it’s computable whether or not that type is\ninhabited.\n","idIdent":"Decidable types\n","idType":null},{"idAnchor":"1Lab.Type.Pi.html#properties-of-π-types","idDesc":"This module contains properties of dependent function types, not\nnecessarily organised in any way.\n","idIdent":"Properties of Π types\n","idType":null},{"idAnchor":"1Lab.Type.Pi.html#closure-under-equivalences","idDesc":"Univalence automatically implies that every type former respects\nequivalences. However, this theorem is limited to equivalences between\ntypes in the same universe. Thus, there are functions to perturb the\ncodomain of a dependent function by an equivalence across universe\nlevels:\n","idIdent":"Properties of Π types\n > Closure under equivalences\n","idType":null},{"idAnchor":"1Lab.Type.Pi.html#dependent-funext","idDesc":"When the domain and codomain are simple types (rather than a higher\nshape), paths in function spaces are characterised by . We can\ngeneralise this to funext-dep, in which the domain and codomain are\nallowed to be lines of types:\n","idIdent":"Properties of Π types\n > Dependent Funext\n","idType":null},{"idAnchor":"1Lab.Type.Prop.html#the-impredicative-universe-of-propositions","idDesc":"One result that Cubical Agda does not let us conclude, which is handy in\nthe development of topos theory (and locale theory by extension), is\nthat universes of propositions are closed under arbitrary\nquantification: If is a family of propositions at level , but , then —\neven though that dependent product has at most one element, and so can\nnot be a very large type at all.\n","idIdent":"The (impredicative) universe of propositions\n","idType":null},{"idAnchor":"1Lab.Type.Sigma.html#properties-of-σ-types","idDesc":"This module contains properties of types, not necessarily organised in\nany way.\n","idIdent":"Properties of Σ types\n","idType":null},{"idAnchor":"1Lab.Type.Sigma.html#groupoid-structure","idDesc":"The first thing we prove is that paths in sigmas are sigmas of paths.\nThe type signatures make it clearer:\n","idIdent":"Properties of Σ types\n > Groupoid structure\n","idType":null},{"idAnchor":"1Lab.Type.Sigma.html#closure-under-equivalences","idDesc":"Univalence automatically implies that every type former respects\nequivalences. However, this theorem is limited to equivalences between\ntypes in the same universe. Thus, we provide , , and , which allows one\nto perturb a by equivalences across levels:\n","idIdent":"Properties of Σ types\n > Closure under equivalences\n","idType":null},{"idAnchor":"1Lab.Type.Sigma.html#paths-in-subtypes","idDesc":"When P is a family of propositions, it is sound to regard\nΣ[ x ∈ A ] (P x) as a subtype of A. This is because identification in\nthe subtype is characterised uniquely by identification of the first\nprojections:\n","idIdent":"Properties of Σ types\n > Paths in subtypes\n","idType":null},{"idAnchor":"1Lab.Type.Sigma.html#dependent-sums-of-contractibles","idDesc":"If B is a family of contractible types, then Σ B ≃ A:\n","idIdent":"Properties of Σ types\n > Dependent sums of contractibles\n","idType":null},{"idAnchor":"1Lab.Univalence.html#univalence","idDesc":"In Homotopy Type Theory, univalence is the principle stating that\nequivalent types can be identified. When the book first came out, there\nwas no widely-accepted computational interpretation of this principle,\nso it was added to the theory as an axiom: the univalence axiom.\n","idIdent":"Univalence\n","idType":null},{"idAnchor":"1Lab.Univalence.html#glue","idDesc":"To even state univalence, we first have to make sure that the concept of\n“paths between types” makes sense in the first place. In “Book HoTT”,\npaths between types are a well-formed concept because the path type is\nuniformly inductively defined for everything — including universes. This\nis not the case in Cubical type theory, where for paths in to be\nwell-behaved, must be fibrant.\n","idIdent":"Univalence\n > Glue\n","idType":null},{"idAnchor":"1Lab.Univalence.html#paths-from-glue","idDesc":"Since generalises by allowing a partial equivalence as its “tube”,\nrather than a partial path, it allows us to turn any equivalence into a\npath, using a sort of “trick”: We consider the line with endpoints and\nas an open cube to be filled. A filler for this line is exactly a path .\nSince fills open boxes of types using equivalences, this path exists!\n","idIdent":"Univalence\n > Paths from Glue\n","idType":null},{"idAnchor":"1Lab.Univalence.html#paths-over-ua","idDesc":"The introduction and elimination forms for can be specialised to the\ncase of , leading to the definitions of and below. Their types are\nwritten in terms of interval variables and extensions, rather than using\nPaths, because these typings make the structure of more explicit.\n","idIdent":"Univalence\n > Paths over ua\n","idType":null},{"idAnchor":"1Lab.Univalence.html#the-axiom","idDesc":"The actual “univalence axiom”, as stated in the HoTT book, says that the\ncanonical map A ≡ B, defined using , is an equivalence. This map is ,\ndefined right above. In more intuitive terms, it’s “casting” the\nidentity equivalence A ≃ A along a proof that A ≡ B to get an\nequivalence A ≃ B.\n","idIdent":"The “axiom”\n","idType":null},{"idAnchor":"1Lab.Univalence.html#equivalence-induction","idDesc":"One useful consequence of [1] is that the type of equivalences satisfies\nthe same induction principle as the type of identifications. By analogy\nwith how path induction can be characterised as contractibility of\nsingletons and transport, “equivalence induction” can be characterised\nas transport and contractibility of singletons up to equivalence:\n\n[1] Not the fundamental theorem of engineering!\n","idIdent":"The “axiom”\n > Equivalence Induction\n","idType":null},{"idAnchor":"1Lab.Univalence.html#object-classifiers","idDesc":"In category theory, the idea of classifiers (or classifying objects)\noften comes up when categories applied to the study of logic. For\nexample, any elementary topos has a subobject classifier: an object such\nthat maps corresponds to maps with propositional fibres (equivalently,\ninclusions ). In higher categorical analyses of logic, classifying\nobjects exist for more maps: an elementary 2-topos has a discrete object\nclassifier, which classify maps with discrete fibres.\n","idIdent":"The “axiom”\n > Object Classifiers\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#structure-identity-principle","idDesc":"In mathematics in general, it’s often notationally helpful to identify\nisomorphic structures (e.g.: groups) in a proof. However, when this\nmathematics is done using material set theory as a foundations, this\nidentification is merely a shorthand — nothing prevents you from\ndistinguishing isomorphic groups in ZFC by, for instance, asking about\nmembership of a particular set in the underlying set of each group.\n","idIdent":"Structure Identity Principle\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#the-principle","idDesc":"The structure identity principle says that, if S is a , then the path\nspace of Σ S is equivalent to the space of S-homomorphic equivalences of\ntypes. Again using groups as a grounding example: identification of\ngroups is group isomorphism.\n","idIdent":"Structure Identity Principle\n > The principle\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#structure-combinators","idDesc":"Univalent structures can be built up in an algebraic manner through the\nuse of structure combinators. These express closure of structures under\na number of type formers. For instance, if S and T are univalent\nstructures, then so is λ X → S X → T X.\n","idIdent":"Structure Combinators\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#example-infty-magmas","idDesc":"We provide an example of applying the SIP, and the structure\ncombinators: -magmas. Recall that a magma is a Set equipped with a\nbinary operation, with no further conditions imposed. In HoTT, we can\nrelax this even further: An -magma is a  - that is, an -groupoid -\nequipped with a binary operation.\n","idIdent":"Structure Combinators\n > Example: -magmas\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#transport-structures","idDesc":"As an alternative to equipping a type family S : Type → Type with a\nnotion of S-homomorphism, we can equip it with a notion of action.\nEquipping a structure with a notion of action canonically equips it with\na notion of homomorphism:\n","idIdent":"Transport Structures\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#adding-axioms","idDesc":"Most mathematical objects of interest aren’t merely sets with structure.\nMore often, the objects we’re interested in have stuff (the underlying\ntype), structure (such as a SNS), and properties - for instance,\nequations imposed on the structure. A concrete example may help:\n","idIdent":"Adding Axioms\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#a-language-for-structures","idDesc":"The structure combinators can be abstracted away into a language for\ndefining structures. A describes a structure, that may be interpreted\ninto a family of types, and defines both transport and univalent\nstructures.\n","idIdent":"A Language for Structures\n","idType":null},{"idAnchor":"1Lab.Univalence.SIP.html#descriptions-of-structures","idDesc":"To make convenient descriptions of structures-with-axioms, we introduce\na record type, , which packages together the structure term and the\nproperties that are imposed:\n","idIdent":"A Language for Structures\n > Descriptions of Structures\n","idType":null},{"idAnchor":"1Lab.intro.html#introduction","idDesc":"This page aims to present a first introduction to cubical type theory,\nfrom the perspective of a mathematician who has heard about type theory\nbut has no previous familiarity with it. Specifically, the kind of\nmathematician that we are appealing to is one who is familiar with some\nof the ideas in category theory and homotopy theory — however, the text\nalso presents the concepts syntactically, in a way that can be read\nwithout any prior mathematical knowledge.\n","idIdent":"Introduction\n","idType":null},{"idAnchor":"1Lab.intro.html#type-theory","idDesc":null,"idIdent":"Type theory\n","idType":null},{"idAnchor":"1Lab.intro.html#functions","idDesc":"If we have two previously-constructed types and , we can form the type\nof functions from to , written . Often, functions will also be referred\nto as maps. A function is, intuitively, a rule prescribing how to obtain\nan inhabitant of given an inhabitant of . In type theory, this is not\nonly an intuition, but rather a definition. This is in contrast with set\ntheory, where functions are defined to be relations satisfying a certain\nproperty.\n","idIdent":"Functions\n","idType":null},{"idAnchor":"1Lab.intro.html#universes","idDesc":"Instead of jumping right into the syntactic definition (and motivation)\nfor universes, I’m going to take a longer route, through topos theory\nand eventually higher topos theory, which gives a meaning explanation\nfor the idea of universes by generalising from a commonly-understood\nidea: the correspondence between predicates and subsets. Initially, we\nwork entirely in the category of sets, assuming excluded middle for\nsimplicity. Then we pass to an arbitrary elementary topos, and finally\nto an arbitrary higher topos. If you don’t want to read about\ncategories, click here\n","idIdent":"Universes\n","idType":null},{"idAnchor":"1Lab.intro.html#universes-internally","idDesc":"Inside type theory, object classifiers present themselves as types which\ncontain types, which we call universes. Every type is contained in some\nuniverse, but it is not the case that there is a universe containing all\ntypes; In fact, if we did have some magical universe , we could\nreproduce Russell’s paradox, as is done here.\n","idIdent":"Universes\n > Universes, internally\n","idType":null},{"idAnchor":"1Lab.intro.html#universes-and-size-issues","idDesc":"Perhaps one of the most famous paradoxes in the history of formal logic,\nRussell’s paradox reminds us that, for most reasonable kinds of\n“collection” — be they sets, types, or categories — considering the\ncollection of all collections that do not contain themselves is a road\nthat leads to madness. The standard way of getting around these issues,\nat least in set-theoretic foundations as applied to category theory, is\nto refer to such problematic collections as “classes”, and to only\naxiomatise the sets which are not too big.\n","idIdent":"Universes\n > Universes and size issues\n","idType":null},{"idAnchor":"1Lab.intro.html#interlude-basics-of-paths","idDesc":"Since the treatment of paths is the most important aspect of homotopy\ntype theory, rest assured that we’ll talk about it in more detail later.\nHowever, before discussing the dependent sum of a type family, we must\ndiscuss the fundamentals of paths, so that the categorical/homotopical\nconnections can be made clear. Before we even get started, though, there\nis something that needs to be made very clear:\n","idIdent":"Interlude: Basics of Paths\n","idType":null},{"idAnchor":"1Lab.intro.html#sums","idDesc":"Recall that in the construction of a map into from a predicate , we\ninterpreted as a family of sets with at most one element, and then took\nthe disjoint union of that family, written , which admits a projection\nonto . That was actually a sneaky introduction of the dependent sum type\nformer, ! Indeed, the short discussion there also made some mention of\nthe introduction rule, but let’s reiterate with more clarity here.\n","idIdent":"Sums\n","idType":null},{"idAnchor":"1Lab.intro.html#dependent-products","idDesc":"Imagine that we have two types, and . For simplicity, they live in the\nsame universe, which can be any universe of our choice. We know that we\ncan consider to be a constant type family taking indices in : .\nFurthermore, we know that the total space of this family is the product\ntype , and that it comes equipped with a projection map .\n","idIdent":"Dependent products\n","idType":null},{"idAnchor":"1Lab.intro.html#what-next","idDesc":"While the text above was meant to serve as a linearly-structured\nintroduction to the field of homotopy type theory, the rest of the 1Lab\nis not organised like this. It’s meant to be an explorable presentation\nof HoTT, where concepts can be accessed in any order, and everything is\nhyperlinked together. However, we can highlight the following modules as\nbeing the “spine” of the development, since everything depends on them,\nand they’re roughly linearly ordered.\\\n","idIdent":"What next?\n","idType":null},{"idAnchor":"1Lab.intro.html#paths-in-detail","idDesc":null,"idIdent":"What next?\n > Paths, in detail\n","idType":null},{"idAnchor":"1Lab.intro.html#equivalences","idDesc":"The idea of subsingleton type, mentioned in passing in the discussion\nabout universes and expanded upon in the section on dependent products,\ngeneralises to give the notion of h-level, which measures how much\ninteresting homotopical information a type has. A h-level that comes up\nvery often is the level of sets, since these are the types where\nequality behaves like a logical proposition. Due to their importance, we\nprovide a module defining equivalent characterisations of sets.\n","idIdent":"What next?\n > Equivalences\n","idType":null},{"idAnchor":"1Lab.intro.html#univalence","idDesc":null,"idIdent":"What next?\n > Univalence\n","idType":null},{"idAnchor":"Algebra.Group.html#groups","idDesc":"A group is a monoid that has inverses for every element. The inverse for\nan element is necessarily, unique; Thus, to say that “ is a group” is a\nstatement about having a certain property (namely, being a group), not\nstructure on .\n","idIdent":"Groups\n","idType":null},{"idAnchor":"Algebra.Group.html#is-group-is-propositional","idDesc":"Showing that takes values in propositions is straightforward, but\ntedious. Suppose that are both witnesses of for the same operator; We’ll\nbuild a path .\n","idIdent":"Groups\n > is-group is propositional\n","idType":null},{"idAnchor":"Algebra.Group.html#group-homomorphisms","idDesc":"In contrast with monoid homomorphisms, for group homomorphisms, it is\nnot necessary for the underlying map to explicitly preserve the unit\n(and the inverses); It is sufficient for the map to preserve the\nmultiplication.\n","idIdent":"Group Homomorphisms\n","idType":null},{"idAnchor":"Algebra.Group.html#making-groups","idDesc":"Since the interface of is very deeply nested, we introduce a helper\nfunction for arranging the data of a group into a record.\n","idIdent":"Group Homomorphisms\n > Making groups\n","idType":null},{"idAnchor":"Algebra.Group.html#symmetric-groups","idDesc":"If is a set, then the type of all bijections is also a set, and it forms\nthe carrier for a group: The symmetric group on .\n","idIdent":"Symmetric Groups\n","idType":null},{"idAnchor":"Algebra.Group.Ab.html#abelian-groups","idDesc":"A very important class of groups (which includes most familiar examples\nof groups: the integers, all finite cyclic groups, etc) are those with a\ncommutative group operation, that is, those for which . Accordingly,\nthese have a name reflecting their importance and ubiquity: They are\ncalled commutative groups. Just kidding! They’re named abelian groups,\nnamed after some dude, because nothing can have instructive names in\nmathematics. It’s the law.\n","idIdent":"Abelian groups\n","idType":null},{"idAnchor":"Algebra.Group.Ab.html#the-tensor-product","idDesc":"We extend the category defined above to a monoidal category by equipping\nit with the tensor product of abelian groups. Note that this is not the\nonly notion of “product” in ; There is also the “direct (bi)product” of\nabelian groups. The tensor product has primacy because it defines a left\nadjoint to the internal functor — that is, homs correspond to bilinear\nmaps : functions which are “separately group homomorphisms in each\nvariable”. By adjointness, these are the same as group homomorphisms .\n","idIdent":"The tensor product\n","idType":null},{"idAnchor":"Algebra.Group.Ab.Free.html#free-abelian-groups","idDesc":null,"idIdent":"Free Abelian Groups\n","idType":null},{"idAnchor":"Algebra.Group.Ab.Free.html#universal-property","idDesc":"This finishes the construction of an abelian group from a group. To show\nthat this construction is correct, we’ll show that it satisfies a\nuniversal property: The map , which we write as being from , is a group\nhomomorphism, and furthermore, it provides a universal way of mapping\nfrom to an abelian group, in that if is an abelian group, then a map\nfactors through in a unique way.\n","idIdent":"Free Abelian Groups\n > Universal property\n","idType":null},{"idAnchor":"Algebra.Group.Ab.Sum.html#direct-sum-of-abelian-groups","idDesc":"Let be two abelian groups; We construct their coproduct in the category\nof abelian groups by equipping the set with the “pointwise” group\nstructure. While this might seem like an odd way of constructing a\ncoproduct — after all, is literally a product — remember that in\n-categories (like itself, in this case), finite products and coproducts\ncoincide.\n","idIdent":"Direct sum of abelian groups\n","idType":null},{"idAnchor":"Algebra.Group.Action.html#group-actions","idDesc":"A useful way to think about groups is to think of their elements as\nencoding “symmetries” of a particular object. For a concrete example,\nconsider the group of real numbers under addition, and consider the unit\ncircle[1] sitting in . Given a real number , we can consider the\n“action” on the circle defined by\n\n[1] this is not the higher inductive type , but rather the usual\ndefinition of the circle as a subset of .\n","idIdent":"Group actions\n","idType":null},{"idAnchor":"Algebra.Group.Action.html#automorphism-groups","idDesc":"The answer is that, for an object of some category , the collection of\nall isomorphisms forms a group under composition, generalising the\nconstruction of to objects beyond sets! We give refer to a\n“self-isomorphism” as an automorphism, and denote their group by .\n","idIdent":"Group actions\n > Automorphism groups\n","idType":null},{"idAnchor":"Algebra.Group.Action.html#as-functors","idDesc":"Recall that we defined the delooping of a monoid into a category as the\ncategory with a single object , and . If we instead deloop a group into\na group , then functors correspond precisely to actions of on the object\n!\n","idIdent":"As functors\n","idType":null},{"idAnchor":"Algebra.Group.Cat.Base.html#the-category-of-groups","idDesc":"The category of groups, as the name implies, has its objects the , with\nthe morphisms between them the .\n","idIdent":"The category of Groups\n","idType":null},{"idAnchor":"Algebra.Group.Cat.Base.html#the-underlying-set","idDesc":"The category of groups admits a functor into the category of sets,\nwritten , which projects out the underlying set of the group.\nFaithfulness of this functor says, in more specific words, that equality\nof group homomorphisms can be tested by comparing the underlying\nmorphisms of sets.\n","idIdent":"The category of Groups\n > The underlying set\n","idType":null},{"idAnchor":"Algebra.Group.Cat.Base.html#univalence","idDesc":"The structure identity principle already implies that identification of\ngroups is equivalent to isomorphism of groups. We now extend this to\nproving that the category of groups is univalent, but first we take a\ndetour by showing that isomorphisms in the category of groups are the\nsame thing as homomorphic equivalences of the groups’ underlying types.\n","idIdent":"The category of Groups\n > Univalence\n","idType":null},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#finite-limits-of-groups","idDesc":"We present explicit computations of finite limits in the category of\ngroups, though do note that the terminal group is also initial (i.e. it\nis a zero object). Knowing that the category of groups admits a right\nadjoint functor into the category of sets (the underlying set functor)\ndrives us in computing limits of groups as limits of sets, and equipping\nthose with a group structure: we are forced to do this since right\nadjoints preserve limits.\n","idIdent":"Finite limits of groups\n","idType":null},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#the-zero-group","idDesc":null,"idIdent":"Finite limits of groups\n > The zero group\n","idType":null},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#direct-products","idDesc":null,"idIdent":"Finite limits of groups\n > Direct products\n","idType":null},{"idAnchor":"Algebra.Group.Cat.FinitelyComplete.html#equalisers","idDesc":null,"idIdent":"Finite limits of groups\n > Equalisers\n","idType":null},{"idAnchor":"Algebra.Group.Cat.Monadic.html#monadicity-of-the-category-of-groups","idDesc":"We prove that the category is monadic over , or more specifically that\nthe free group adjunction is monadic. Rather than appealing to a\nmonadicity theorem, we show this directly by calculation. This actually\ngives us a slightly sharper result, too: rather than showing that the\ncomparison functor is an equivalence, we show directly that it is an\nisomorphism of categories. This doesn’t exactly matter since and are\nboth univalent categories, but it’s interesting that it’s easier to\nconstruct an isomorphism than it is to construct an equivalence.\n","idIdent":"Monadicity of the category of groups\n","idType":null},{"idAnchor":"Algebra.Group.Cayley.html#cayleys-theorem","idDesc":"Cayley’s theorem says that any group admits a representation as a\nsubgroup of a symmetric group, specifically the symmetric group acting\non the underlying set of .\n","idIdent":"Cayley’s Theorem\n","idType":null},{"idAnchor":"Algebra.Group.Free.html#free-groups","idDesc":"We give a direct, higher-inductive constructor of the free group on a\ntype of generators. While we allow the parameter to be any type, these\nare best behaved in the case where is a set; In this case, satisfies the\nexpected universal property.\n","idIdent":"Free Groups\n","idType":null},{"idAnchor":"Algebra.Group.Free.html#universal-property","idDesc":"We now prove the universal property of , or, more specifically, of the\nmap : It gives a universal way of mapping from the category of sets to\nan object in the category of groups, in that any map from a set to (the\nunderlying set of) a group factors uniquely through . To establish this\nresult, we first implement a helper function, , which, given the data of\nwhere to send the generators of a free group, determines a group\nhomomorphism.\n","idIdent":"Free Groups\n > Universal Property\n","idType":null},{"idAnchor":"Algebra.Group.Homotopy.html#homotopy-groups","idDesc":"Given a we refer to the type as the loop space of , and refer to it in\nshort as . Since we always have , is itself a pointed type, the\nconstruction can be iterated, a process which we denote .\n","idIdent":"Homotopy Groups\n","idType":null},{"idAnchor":"Algebra.Group.Homotopy.html#deloopings","idDesc":"A natural question to ask, given that all pointed types have a\nfundamental group, is whether every group arises as the fundamental\ngroup of some type. The answer to this question is “yes”, but in the\nannoying way that questions like these tend to be answered: Given any\ngroup , we construct a type with . We call the delooping of .\n","idIdent":"Homotopy Groups\n > Deloopings\n","idType":null},{"idAnchor":"Algebra.Group.Homotopy.BAut.html#deloopings-of-automorphism-groups","idDesc":"Recall that any set generates a group , given by the automorphisms . We\nalso have a generic construction of deloopings: special spaces (for a\ngroup ), where the fundamental group recovers . For the specific case of\ndeloping automorphism groups, we can give an alternative construction:\nThe type of small types merely equivalent to has a fundamental group of\n.\n","idIdent":"Deloopings of automorphism groups\n","idType":null},{"idAnchor":"Algebra.Group.Subgroup.html#subgroups","idDesc":"A subgroup of a group is a monomorphism , that is, an object of the\nposet of subobjects . Since group homomorphisms are injective exactly\nwhen their underlying function is an embedding, we can alternatively\ndescribe this as a condition on a predicate .\n","idIdent":"Subgroups\n","idType":null},{"idAnchor":"Algebra.Group.Subgroup.html#kernels-and-images","idDesc":"To a group homomorphism we can associate two canonical subgroups, one of\nand one of : ’s image, written , is the subgroup of “reachable by\nmapping through ”, and ’s kernel, written , is the subgroup of which\nsends to the unit.\n","idIdent":"Kernels and Images\n","idType":null},{"idAnchor":"Algebra.Group.Subgroup.html#representing-kernels","idDesc":"If an evil wizard kidnaps your significant others and demands that you\nfind out whether a predicate is a kernel, how would you go about doing\nit? Well, I should point out that no matter how evil the wizard is, they\nare still human: The predicate definitely represents a subgroup, in the\nsense introduced above — so there’s definitely a group homomorphism .\nAll we need to figure out is whether there exists a group and a map ,\nsuch that as subgroups of .\n","idIdent":"Kernels and Images\n > Representing kernels\n","idType":null},{"idAnchor":"Algebra.Lattice.html#lattices","idDesc":"A lattice is a pair of semilattices and which “fit together” with\nequations specifying that and are duals, called absorption laws.\n","idIdent":"Lattices\n","idType":null},{"idAnchor":"Algebra.Lattice.html#order-theoretically","idDesc":"We already know that a given semilattice structure can induce one of two\nposets, depending on whether the semilattice operator is being\nconsidered as equipping the poset with meets or joins. We’d then expect\nthat a lattice, having two semi-lattices, would have four poset\nstructures. However, there are only two, which we call the “covariant”\nand “contravariant” orderings.\n","idIdent":"Lattices\n > Order-theoretically\n","idType":null},{"idAnchor":"Algebra.Magma.html#magmas","idDesc":"In common mathematical parlance, a magma is a set equipped with a binary\noperation. In HoTT, we free ourselves from considering sets as a\nprimitive, and generalise to ∞-groupoids: An ∞-magma is a type equipped\nwith a binary operation.\n","idIdent":"∞-Magmas\n","idType":null},{"idAnchor":"Algebra.Magma.html#magmas-1","idDesc":null,"idIdent":"Magmas\n","idType":null},{"idAnchor":"Algebra.Magma.html#the-boolean-implication-magma","idDesc":null,"idIdent":"Magmas\n > The boolean implication magma\n","idType":null},{"idAnchor":"Algebra.Magma.Unital.html#unital-magmas","idDesc":"A unital magma is a equipped with a two-sided identity element, that is,\nan element such that . For any given , such an element is exists as long\nas it is unique. This makes unitality a property of magmas rather then\nadditional data, leading to the conclusion that the identity element\nshould be part of the record is-unital-magma instead of its type\nsignature.\n","idIdent":"Unital Magmas\n","idType":null},{"idAnchor":"Algebra.Magma.Unital.EckmannHilton.html#the-eckmann-hilton-argument","idDesc":"The Eckmann-Hilton argument shows that two on the same carrier type that\nsatisfy a particular interchange law are not only equal to another, but\nare also commutative and associative.\n","idIdent":"The Eckmann-Hilton Argument\n","idType":null},{"idAnchor":"Algebra.Monoid.html#monoids","idDesc":"A monoid is a semigroup equipped with a two-sided identity element: An\nelement such that . For any particular choice of binary operator , if a\ntwo-sided identity exists, then it is unique; In this sense, “being a\nmonoid” could be considered an “axiom” that semigroups may satisfy.\n","idIdent":"Monoids\n","idType":null},{"idAnchor":"Algebra.Monoid.html#relationships-to-unital-magmas","idDesc":null,"idIdent":"Relationships to Unital Magmas\n","idType":null},{"idAnchor":"Algebra.Monoid.html#inverses","idDesc":"A useful application of the monoid laws is in showing that having an\ninverse is a proprety of a specific element, not structure on that\nelement. To make this precise: Let be an element of a monoid, say ; If\nthere are and such that and , then .\n","idIdent":"Inverses\n","idType":null},{"idAnchor":"Algebra.Monoid.Category.html#category-of-monoids","idDesc":"The collection of all s relative to some universe level assembles into a\nprecategory. This is because being a monoid homomorphism\nis a proposition, and so does not raise the h-level of the Hom-sets.\n","idIdent":"Category of monoids\n","idType":null},{"idAnchor":"Algebra.Monoid.Category.html#free-objects","idDesc":"We piece together some properties of to show that, if is a set, then is\nan object of ; The operation is list concatenation, and the identity\nelement is the empty list.\n","idIdent":"Category of monoids\n > Free objects\n","idType":null},{"idAnchor":"Algebra.Ring.html#rings","idDesc":"The ring is one of the basic objects of study in algebra, which\nabstracts the best bits of the common algebraic structures: The integers\n, the rationals , the reals , and the complex numbers are all rings, as\nare the collections of polynomials with coefficients in any of those.\nLess familiar examples of rings include square matrices (with values in\na ring) and the integral cohomology ring of a topological space: that\nthese are so far from being “number-like” indicates the incredible\ngenerality of rings.\n","idIdent":"Rings\n","idType":null},{"idAnchor":"Algebra.Ring.html#in-components","idDesc":"We give a more elementary description of rings, which is suitable for\nconstructing values of the record type above. This re-expresses the data\nincluded in the definition of a ring with the least amount of redundancy\npossible, in the most direct terms possible: A ring is a set, equipped\nwith two binary operations and , such that distributes over on either\nside; is an abelian group; and is a monoid.\n","idIdent":"Rings\n > In components\n","idType":null},{"idAnchor":"Algebra.Semigroup.html#semigroups","idDesc":null,"idIdent":"Semigroups\n","idType":null},{"idAnchor":"Algebra.Semigroup.html#the-min-semigroup","idDesc":"An example of a naturally-occuring semigroup are the natural numbers\nunder taking .\n","idIdent":"Semigroups\n > The “min” semigroup\n","idType":null},{"idAnchor":"Algebra.Semilattice.html#semilattices","idDesc":"A semilattice is a partially ordered set where all elements have a meet\n(a meet semilattice), or a join (a join semilattice). Rather than use a\ndefinition in terms of ordered sets, we choose an algebraic definition\nof semilattices: A semilattice is a commutative semigroup where every\nelement is idempotent: .\n","idIdent":"Semilattices\n","idType":null},{"idAnchor":"Algebra.Semilattice.html#order-theoretically","idDesc":"Each semilattice structure on induces two partial orders on by setting\nwhen or when . In the former case, we call the semilattice structure a\nmeet semilattice, since the binary operation acts as a meet of and , and\nsimilarly the dual choice is called a join semilattice. We detail the\nconstruction of a meet semilattice, and leave the construction of a join\nsemilattice in a <details> tag.\n","idIdent":"Semilattices\n > Order-theoretically\n","idType":null},{"idAnchor":"Algebra.Semilattice.html#maps","idDesc":"As is typical with algebraic structures, we define a semilattice\nhomomorphism as being a map which commutes with the binary operator.\nSince being a semilattice is a property of , we have a characterisation\nof identifications of semilattices: Two semilattices are identified\nprecisely when their underlying types are equivalent by some homomorphic\nequivalence.\n","idIdent":"Semilattices\n > Maps\n","idType":null},{"idAnchor":"Authors.html#about-the-authors","idDesc":"This is a page where everyone who adds to the 1lab can write a little\nbit about themselves. I mean it: everyone can write a bit about\nthemselves! Try to follow the format of existing profiles in the source\nfile, and keep the description short. Don’t forget to mention your\npronouns.\n","idIdent":"About the Authors\n","idType":null},{"idAnchor":"Cat.Abelian.Base.html#abelian-categories","idDesc":"This module defines the sequence of properties which “work up to”\nabelian categories: Ab-enriched categories, pre-additive categories,\npre-abelian categories, and abelian categories. Each concept builds on\nthe last by adding a new categorical property on top of a precategory.\n","idIdent":"Abelian categories\n","idType":null},{"idAnchor":"Cat.Abelian.Base.html#ab-enriched-categories","idDesc":"An -enriched category is one where each set carries the structure of an\nAbelian group, such that the composition map is bilinear, hence\nextending to an Abelian group homomorphism\n","idIdent":"Abelian categories\n > Ab-enriched categories\n","idType":null},{"idAnchor":"Cat.Abelian.Base.html#additive-categories","idDesc":"An -category is additive when its underlying category has a terminal\nobject and finite products; By the yoga above, this implies that the\nterminal object is also a zero object, and the finite products coincide\nwith finite coproducts.\n","idIdent":"Additive categories\n","idType":null},{"idAnchor":"Cat.Abelian.Base.html#pre-abelian-abelian-categories","idDesc":"An additive category is pre-abelian when it additionally has kernels and\ncokernels, hence binary equalisers and coequalisers where one of the\nmaps is zero.\n","idIdent":"Pre-abelian & abelian categories\n","idType":null},{"idAnchor":"Cat.Abelian.Functors.html#ab-enriched-functors","idDesc":"Since -categories are additionally equipped with the structure of\nabelian groups on their -sets, it’s natural that we ask that functors\nbetween -categories preserve this structure. In particular, since every\nfunctor has an action which is a map of sets, when and are considered to\nbe abelian groups, we should require that the action be a group\nhomomorphism.\n","idIdent":"Ab-enriched Functors\n","idType":null},{"idAnchor":"Cat.Abelian.Images.html#images-in-abelian-categories","idDesc":"Let be a morphism in an abelian category , which (by definition) admits\na canonical decomposition as\n","idIdent":"Images in abelian categories\n","idType":null},{"idAnchor":"Cat.Abelian.Images.html#the-image","idDesc":null,"idIdent":"Images in abelian categories\n > The image\n","idType":null},{"idAnchor":"Cat.Abelian.Images.html#universality","idDesc":"Suppose that we’re given another decomposition of as\n","idIdent":"Images in abelian categories\n > Universality\n","idType":null},{"idAnchor":"Cat.Abelian.Limits.html#limits","idDesc":"Recall that every pre-abelian admits kernels and cokernels, and is also\nadditive, so it additionally has products and coproducts[1]. It sounds\nlike we’re missing some finite limits (dually, missing some finite\ncolimits), but it turns out that this is enough: We can construct the\nequaliser of as — whence the name difference kernel!\n\n[1] actually, they’re the same thing!\n","idIdent":"Limits\n","idType":null},{"idAnchor":"Cat.Base.html#precategories","idDesc":"In univalent mathematics, it makes sense to distinguish two stages in\nthe construction of categories: A precategory is the object that\ndirectly corresponds to the definition of precategory as it is\ntraditionally formalised, whereas a category (or univalent category) has\nan extra condition: Isomorphic objects must be identified.\n","idIdent":"Precategories\n","idType":null},{"idAnchor":"Cat.Base.html#opposites","idDesc":"A common theme throughout precategory theory is that of duality: The\ndual of a categorical concept is same concept, with “all the arrows\ninverted”. To make this formal, we introduce the idea of opposite\ncategories: The opposite of , written , has the same objects, but with .\n","idIdent":"Precategories\n > Opposites\n","idType":null},{"idAnchor":"Cat.Base.html#the-precategory-of-sets","idDesc":"Given a universe level, we can consider the collection of all sets of\nthat level. This assembles into a quite nicely, since functions preserve\nh-levels.\n","idIdent":"Precategories\n > The precategory of Sets\n","idType":null},{"idAnchor":"Cat.Base.html#functors","idDesc":null,"idIdent":"Functors\n","idType":null},{"idAnchor":"Cat.Base.html#composition","idDesc":null,"idIdent":"Functors\n > Composition\n","idType":null},{"idAnchor":"Cat.Base.html#natural-transformations","idDesc":"Another common theme in category theory is that roughly every concept\ncan be considered the objects of a category. This is the case for\nfunctors, as well! The functors between and assemble into a category,\nnotated  - the functor category between and .\n","idIdent":"Natural Transformations\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#prebicategories","idDesc":null,"idIdent":"Prebicategories\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#the-bicategory-of-categories","idDesc":"Just like the prototypal example of categories is the category of sets,\nthe prototypal example of bicategory is the bicategory of categories. We\nobserve that, without a bound of h-level on the spaces of objects\n(strict categories), the collection of categories of a given universe\nlevel does not form a category, but it does form a bicategory.\n","idIdent":"Prebicategories\n > The bicategory of categories\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#lax-functors","idDesc":"In the same way that the definition of bicategory is obtained by\nstarting with the definition of category and replacing the -sets by\n-categories (and adding coherence data to make sure the resulting\nstructure is well-behaved), one can start with the definition of functor\nand replace the function between -sets by functors between -categories.\n","idIdent":"Lax functors\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#pseudofunctors","idDesc":"As mentioned above, a lax functor with invertible unitors and compositor\nis called a pseudofunctor. Every pseudofunctor has an underlying\nfunctor. Since invertibility is a property of 2-cells (rather than\nstructure on 2-cells), “being pseudo” is a property of lax functors, not\nadditional structure on lax functors.\n","idIdent":"Lax functors\n > Pseudofunctors\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#lax-transformations","idDesc":"By dropping the invertibility requirement when generalising natural\ntransformations to lax functors, we obtain the type of lax\ntransformations between lax functors. If every 2-cell component of the\nlax transformation is invertible, we refer to it as a pseudonatural\ntransformation. We omit the word “natural” in “lax natural\ntransformation” for brevity.\n","idIdent":"Lax transformations\n","idType":null},{"idAnchor":"Cat.Bi.Base.html#modifications","idDesc":"When dealing with 1-categorical data (categories, functors, and natural\ntransformations), the commutativity in 2-cells is witnessed by equations\nin a set, which are trivial. When talking about bicategorical data,\nhowever, the naturality of a lax transformation is witnessed by a family\nof non-trivial 2-cells. Therefore, it is fruitful to consider\ntransformations which affect this data: a natural family of 2-cells.\nThis is called a modification between lax (or pseudo) transformations.\nSince we are directly dealing with sets (the sets of 2-cells),\nmodifications are the simplest bicategorical widget to define.\n","idIdent":"Modifications\n","idType":null},{"idAnchor":"Cat.Bi.Diagram.Adjunction.html#adjunctions-in-a-bicategory","idDesc":"Let be a bicategory, be objects, and and be 1-cells. Generalising the\nsituation where and are functors, we say they are adjoints if there\nexist 2-cells and (the unit and counit respectively), satisfying the\nequations\n","idIdent":"Adjunctions in a bicategory\n","idType":null},{"idAnchor":"Cat.Bi.Diagram.Monad.html#monads-in-a-bicategory","idDesc":"Recall that a monad on a category consists of a functor and natural\ntransformations , . While the words “functor” and “natural\ntransformation” are specific to the setup where is a category, if we\nreplace those with “1-cell” and “2-cell”, then the definition works in\nany bicategory!\n","idIdent":"Monads in a bicategory\n","idType":null},{"idAnchor":"Cat.Bi.Diagram.Monad.html#in-cat","idDesc":"To prove that this is an actual generalisation of the 1-categorical\nnotion, we push some symbols around and prove that a monad in the\nbicategory is the same thing as a monad on some category. Things are set\nup so that this is almost definitional, but the compatibility paths have\nto be adjusted slightly. Check it out below:\n","idIdent":"Monads in a bicategory\n > In Cat\n","idType":null},{"idAnchor":"Cat.CartesianClosed.Base.html#cartesian-closed-categories","idDesc":"Recall that we defined a cartesian category to be one which admits all\nbinary products, hence products of any finite positive cardinality. Such\na category is called cartesian closed (abbreviation: ccc) if it has a\nterminal object (hence products of any natural number of objects), and,\nfor any object , the functor has a right adjoint, to be denoted .\n","idIdent":"Cartesian closed categories\n","idType":null},{"idAnchor":"Cat.CartesianClosed.Locally.html#locally-cartesian-closed-categories","idDesc":"A finitely complete category is said to be locally Cartesian closed when\neach of its slice categories is Cartesian closed. In practice, though,\nit is easier to express this property in terms of a certain family of\nfunctors existing.\n","idIdent":"Locally Cartesian Closed Categories\n","idType":null},{"idAnchor":"Cat.CartesianClosed.Locally.html#internal-homs","idDesc":"We now calculate that each slice of is a cartesian closed category, by\nexhibiting a right adjoint each of their product functors.\n","idIdent":"Locally Cartesian Closed Categories\n > Internal homs\n","idType":null},{"idAnchor":"Cat.Diagram.Coend.html#coends","idDesc":"Let be a functor, which, by the general yoga of bifunctors we think of\nas combining a contravariant action and a covariant action of on [1]. As\na concrete example, we could take , the 1-object -category associated to\na ring — then the functors and would be left- and right- -modules,\nrespectively. In fact, let us focus on this case and consider two\nmodules and , incarnated as a pair of functors and .\n\n[1] “Action” here is meant evoke the idea of e.g. group actions, and\ndoes not refer to a specific concept\n","idIdent":"Coends\n","idType":null},{"idAnchor":"Cat.Diagram.Coend.html#formalisation","idDesc":null,"idIdent":"Coends\n > Formalisation\n","idType":null},{"idAnchor":"Cat.Diagram.Coend.Formula.html#computing-coends","idDesc":"Using the twisted arrow category as a mediating notion, we show how to\ncompute coends as ordinary colimits. The calculation is actually a bit\nmore straightforward than it might seem at first. The first thing we\nnote is that any functor generates a functor from thw twisted arrow\ncategory of :\n","idIdent":"Computing coends\n","idType":null},{"idAnchor":"Cat.Diagram.Coequaliser.html#coequalisers","idDesc":"The coequaliser of two maps (if it exists), represents the largest\nquotient object of that identifies and .\n","idIdent":"Coequalisers\n","idType":null},{"idAnchor":"Cat.Diagram.Coequaliser.html#coequalisers-are-epic","idDesc":"Dually to the situation with equalisers, coequaliser arrows are always\n","idIdent":"Coequalisers\n > Coequalisers are epic\n","idType":null},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#regular-epimorphisms","idDesc":"Dually to regular monomorphisms, which behave as embeddings, regular\nepimorphisms behave like covers: A regular epimorphism expresses as “a\nunion of parts of , possibly glued together”.\n","idIdent":"Regular epimorphisms\n","idType":null},{"idAnchor":"Cat.Diagram.Coequaliser.RegularEpi.html#effective-epis","idDesc":"Again by duality, we have a pair of canonical choices of maps which may\ncoequalise: Its kernel pair, that is, the pullback of along itself. An\nepimorphism which coequalises its kernel pair is called an effective\nepi, and effective epis are immediately seen to be regular epis:\n","idIdent":"Regular epimorphisms\n > Effective epis\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#idea","idDesc":"Colimits are dual to limits limit; much like their cousins, they\ngeneralize constructions in several settings to arbitrary categories. A\ncolimit (if it exists), is the “best solution” to an “identification\nproblem”. This is in contrast to the limit, which acts as a solution to\nan “equational problem”.\n","idIdent":"Idea\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#construction","idDesc":"Every concrete colimit (coproducts, coequalisers, initial objects) we\nhave seen so far consists of roughly the same data. We begin with some\ncollection of objects and morphisms, and then state that the colimit of\nthat collection is some object with a universal property relating all of\nthose objects and morphisms.\n","idIdent":"Construction\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#cocone-maps","idDesc":"Now that we’ve defined cocones, we need a way to figure out how to\nexpress universal properties. Like most things categorical, we begin by\nconsidering a “cocone morphism”, which will give us a category that we\ncan work within. The idea here is that a morphism of cocones is a\nmorphism in between the coapicies, such that all of the injection maps\ncommute.\n","idIdent":"Construction\n > Cocone Maps\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#colimits","idDesc":"We now have all of the machinery in place! What remains is the universal\nproperty, which expresses that a particular cocone is universal, in the\nsense that it has a unique map to any other cocone. However, we already\nhave something that captures this idea, it’s the initial object! This\nleads to the following terse definition: A colimit over a diagram is an\ninitial object in the category of cocones over that diagram.\n","idIdent":"Construction\n > Colimits\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#preservation-of-colimits","idDesc":"Because a cocone is a commutative diagram, any given functor takes\ncocones in to cocones in , as functors preserve commutative diagrams.\n","idIdent":"Preservation of Colimits\n","idType":null},{"idAnchor":"Cat.Diagram.Colimit.Base.html#cocompleteness","idDesc":"A category is cocomplete if admits for limits of arbitrary shape.\nHowever, in the presence of excluded middle, if a category admits\ncoproducts indexed by its class of morphisms, then it is automatically\n[thin]. Since excluded middle is independent of type theory, we can not\nprove that any non-thin categories have arbitrary colimits.\n","idIdent":"Preservation of Colimits\n > Cocompleteness\n","idType":null},{"idAnchor":"Cat.Diagram.Congruence.html#congruences","idDesc":"The idea of congruence is the categorical rephrasing of the idea of\nequivalence relation. Recall that an equivalence relation on a set is a\nfamily of propositions satisfying reflexivity ( for all ), transitivity\n(), and symmetry (). Knowing that classifies embeddings, we can\nequivalently talk about an equivalence relation as being just some set,\nequipped with a mono .\n","idIdent":"Congruences\n","idType":null},{"idAnchor":"Cat.Diagram.Congruence.html#generally","idDesc":"Above, we have calculated the properties of a monomorphism which\nidentify as an equivalence relation on the object . Note that, since the\ndefinition relies on both products and pullbacks, we go ahead and assume\nthe category is finitely complete.\n","idIdent":"Congruences\n > Generally\n","idType":null},{"idAnchor":"Cat.Diagram.Congruence.html#the-diagonal","idDesc":"The first example of a congruence we will see is the “diagonal” morphism\n, corresponding to the “trivial relation”.\n","idIdent":"The diagonal\n","idType":null},{"idAnchor":"Cat.Diagram.Congruence.html#effective-congruences","idDesc":"A second example in the same vein as the diagonal is, for any morphism ,\nits kernel pair, i.e. the pullback of . Calculating in , this is the\nequivalence relation generated by — it is the subobject of consisting of\nthose “values which maps to the same thing”.\n","idIdent":"Effective congruences\n","idType":null},{"idAnchor":"Cat.Diagram.Congruence.html#quotient-objects","idDesc":"Let be a congruence on . If has a coequaliser for the composites , then\nwe call the quotient map, and we call the quotient of .\n","idIdent":"Quotient objects\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.html#coproducts","idDesc":"The coproduct of two objects and (if it exists), is the smallest object\nequipped with “injection” maps , . It is dual to the product.\n","idIdent":"Coproducts\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.html#uniqueness","idDesc":"The uniqueness argument presented here is dual to the argument for the\nProduct.\n","idIdent":"Coproducts\n > Uniqueness\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.Copower.html#copowers","idDesc":"Let be a category admitting -small indexed coproducts, for example a\n-cocomplete category. In the same way that (in ordinary arithmetic) the\niterated product of a bunch of copies of the same factor\n","idIdent":"Copowers\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#indexed-coproducts","idDesc":"Indexed coproducts are the dual notion to indexed products, so see there\nfor motivation and exposition.\n","idIdent":"Indexed coproducts\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#as-colimits","idDesc":"Similarly to the product case, when is a groupoid, indexed coproducts\ncorrespond to discrete diagrams of shape .\n","idIdent":"Indexed coproducts\n > As colimits\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#disjoint-coproducts","idDesc":"An indexed coproduct is said to be disjoint if every one of its\ninclusions is monic, and, for unequal , the square below is a pullback\nwith initial apex. Since the maps are monic, the pullback below computes\nthe intersection of and as subobjects of , hence the name disjoint\ncoproduct: If is an initial object, then .\n","idIdent":"Disjoint coproducts\n","idType":null},{"idAnchor":"Cat.Diagram.Coproduct.Indexed.html#initial-objects-are-disjoint","idDesc":"We prove that if is an initial object, then it is also an indexed\ncoproduct — for any family — and furthermore, it is a disjoint\ncoproduct.\n","idIdent":"Disjoint coproducts\n > Initial objects are disjoint\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#dualities-of-diagrams","idDesc":"Following Hu and Carette, we’ve opted to have different concrete\ndefinitions for diagrams and their opposites. In particular, we have the\nfollowing pairs of “redundant” definitions:\n","idIdent":"Dualities of diagrams\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#coproducts","idDesc":null,"idIdent":"Dualities of diagrams\n > Co/products\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#coequalisers","idDesc":null,"idIdent":"Dualities of diagrams\n > Co/equalisers\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#initialterminal","idDesc":null,"idIdent":"Dualities of diagrams\n > Initial/terminal\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#pullbackpushout","idDesc":null,"idIdent":"Dualities of diagrams\n > Pullback/pushout\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#cocones","idDesc":null,"idIdent":"Dualities of diagrams\n > Co/cones\n","idType":null},{"idAnchor":"Cat.Diagram.Duals.html#colimits","idDesc":null,"idIdent":"Dualities of diagrams\n > Co/limits\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.html#equalisers","idDesc":"The equaliser of two maps , when it exists, represents the largest\nsubobject of where and agree. In this sense, the equaliser is the\ncategorical generalisation of a solution set: The solution set of an\nequation in one variable is largest subset of the domain (i.e. what the\nvariable ranges over) where the left- and right-hand-sides agree.\n","idIdent":"Equalisers\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.html#equalisers-are-monic","idDesc":"As a small initial application, we prove that equaliser arrows are\nalways monic:\n","idIdent":"Equalisers\n > Equalisers are monic\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.Kernel.html#kernels","idDesc":"In a category with equalisers and a zero object , a kernel of a morphism\nis an equaliser of and the zero morphism , hence a subobject of the\ndomain of .\n","idIdent":"Kernels\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#regular-monomorphisms","idDesc":"A regular monomorphism is a morphism that behaves like an embedding,\ni.e. it is an isomorphism onto its image. Since images of arbitrary\nmorphisms do not exist in every category, we must find a definition\nwhich implies this property but only speaks diagramatically about\nobjects directly involved in the definition.\n","idIdent":"Regular monomorphisms\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#effective-epimorphisms","idDesc":"Proving that a map is a regular monomorphism involves finding two maps\nwhich it equalises, but if is a category with pushouts, there is often a\ncanonical choice: The cokernel pair of , that is, the pushout of along\nwith itself. Morphisms which a) have a cokernel pair and b) equalise\ntheir cokernel pair are called effective monomorphisms.\n","idIdent":"Regular monomorphisms\n > Effective epimorphisms\n","idType":null},{"idAnchor":"Cat.Diagram.Equaliser.RegularMono.html#images-of-regular-monos","idDesc":"Let be an effective mono, or, in a category with pushouts, a regular\nmono. We show that admits an image relative to the class of regular\nmonomorphisms. The construction of the image is as follows: We let and\nfactor as\n","idIdent":"Regular monomorphisms\n > Images of regular monos\n","idType":null},{"idAnchor":"Cat.Diagram.Idempotent.html#idempotents","idDesc":"Idempotents are the categorical generalisation of projections, in the\nsense of linear algebra. Formally, an idempotent is a map with . Keeping\nin line with the view that an idempotent is like a projection, we can\nask what it projects onto: We would then have some subobject of fixed\nelements, and a decomposition of as\n","idIdent":"Idempotents\n","idType":null},{"idAnchor":"Cat.Diagram.Image.html#images","idDesc":"Let be an ordinary function between sets (or, indeed, arbitrary types).\nIts image can be computed as the subset , but this description does not\ncarry over to more general categories: More abstractly, we can say that\nthe image embeds into , and admits a map from (in material set theory,\nthis is itself — structurally, it is called the corestriction of ).\nFurthermore, these two maps factor , in that:\n","idIdent":"Images\n","idType":null},{"idAnchor":"Cat.Diagram.Image.html#friendly-interface","idDesc":"Since this definition is incredibly abstract and indirect, we provide a\nvery thin wrapper module over which unpacks the definition into\nfriendlier terms.\n","idIdent":"Images\n > Friendly interface\n","idType":null},{"idAnchor":"Cat.Diagram.Initial.html#initial-objects","idDesc":"An object of a category is said to be initial if there exists a unique\nmap to any other object:\n","idIdent":"Initial objects\n","idType":null},{"idAnchor":"Cat.Diagram.Initial.html#intuition","idDesc":"The intuition here is that we ought to think about an initial object as\nhaving “the least amount of structure possible”, insofar that it can be\nmapped into any other object. For the category of Sets, this is the\nempty set; there is no required structure beyond “being a set”, so the\nempty set sufficies.\n","idIdent":"Initial objects\n > Intuition\n","idType":null},{"idAnchor":"Cat.Diagram.Initial.html#uniqueness","idDesc":"One important fact about initial objects is that they are unique up to\nisomorphism:\n","idIdent":"Initial objects\n > Uniqueness\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#idea","idDesc":"The idea of limits generalises many concrete constructions in\nmathematics - from several settings, such as set theory, topology and\nalgebra - to arbitrary categories. A limit, if it exists, is “the best\nsolution” to an “equational problem”. For a first intuition, we can\nbuild them graphically, working directly “on top” of a diagram.\n","idIdent":"Idea\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#products","idDesc":"Note: Products are described explicitly in Cat.Diagram.Product. The\ndescription there might be easier to parse.\n","idIdent":"Idea\n > Products\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#terminal-objects","idDesc":"Note: Terminal objects are described explicitly in Cat.Diagram.Terminal.\nThe description there might be easier to parse.\n","idIdent":"Idea\n > Terminal objects\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#construction","idDesc":"Cones are always considered over a diagram. Diagram just means\n“functor”, but it’s a concept with an attitude: Whereas, in general,\nfunctors can be a lot more involved than the name “diagram” would\nsuggest, every functor can be considered a diagram! However, for the\npurpose of constructing limits, we generally work with functors out of\n“shapes”, tiny categories like .\n","idIdent":"Construction\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#cone-maps","idDesc":null,"idIdent":"Construction\n > Cone maps\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#limits","idDesc":"At risk of repeating myself: A is, then, a terminal object in this\ncategory.\n","idIdent":"Construction\n > Limits\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#preservation-of-limits","idDesc":"Since a cone is, in particular, a commutative diagram, and every functor\npreserves commutativity of diagrams, a functor acts on a cone over (in\n), sending it to a cone over (in ).\n","idIdent":"Preservation of limits\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#reflection-of-limits","idDesc":"Using our analogy from before, we say a functor reflects limits if it\ntakes limiting cones “downstairs” to limiting cones “upstairs”.\n","idIdent":"Preservation of limits\n > Reflection of limits\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#creation-of-limits","idDesc":"Finally, we say a functor creates limits of shape if it both preserves\nand reflects those limits. Intuitively, this means that the limits of\nshape in are in a 1-1 correspondence with the limits in .\n","idIdent":"Preservation of limits\n > Creation of limits\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#continuity","idDesc":null,"idIdent":"Preservation of limits\n > Continuity\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#uniqueness","idDesc":null,"idIdent":"Uniqueness\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Base.html#completeness","idDesc":"A category is complete if admits for limits of arbitrary shape. However,\nin the presence of excluded middle, if a category admits products\nindexed by its class of morphisms, then it is automatically thin. Since\nexcluded middle is independent of type theory, we can not prove that any\nnon-thin categories have arbitrary limits.\n","idIdent":"Uniqueness\n > Completeness\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Finite.html#finitely-complete-categories","idDesc":"A category is said to be finitely complete if it admits limits for every\ndiagram with a finite shape. While this condition might sound very\nstrong, and thus that it would be hard to come by, it turns out we can\nget away with only the following common shapes of limits:\n","idIdent":"Finitely Complete Categories\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Finite.html#with-equalisers","idDesc":"We now prove that having products and equalisers suffices to have all\npullbacks; Thus a terminal object, binary products and binary equalisers\nsuffice for finite completeness.\n","idIdent":"Finitely Complete Categories\n > With equalisers\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Finite.html#with-pullbacks","idDesc":"We’ll now prove the converse: That a terminal object and pullbacks\nimplies having all products, and all equalisers. We’ll start with the\nproducts, since those are simpler. Observe that we can complete a\nproduct diagram (like the one on the left) to a pullback diagram (like\nthe one on the right) by adding in the unique arrows into the terminal\nobject .\n","idIdent":"Finitely Complete Categories\n > With pullbacks\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Finite.html#thinly","idDesc":"Assuming that is a thin category, it suffices to give constructions of\nproducts (i.e. meets) and a terminal object (i.e. a top element). In\nthis sense, finitely complete thin categories correspond to bounded meet\nsemilattices.\n","idIdent":"Finitely Complete Categories\n > Thinly\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Finite.html#lex-functors","idDesc":"A functor is said to be left exact, abbreviated lex, when it preserves\nfinite limits. These functors aren’t called “finite-limit-preserving\nfunctors” by historical accident, and for brevity. By the\ncharacterisations above, it suffices for a functor to preserve the\nterminal object and pullbacks.\n","idIdent":"Lex functors\n","idType":null},{"idAnchor":"Cat.Diagram.Limit.Product.html#products-are-limits","idDesc":"We establish the correspondence between binary products and limits over\nthe functor out of which maps to and to . We begin by defining the\nfunctor (reusing existing infrastructure):\n","idIdent":"Products are limits\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.html#monads","idDesc":"A monad on a category is one way of categorifying the concept of monoid.\nSpecifically, rather than living in a monoidal category, a monad lives\nin a bicategory. Here, we concern ourselves with the case of monads in\nthe bicategory of categories, so that we may say: A monad is an\nendofunctor , equipped with a natural transformation , and a .\n","idIdent":"Monads\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.html#algebras-over-a-monad","idDesc":"One way of interpreting a monad is as giving a signature for an\nalgebraic theory. For instance, the free monoid monad describes the\nsignature for the theory of monoids, and the free group monad describes\nthe theory of groups.\n","idIdent":"Algebras over a monad\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.html#eilenberg-moore-category","idDesc":"If we take a monad as the signature of an (algebraic) theory, and\n-algebras as giving models of that theory, then we can ask (like with\neverything in category theory): Are there maps between interpretations?\nThe answer (as always!) is yes: An is a map of the underlying objects\nwhich “commutes with the algebras”.\n","idIdent":"Eilenberg-Moore Category\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.html#free-algebras","idDesc":"In exactly the same way that we may construct a free group by taking the\ninhabitants of some set as generating the “words” of a group, we can,\ngiven an object of the underlying category, build a free -algebra on .\nKeeping with our interpretation of monads as logical signatures, this is\nthe syntactic model of , with a set of “neutrals” chosen from the object\n.\n","idIdent":"Eilenberg-Moore Category\n > Free Algebras\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.Codensity.html#codensity-monads","idDesc":"Let be a functor with a left adjoint . Some pretty standard abstract\nnonsense tells us that the composite is a monad in , with the unit and\nmultiplication inherited from the adjunction . The easiest cases to\npicture are when is , and is the “underlying set” functor from an\nalgebraic category (like monoids or groups). What’s slightly more\ninteresting is that functors without left adjoints may also induce\nmonads!\n","idIdent":"Codensity monads\n","idType":null},{"idAnchor":"Cat.Diagram.Monad.Limits.html#limits-in-categories-of-algebras","idDesc":"Suppose that be a category, be a monad on , and be a -shaped diagram of\n-algebras (that is, a functor into the Eilenberg-Moore category of M).\nSuppose that an evil wizard has given you a limit for the diagram in\nwhich underlies , but they have not (being evil and all) told you\nwhether admits an algebra structure at all.\n","idIdent":"Limits in categories of algebras\n","idType":null},{"idAnchor":"Cat.Diagram.Product.html#products","idDesc":"The product of two objects and , if it exists, is the smallest object\nequipped with “projection” maps and . This situation can be visualised\nby putting the data of a product into a commutative diagram, as the one\nbelow: To express that is the smallest object with projections to and ,\nwe ask that any other object with projections through and factors\nuniquely through :\n","idIdent":"Products\n","idType":null},{"idAnchor":"Cat.Diagram.Product.html#uniqueness","idDesc":"Products, when they exist, are unique. It’s easiest to see this with a\ndiagrammatic argument: If we have product diagrams and , we can fit them\ninto a “commutative diamond” like the one below:\n","idIdent":"Products\n > Uniqueness\n","idType":null},{"idAnchor":"Cat.Diagram.Product.html#the-product-functor","idDesc":"If admits products of all pairs of objects, then the assignment extends\nto a bifunctor .\n","idIdent":"The product functor\n","idType":null},{"idAnchor":"Cat.Diagram.Product.Indexed.html#indexed-products","idDesc":"If a category admits a terminal object and binary products, then it\nadmits products of any finite cardinality: iterate the binary product,\nand use the terminal object when there aren’t any objects. However,\nthese two classes of limit do not let us speak of products of arbitrary\ncardinality, or, in the univalent context, indexed by types which are\nnot sets.\n","idIdent":"Indexed products\n","idType":null},{"idAnchor":"Cat.Diagram.Product.Indexed.html#as-limits","idDesc":"In the particular case where is a groupoid, e.g. because it arises as\nthe space of objects of a univalent category, an indexed product for is\nthe same thing as a limit over , considered as a functor . We can not\nlift this restriction: If is not a groupoid, then its path spaces are\nnot necessarily sets, and so the construction does not apply to it.\n","idIdent":"Indexed products\n > As limits\n","idType":null},{"idAnchor":"Cat.Diagram.Pullback.html#pullbacks","idDesc":null,"idIdent":"Pullbacks\n","idType":null},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#properties-of-pullbacks","idDesc":"This module chronicles some general properties of pullbacks.\n","idIdent":"Properties of pullbacks\n","idType":null},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#pasting-law","idDesc":"The pasting law for pullbacks says that, if in the commutative diagram\nbelow the the right square is a pullback, then the left square is\nuniversal if, and only if, the outer rectangle is, too. Note the\nemphasis on the word commutative: if we don’t know that both squares\n(and the outer rectangle) all commute, the pasting law does not go\nthrough.\n","idIdent":"Properties of pullbacks\n > Pasting law\n","idType":null},{"idAnchor":"Cat.Diagram.Pullback.Properties.html#monomorphisms","idDesc":"Being a monomorphism is a “limit property”. Specifically, is a\nmonomorphism iff. the square below is a pullback.\n","idIdent":"Properties of pullbacks\n > Monomorphisms\n","idType":null},{"idAnchor":"Cat.Diagram.Pushout.html#pushouts","idDesc":null,"idIdent":"Pushouts\n","idType":null},{"idAnchor":"Cat.Diagram.Sieve.html#sieves","idDesc":"Given a category , a sieve on an object Is a subset of the maps closed\nunder composition: If , then . The data of a sieve on corresponds to the\ndata of a subobject of , considered as an object of .\n","idIdent":"Sieves\n","idType":null},{"idAnchor":"Cat.Diagram.Sieve.html#representing-subfunctors","idDesc":"Let be a sieve on . We show that it determines a presheaf , and that\nthis presheaf admits a monic natural transformation . The functor\ndetermined by a sieve sends each object to the set of arrows s.t. ; The\nfunctorial action is given by composition, as with the functor.\n","idIdent":"Sieves\n > Representing subfunctors\n","idType":null},{"idAnchor":"Cat.Diagram.Terminal.html#terminal-objects","idDesc":"An object of a category is said to be terminal if it admits a unique map\nfrom any other object:\n","idIdent":"Terminal objects\n","idType":null},{"idAnchor":"Cat.Diagram.Terminal.html#uniqueness","idDesc":"If a category has two terminal objects and , then there is a unique\nisomorphism . We first establish the isomorphism: Since (resp. ) is\nterminal, there is a unique map (resp. ). To show these maps are\ninverses, we must show that is ; But these morphisms inhabit a\ncontractible space, namely the space of maps into , so they are equal.\n","idIdent":"Terminal objects\n > Uniqueness\n","idType":null},{"idAnchor":"Cat.Diagram.Zero.html#zero-objects","idDesc":"In some categories, and objects coincide. When this occurs, we call the\nobject a zero object.\n","idIdent":"Zero Objects\n","idType":null},{"idAnchor":"Cat.Diagram.Zero.html#intuition","idDesc":null,"idIdent":"Zero Objects\n > Intuition\n","idType":null},{"idAnchor":"Cat.Displayed.Base.html#displayed-categories","idDesc":"The core idea behind displayed categories is that we want to capture the\nidea of being able to place extra structure over some sort of “base”\ncategory. For instance, we can think of categories of algebraic objects\n(monoids, groups, rings, etc) as being extra structure placed atop the\nobjects of Set, and extra conditions placed atop the morphisms of Set.\n","idIdent":"Displayed Categories\n","idType":null},{"idAnchor":"Cat.Displayed.Cartesian.html#cartesian-morphisms-and-fibrations","idDesc":null,"idIdent":"Cartesian Morphisms and Fibrations\n","idType":null},{"idAnchor":"Cat.Displayed.Fibre.html#fibre-categories","idDesc":"A displayed category can be thought of as representing data of a “family\nof categories”[1]. Given an object of the base category, the morphisms\nin the fibre over x, or vertical morphisms, are those in the set of\nmorphisms over the identity map (on ).\n\n[1] Though note that unless the displayed category is a Cartesian\nfibration, this “family” might not be functorially-indexed\n","idIdent":"Fibre categories\n","idType":null},{"idAnchor":"Cat.Displayed.Instances.Family.html#the-family-fibration","idDesc":"We can canonically treat any as being displayed over , regardless of the\nsize of the object- and Hom-spaces of .\n","idIdent":"The family fibration\n","idType":null},{"idAnchor":"Cat.Displayed.Instances.Pullback.html#pullback-of-a-displayed-category","idDesc":"If we have a category displayed over , then a functor defines a\n(contravariant) “change-of-base” action, reasulting in a category\ndisplayed over .\n","idIdent":"Pullback of a displayed category\n","idType":null},{"idAnchor":"Cat.Displayed.Instances.Slice.html#the-canonical-self-indexing","idDesc":"There is a canonical way of viewing any category as displayed over\nitself, given fibrewise by taking slice categories. Following (Sterling\nand Angiuli 2022), we refer to this construction as the canonical-self\nindexing of and denote it . Recall that the objects in the slice over\nare pairs consisting of an object and a map . The core idea is that any\nmorphism lets us view an object as being “structure over” an object ;\nthe collection of all possible such structures, then, is the set of\nmorphisms , with domain allowed to vary.\n","idIdent":"The canonical self-indexing\n","idType":null},{"idAnchor":"Cat.Displayed.Instances.Slice.html#as-a-fibration","idDesc":"If (and only if) has all pullbacks, then the self-indexing is a\nCartesian fibration. This is almost by definition, and is in fact where\nthe “Cartesian” in “Cartesian fibration” (recall that another term for\n“pullback square” is “cartesian square”). Since the total space is\nequivalently the arrow category of , with the projection functor\ncorresponding under this equivalence to the codomain functor, we refer\nto regarded as a Cartesian fibration as the codomain fibration.\n","idIdent":"The canonical self-indexing\n > As a fibration\n","idType":null},{"idAnchor":"Cat.Displayed.Reasoning.html#reasoning-in-displayed-categories","idDesc":null,"idIdent":"Reasoning in displayed categories\n","idType":null},{"idAnchor":"Cat.Displayed.Total.html#the-total-category-of-a-displayed-category","idDesc":"So far, we’ve been thinking of displayed categories as “categories of\nstructures” over some base category. However, it’s often useful to\nconsider a more “bundled up” notion of structure, where the carrier and\nthe structure are considered as a singular object. For instance, if we\nconsider the case of algebraic structures, we often want to think about\n“a monoid” as a singular thing, as opposed to structure imposed atop\nsome set.\n","idIdent":"The Total Category of a Displayed Category\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#adjoint-functors","idDesc":"Category theory is, in general, the study of how things can be related.\nFor instance, structures at the level of sets (e.g. the collection of\nnatural numbers) are often interestingly related by propositions (i.e.\nthe proposition ). Structures at the level of groupoids (e.g. the\ncollection of all sets) are interestingly related by sets (i.e. the set\nof maps ). Going further, we have structures at the level of\n2-groupoids, which could be given an interesting category of relations,\netc.\n","idIdent":"Adjoint functors\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#universal-morphisms","idDesc":null,"idIdent":"Universal morphisms\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#defining-the-l","idDesc":"We first show that the assignment of universal morphisms restricts to a\nfunctorial assignment . Recall that an object in is given by a codomain\nand a map . We define to be the codomain of the universal morphism:\n","idIdent":"Universal morphisms\n > Defining the L\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#building-the-adjunction","idDesc":"We now prove that , which, recall, means giving natural transformations\n(the adjunction unit) and (the adjunction counit). We begin with the\ncounit, since that’s more involved.\n","idIdent":"Universal morphisms\n > Building the adjunction\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#from-an-adjunction","idDesc":"To finish the correspondence, we show that any (left) adjoint functor\ndefines a system of universal arrows ; This means that, not only does a\n“universal way of solving ” give a left adjoint to , it is a left\nadjoint to .\n","idIdent":"Universal morphisms\n > From an adjunction\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.html#adjuncts","idDesc":"Another view on adjunctions, one which is productive when thinking about\nadjoint endofunctors , is the concept of adjuncts. Any pair of natural\ntransformations typed like a unit and counit allow you to pass between\nthe Hom-sets and , by composing the functorial action of (resp ) with\nthe natural transformations:\n","idIdent":"Adjuncts\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Compose.html#composition-of-adjunctions","idDesc":"Suppose we have four functors and , such that they “fit together”,\ni.e. the composites and both exist. What can we say about their\ncomposites? The hope is that they would again be adjoints, and this is\nindeed the case.\n","idIdent":"Composition of adjunctions\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#continuity-of-adjoints","idDesc":"We prove that every functor admitting a left adjoint preserves every\nlimit which exists in . We then instantiate this theorem to the\n“canonical” shapes of limit: terminal objects, products, pullbacks and\nequalisers.\n","idIdent":"Continuity of adjoints\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#passing-cones-along","idDesc":"The first thing we prove is that, given a cone over a diagram in , we\ncan get a cone in over , by passing both the apex and the morphisms\n“over” using . In reality, this is just the canonically-defined action\nof on cones over :\n","idIdent":"Continuity of adjoints\n > Passing cones along\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Continuous.html#concrete-limits","idDesc":"For establishing the preservation of “concrete limits”, in addition to\nthe preexisting conversion functions (, , , etc.), we must establish\nresults analogous to : Functors out of shape categories are entirely\ndetermined by the “introduction forms” cospan→cospan-diagram and .\n","idIdent":"Continuity of adjoints\n > Concrete limits\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Hom.html#adjoints-as-hom-isomorphisms","idDesc":"Recall from the page on adjoint functors that an adjoint pair induces an\nisomorphism\n","idIdent":"Adjoints as hom-isomorphisms\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Monad.html#the-monad-from-an-adjunction","idDesc":null,"idIdent":"The Monad from an Adjunction\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Monadic.html#monadic-adjunctions","idDesc":"An adjunction between functors and is monadic if the induced (where the\nright-hand side is the category of the monad of the adjunction) is an\nequivalence of categories.\n","idIdent":"Monadic Adjunctions\n","idType":null},{"idAnchor":"Cat.Functor.Adjoint.Reflective.html#reflective-subcategories","idDesc":"Occasionally, full subcategory inclusions (hence fully faithful functors\n— like the inclusion of abelian groups into the category of all groups,\nor the inclusion ) participate in an adjunction\n","idIdent":"Reflective subcategories\n","idType":null},{"idAnchor":"Cat.Functor.Amnestic.html#amnestic-functors","idDesc":"The notion of amnestic functor was introduced by Adámek, Herrlich and\nStrecker in their book “The Joy of Cats”[1] as a way to make precise the\nvibes-based notion of forgetful functor. Classically, the definition\nreads\n\n[1] Cats are, indeed, very joyful\n","idIdent":"Amnestic functors\n","idType":null},{"idAnchor":"Cat.Functor.Amnestic.html#who-cares","idDesc":"The amnestic functors are interesting to consider in HoTT because they\nare exactly those that reflect univalence: If is an amnestic functor and\nis a univalent category, then is univalent, too!\n","idIdent":"Who cares?\n","idType":null},{"idAnchor":"Cat.Functor.Base.html#functors","idDesc":"This module defines the most important clases of functors: Full,\nfaithful, fully faithful (abbreviated ff), split essentially surjective\nand (“merely”) essentially surjective.\n","idIdent":"Functors\n","idType":null},{"idAnchor":"Cat.Functor.Base.html#ff-functors","idDesc":"A functor is fully faithful (abbreviated ff) when its action on hom-sets\nis an equivalence. Since Hom-sets are sets, it suffices for the functor\nto be full and faithful; Rather than taking this conjunction as a\ndefinition, we use the more directly useful data as a definition and\nprove the conjunction as a theorem.\n","idIdent":"Functors\n > ff Functors\n","idType":null},{"idAnchor":"Cat.Functor.Base.html#essential-fibres","idDesc":"The essential fibre of a functor over an object is the space of objects\nof which takes, up to isomorphism, to .\n","idIdent":"Functors\n > Essential Fibres\n","idType":null},{"idAnchor":"Cat.Functor.Bifunctor.html#bifunctors","idDesc":null,"idIdent":"Bifunctors\n","idType":null},{"idAnchor":"Cat.Functor.Conservative.html#conservative-functors","idDesc":"We say a functor is conservative if it reflects isomorphisms. More\nconcretely, if is some morphism , and if is an iso in , then must have\nalready been an iso in !\n","idIdent":"Conservative Functors\n","idType":null},{"idAnchor":"Cat.Functor.Equivalence.html#equivalences","idDesc":"A functor is an equivalence of categories when it has a right adjoint ,\nwith the unit and counit natural transformations being natural\nisomorphisms. This immediately implies that our adjoint pair extends to\nan adjoint triple .\n","idIdent":"Equivalences\n","idType":null},{"idAnchor":"Cat.Functor.Equivalence.html#fully-faithful-essentially-surjective","idDesc":"Any fully faithful and (split!) essentially surjective functor\ndetermines an equivalence of precategories. Recall that “split\nessentially surjective” means we have some determined procedure for\npicking out an essential fibre over any object : an object together with\na specified isomorphism .\n","idIdent":"Equivalences\n > Fully faithful, essentially surjective\n","idType":null},{"idAnchor":"Cat.Functor.Equivalence.html#between-categories","idDesc":"Above, we made an equivalence out of any fully faithful and split\nessentially surjective functor. In set-theoretic mathematics (and indeed\nbetween strict categories), the splitting condition can not be lifted\nconstructively: the statement “every (ff, eso) functor between strict\ncategories is an equivalence” is equivalent to the axiom of choice.\n","idIdent":"Equivalences\n > Fully faithful, essentially surjective\n > Between categories\n","idType":null},{"idAnchor":"Cat.Functor.Equivalence.html#isomorphisms","idDesc":"Another, more direct way of proving that a functor is an equivalence of\nprecategories is proving that it is an isomorphism of precategories:\nIt’s fully faithful, thus a typal equivalence of morphisms, and in\naddition its action on objects is an equivalence of types.\n","idIdent":"Equivalences\n > Isomorphisms\n","idType":null},{"idAnchor":"Cat.Functor.Equivalence.Complete.html#completeness-respects-equivalences","idDesc":"Let be a category admitting limits for -shaped diagrams, and an\nequivalence. Then also admits limits for -shaped diagrams; In\nparticular, if is complete, then so is .\n","idIdent":"Completeness respects equivalences\n","idType":null},{"idAnchor":"Cat.Functor.FullSubcategory.html#full-subcategories","idDesc":"A full subcategory of some larger category is the category generated by\nsome predicate on the objects of of : You keep only those objects for\nwhich holds, and all the morphisms between them. An example is the\ncategory of abelian groups, as a full subcategory of groups: being\nabelian is a proposition (there’s “at most one way for a group to be\nabelian”).\n","idIdent":"Full subcategories\n","idType":null},{"idAnchor":"Cat.Functor.FullSubcategory.html#from-full-inclusions","idDesc":"There is another way of representing full subcategories: By giving a\nfull inclusion, i.e. a fully faithful functor . Each full inclusion\ncanonically determines a full subcategory of , namely that consisting of\nthe objects in merely in the image of .\n","idIdent":"Full subcategories\n > From full inclusions\n","idType":null},{"idAnchor":"Cat.Functor.Hom.html#the-hom-functor","idDesc":"We prove that the assignment of -sets in a is a functor, specifically a\nbifunctor from to . The action of on a morphism is given by ; Since is\nacting by precomposition, the first coordinate is contravariant ().\n","idIdent":"The Hom functor\n","idType":null},{"idAnchor":"Cat.Functor.Hom.html#the-yoneda-embedding","idDesc":"Abstractly and nonsensically, one could say that the Yoneda embedding is\nthe exponential transpose of the bifunctor. However, this construction\ngenerates awful terms, so in the interest of computational efficiency we\nbuild up the functor explicitly.\n","idIdent":"The Hom functor\n > The Yoneda embedding\n","idType":null},{"idAnchor":"Cat.Functor.Hom.html#the-coyoneda-lemma","idDesc":"The Coyoneda lemma is, like its dual, a statement about presheaves. It\nstates that “every presheaf is a colimit of representables”, which, in\nless abstract terms, means that every presheaf arises as some way of\ngluing together a bunch of (things isomorphic to) hom functors!\n","idIdent":"The Hom functor\n > The Coyoneda Lemma\n","idType":null},{"idAnchor":"Cat.Functor.Hom.Cocompletion.html#free-cocompletions","idDesc":"Let be a -small precategory. It, broadly speaking, will not be\ncocomplete. Suppose that we’re interested in passing from to a\ncocomplete category; How might we go about this in a universal way?\n","idIdent":"Free cocompletions\n","idType":null},{"idAnchor":"Cat.Functor.Hom.Representable.html#representable-functors","idDesc":"A functor (from a locally -small category) is said to be representable\nwhen it is naturally isomorphic to for an object (called the\nrepresenting object) — that is, the functor classifies the maps into .\nNote that we can evidently dualise the definition, to get what is called\na corepresentable functor, one of the form , but we refer informally to\nboth of these situations as “representables” and “representing objects”.\n","idIdent":"Representable functors\n","idType":null},{"idAnchor":"Cat.Functor.Hom.Representable.html#as-initial-objects","idDesc":"We begin to connect the idea of representing objects to other universal\nconstructions by proving this alternative characterisation of\nrepresentations: A functor is representable if, and only if, its\ncategory of elements has a terminal object.\n","idIdent":"Representable functors\n > As initial objects\n","idType":null},{"idAnchor":"Cat.Functor.Hom.Representable.html#universal-constructions","idDesc":"We now show a partial converse to the calculation above: That terminal\nobjects are representing objects for a particular functor. Consider, to\nbe more specific, the constant functor which sends everything to the\nterminal set. When is representable?\n","idIdent":"Representable functors\n > Universal constructions\n","idType":null},{"idAnchor":"Cat.Functor.Kan.html#kan-extensions","idDesc":"Suppose we have a functor , and a functor — perhaps to be thought of as\na full subcategory inclusion, where is a completion of , but the\nsituation applies just as well to any pair of functors — which naturally\nfit into a commutative diagram\n","idIdent":"Kan extensions\n","idType":null},{"idAnchor":"Cat.Functor.Kan.html#ubiquity","idDesc":"The elevator pitch for Kan extensions is that “all concepts are Kan\nextensions”. The example we will give here is that, if is an adjunction,\nthen gives . This isn’t exactly enlightening: adjunctions and Kan\nextensions have very different vibes, but the latter concept is a\nlegitimate generalisation.\n","idIdent":"Kan extensions\n > Ubiquity\n","idType":null},{"idAnchor":"Cat.Functor.Kan.html#a-formula","idDesc":"In the cases where are “small enough” and is “cocomplete enough”, the\nleft Kan extension of any functor along any functor exists, and is\ncomputed as a colimit in . The size concerns here are unavoidable, so\nlet’s be explicit about them: Suppose that admits colimits of -small\ndiagrams, e.g. because it is . Then the category must be -small, and\nmust be locally -small, i.e. its Hom-sets must live in the th universe.\n","idIdent":"A formula\n","idType":null},{"idAnchor":"Cat.Functor.Kan.Nerve.html#nerve-and-realisation","idDesc":"Let be a functor from a -small category to a locally -small, -cocomplete\ncategory . induces a pair of adjoint functors, as in the diagram below,\nwhere . In general, the left adjoint is called “realization”, and the\nright adjoint is called “nerve”.\n","idIdent":"Nerve and realisation\n","idType":null},{"idAnchor":"Cat.Functor.Kan.Right.html#right-kan-extensions","idDesc":"Dually to our setup for a left Kan extension, we have right Kan\nextensions: The (suitably weakly) terminal solution to the problem of\nlifting a functor along a functor . We picture the situation as in the\nfollowing commutative diagram:\n","idIdent":"Right Kan extensions\n","idType":null},{"idAnchor":"Cat.Functor.Kan.Right.html#computation","idDesc":"Using the helper defined above and the formula for computing left Kan\nextensions, we can formulate a condition for the existence of right Kan\nextensions based on the size and completeness of the categories\ninvolved. If admits limits of -small diagrams, is -small, and is locally\n-small, then for any and , the right Kan extension exists.\n","idIdent":"Right Kan extensions\n > Computation\n","idType":null},{"idAnchor":"Cat.Functor.Monadic.Beck.html#becks-coequaliser","idDesc":"Let be a functor admitting a right adjoint . Recall that every\nadjunction induces a monad (which we will call for short) on the\ncategory , and a “comparison” functor into the Eilenberg-Moore category\nof . In this module we will lay out a sufficient condition for the\nfunctor to have a left adjoint, which we call (Comparison⁻¹). Let us\nfirst establish a result about the presentation of -algebras by\n“generators and relations”.\n","idIdent":"Beck’s coequaliser\n","idType":null},{"idAnchor":"Cat.Functor.Monadic.Beck.html#presented-algebras","idDesc":"The lemma above says that every algebra which exists can be presented by\ngenerators and relations; The relations are encoded by the pair of maps\nin Beck’s coequaliser, above. But what about the converse? The following\nlemma says that, if every algebra presented by generators-and-relations\n(encoded by a parallel pair ) has a coequaliser in , then the comparison\nfunctor has a left adjoint.\n","idIdent":"Presented algebras\n","idType":null},{"idAnchor":"Cat.Functor.Monadic.Crude.html#crude-monadicity","idDesc":"We present a refinement of the conditions laid out in Beck’s coequaliser\nfor when an adjunction is monadic: The crude monadicity theorem. The\nproof we present is adapted from [Mac Lane and Moerdijk (1994), chap.\nIV; sect. 4], where it is applied to the setting of elementary topoi,\nbut carried out in full generality.\n","idIdent":"Crude monadicity\n","idType":null},{"idAnchor":"Cat.Functor.Pullback.html#base-change","idDesc":"Let be a category with all pullbacks, and a morphism in . Then we have a\nfunctor , called the base change, where the action on objects is given\nby pulling back along .\n","idIdent":"Base change\n","idType":null},{"idAnchor":"Cat.Functor.Pullback.html#properties","idDesc":"The base change functor is a right adjoint. We construct the left\nadjoint directly, then give the unit and counit, and finally prove the\ntriangle identities.\n","idIdent":"Base change\n > Properties\n","idType":null},{"idAnchor":"Cat.Functor.Reasoning.html#reasoning-combinators-for-functors","idDesc":"The combinators exposed in category reasoning abstract out a lot of\ncommon algebraic manipulations, and make proofs much more concise.\nHowever, once functors get involved, those combinators start to get\nunwieldy! Therefore, we have to write some new combinators for working\nwith functors specifically. This module is meant to be imported\nqualified.\n","idIdent":"Reasoning Combinators for Functors\n","idType":null},{"idAnchor":"Cat.Functor.Reasoning.html#identity-morphisms","idDesc":null,"idIdent":"Reasoning Combinators for Functors\n > Identity Morphisms\n","idType":null},{"idAnchor":"Cat.Functor.Reasoning.html#reassociations","idDesc":null,"idIdent":"Reasoning Combinators for Functors\n > Reassociations\n","idType":null},{"idAnchor":"Cat.Functor.Reasoning.html#cancellation","idDesc":null,"idIdent":"Reasoning Combinators for Functors\n > Cancellation\n","idType":null},{"idAnchor":"Cat.Functor.Reasoning.html#notation","idDesc":"Writing ap F₁ p is somewhat clunky, so we define a bit of notation to\nmake it somewhat cleaner.\n","idIdent":"Reasoning Combinators for Functors\n > Notation\n","idType":null},{"idAnchor":"Cat.Functor.Slice.html#slicing-functors","idDesc":"Let be a functor and an object. By a standard tool in category theory\n(namely “whacking an entire commutative diagram with a functor”),\nrestricts to a functor . We call this “slicing” the functor . This\nmodule investigates some of the properties of sliced functors.\n","idIdent":"Slicing functors\n","idType":null},{"idAnchor":"Cat.Functor.Slice.html#faithful-fully-faithful","idDesc":"Slicing preserves faithfulness and fully-faithfulness. It does not\npreserve fullness: Even if, by fullness, we get a map from a map , it\ndoes not necessarily restrict to a map in . We’d have to show and\nimplies , which is possible only if is faithful.\n","idIdent":"Faithful, fully faithful\n","idType":null},{"idAnchor":"Cat.Functor.Slice.html#left-exactness","idDesc":"If is lex (meaning it preserves pullbacks and the terminal object), then\nis lex as well. We note that it (by definition) preserves products,\nsince products in are equivalently pullbacks in . Pullbacks are also\nimmediately shown to be preserved, since a square in is a pullback iff\nit is a pullback in .\n","idIdent":"Left exactness\n","idType":null},{"idAnchor":"Cat.Functor.Slice.html#sliced-adjoints","idDesc":"A very important property of sliced functors is that, if , then is also\na right adjoint. The left adjoint isn’t quite , because the types there\ndon’t match, nor is it — but it’s quite close. We can adjust that\nfunctor by postcomposition with the counit A to get a functor left\nadjoint to .\n","idIdent":"Sliced adjoints\n","idType":null},{"idAnchor":"Cat.Instances.Comma.html#comma-categories","idDesc":"The comma category of two functors and with common codomain, written ,\nis the directed, bicategorical analogue of a pullback square. It\nconsists of maps in which all have their domain in the image of , and\ncodomain in the image of .\n","idIdent":"Comma categories\n","idType":null},{"idAnchor":"Cat.Instances.Comma.Univalent.html#comma-categories-preserve-univalence","idDesc":"Theorem. Let be a cospan of functors between three univalent categories.\nThen the comma category is also univalent.\n","idIdent":"Comma categories preserve univalence\n","idType":null},{"idAnchor":"Cat.Instances.Discrete.html#discrete-categories","idDesc":"Given a groupoid , we can build the category with space of objects and a\nsingle morphism whenever .\n","idIdent":"Discrete categories\n","idType":null},{"idAnchor":"Cat.Instances.Discrete.html#diagrams-in-discx","idDesc":"If is a , then it is in particular in , and we can make diagrams of\nshape in some category , using the decidable equality on . We note that\nthe decidable equality is redundant information: The construction above\nextends into a left adjoint to the functor.\n","idIdent":"Discrete categories\n > Diagrams in Disc(X)\n","idType":null},{"idAnchor":"Cat.Instances.Elements.html#the-category-of-elements","idDesc":"The category of elements of a presheaf is a means of unpacking the data\nof the presheaf. Its objects are pairs of an object , and a section .\n","idIdent":"The Category of Elements\n","idType":null},{"idAnchor":"Cat.Instances.Elements.html#projection","idDesc":"The category of elements is equipped with a canonical projection functor\n, which just forgets all of the points and morphism actions.\n","idIdent":"The Category of Elements\n > Projection\n","idType":null},{"idAnchor":"Cat.Instances.FinSet.html#the-category-of-finite-sets","idDesc":"Throughout this page, let be a natural number and denote the standard\n-element ordinal. The category of finite sets, , is the category with\nset of objects the natural numbers, with set of maps the set of\nfunctions . This category is not univalent, but it is weakly equivalent\nto the full subcategory of on those objects which are merely isomorphic\nto a finite ordinal. The reason for this “skeletal” definition is that\nis a small category, so that presheaves on are a Grothendieck topos.\n","idIdent":"The category of finite sets\n","idType":null},{"idAnchor":"Cat.Instances.Functor.html#functor-precategories","idDesc":"By assigning the identity morphism to every object in , we get a natural\ntransformation between and itself.\n","idIdent":"Functor (pre)categories\n","idType":null},{"idAnchor":"Cat.Instances.Functor.html#functor-categories","idDesc":"When the codomain category is univalent, then so is the category of\nfunctors . Essentially, this can be read as saying that “naturally\nisomorphic functors are identified”. We begin by proving that the\ncomponents of a natural isomorphism (a natural transformation with\nnatural inverse) are themselves isomorphisms in .\n","idIdent":"Functor (pre)categories\n > Functor categories\n","idType":null},{"idAnchor":"Cat.Instances.Functor.html#currying","idDesc":"There is an equivalence between the spaces of bifunctors and the space\nof functors . We refer to the image of a functor under this equivalence\nas its exponential transpose, and we refer to the map in the “forwards”\ndirection (as in the text above) as currying:\n","idIdent":"Currying\n","idType":null},{"idAnchor":"Cat.Instances.Functor.Duality.html#duality-of-functor-categories","idDesc":"The duality involution on categories extends to a “duality involution”\non functors. However, since this changes the type of the functor — the\ndual of is — it does not represent an involution on functor categories;\nRather, it is an equivalence .\n","idIdent":"Duality of functor categories\n","idType":null},{"idAnchor":"Cat.Instances.Functor.Limits.html#limits-in-functor-categories","idDesc":"Let be a category admitting -shaped limits. Then the functor category ,\nfor any category, also admits -shaped limits. In particular, if is\n-complete, then so is .\n","idIdent":"Limits in functor categories\n","idType":null},{"idAnchor":"Cat.Instances.Functor.Limits.html#the-cone","idDesc":"We are now ready to build a universal cone over , in the category ,\nmeaning the apex will be given by a functor . Using the fact that was\nassumed to have -shaped limits, will be given by . Similarly, the choice\nof map is essentially unique: we must map , but the space of maps is\ncontractible.\n","idIdent":"Limits in functor categories\n > The cone\n","idType":null},{"idAnchor":"Cat.Instances.Functor.Limits.html#the-maps","idDesc":"For the — our candidate for — to be limiting, we must, given some other\ncone , find a unique cone homomorphism . We’ll be fine, though: We can\n(using ) explode into a bunch of cones , each lying over , and use the\nuniversal property of to find cone homs . Assuming these maps assemble\nto a natural transformation , we can show they commute with everything\nin sight:\n","idIdent":"Limits in functor categories\n > The maps\n","idType":null},{"idAnchor":"Cat.Instances.Karoubi.html#karoubi-envelopes","idDesc":"We give a construction of the Karoubi envelope of a precategory , a\nformal construction which adds a choice of splittings for every\nidempotent in . Furthermore, the Karoubi envelope is the smallest\nidempotent-complete category which admits a map from , in the sense that\nany into an idempotent-complete category factors through :\n","idIdent":"Karoubi envelopes\n","idType":null},{"idAnchor":"Cat.Instances.Karoubi.html#idempotent-completeness","idDesc":"We now show that any idempotent admits a splitting in . First, note that\nsince is (by assumption) idempotent, we have an object given by ; We’ll\nsplit as a map\n","idIdent":"Karoubi envelopes\n > Idempotent-completeness\n","idType":null},{"idAnchor":"Cat.Instances.Lift.html#lifting-categories-across-universes","idDesc":"Suppose you have a category with objects in and homs in , but you really\nneed it to have objects in some larger universe and homs in .\nFortunately you can uniformly lift the precategory to this bigger\nuniverse.\n","idIdent":"Lifting categories across universes\n","idType":null},{"idAnchor":"Cat.Instances.Product.html#product-categories","idDesc":"Let and be two precategories; we put no restrictions on their relative\nsizes. Their product category is the category having as object pairs of\nan object and , and the morphisms are pairs of a morphism in and a\nmorphism in . The product category admits two projection functors\n","idIdent":"Product categories\n","idType":null},{"idAnchor":"Cat.Instances.Product.html#univalence","idDesc":"Isomorphisms in functor categories admit a short description, too: They\nare maps which are componentwise isomorphisms. It follows, since paths\nin product types are products of paths in the component types, that the\nproduct of univalent categories is itself a univalent category.\n","idIdent":"Product categories\n > Univalence\n","idType":null},{"idAnchor":"Cat.Instances.Sets.html#the-category-of-sets","idDesc":"We prove that the category of Sets is univalent. Recall that this means\nthat, fixing a set , the type is contractible. We first exhibit a\ncontraction directly, using ua, and then provide an alternative proof in\nterms of univalence for -types.\n","idIdent":"The category of Sets\n","idType":null},{"idAnchor":"Cat.Instances.Sets.html#direct-proof","idDesc":"The direct proof is surprisingly straightforward, in particular because\nthe heavy lifting is done by a plethora of existing lemmas: to turn an\nisomorphism into an equivalence, to reduce dependent paths over ua to\nnon-dependent paths, ≅-pathp to characterise dependent paths in _≅_,\netc.\n","idIdent":"The category of Sets\n > Direct proof\n","idType":null},{"idAnchor":"Cat.Instances.Sets.html#indirect-proof","idDesc":"While the proof above is fairly simple, we can give a different\nformulation, which might be more intuitive. Let’s start by showing that\nthe rearrangement is an equivalence:\n","idIdent":"The category of Sets\n > Indirect proof\n","idType":null},{"idAnchor":"Cat.Instances.Sets.CartesianClosed.html#sets-is-locally-cartesian-closed","idDesc":"We show that the category of Sets is locally cartesian closed, i.e. that\nevery map of Sets induces a functor , which is right adjoint to the base\nchange functor .\n","idIdent":"Sets is (locally) cartesian closed\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#sets-is-cocomplete","idDesc":null,"idIdent":"Sets is cocomplete\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#colimits","idDesc":"Perfectly dually to the construction of limits in , rather than taking\nthe equaliser of a product, we take the coequaliser of a sum. The same\nconsiderations about truncation level that apply for arbitrary\ncoproducts apply to arbitrary colimits: fortunately, the construction of\nset-coequalisers already includes a truncation.\n","idIdent":"Sets is cocomplete\n > Colimits\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Cocomplete.html#coproducts-are-disjoint","idDesc":"As a final lemma, we prove that coproducts in , as constructed above,\nare disjoint. However, this does not apply to arbitrary coproducts; To\nprove that the injections are monomorphisms, we require that the\nindexing type be a set.\n","idIdent":"Coproducts are disjoint\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Complete.html#sets-is-complete","idDesc":"We prove that the category of -sets is -complete for any universe levels\nand . Inverting this to speak of maxima rather than ordering, to admit\nall -limits, we must be in at least the category of -sets, but any extra\nadjustment is also acceptable. So, suppose we have an indexing category\nand a diagram ; Let’s build a limit for it!\n","idIdent":"Sets is complete\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Complete.html#finite-set-limits","idDesc":"For expository reasons, we present the computation of the most famous\nshapes of finite limit (terminal objects, products, pullbacks, and\nequalisers) in the category of sets. All the definitions below are\nredundant, since finite limits are always small, and thus the category\nof sets of any level admits them.\n","idIdent":"Sets is complete\n > Finite set-limits\n","idType":null},{"idAnchor":"Cat.Instances.Sets.Congruences.html#sets-has-effective-quotients","idDesc":null,"idIdent":"Sets has effective quotients\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Cospan.html#the-cospan-category","idDesc":"A cospan in a category is a pair of morphisms with a common codomain. A\nlimit over a diagram with cospan shape is called a pullback.\nCorrespondingly, to encode such diagrams, we have a “cospan category” .\nThe dual of this category, which looks like , is the “span” category.\nColimits over a span are called pushouts.\n","idIdent":"The “cospan” category\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Interval.html#interval-category","idDesc":"The interval category is the category with two points, called (as a form\nof endearment) and , and a single arrow between them. Correspondingly,\nin shorthand this category is referred to as . Since it has a single\n(non-trivial) arrow, it is a preorder; In fact, it is the preorder\ngenerated by the type of booleans and the natural ordering on them, with\n.\n","idIdent":"Interval category\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Interval.html#meets","idDesc":"Note that the category is finitely complete (i.e. it is bounded, and has\nbinary meets for every pair of elements): The top element is (go\nfigure), and meets are given by the boolean “and” function”.\n","idIdent":"Interval category\n > Meets\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Interval.html#the-space-of-arrows","idDesc":"The total space of the family of a precategory is referred to as its\n“space of arrows”. A point in this space is a “free-standing arrow”: it\ncomes equipped with its own domain and codomain. We note that, since a\nprecategory has no upper bound on the h-level of its space of objects,\nits space of arrows also need not be particularly truncated. However,\nfor a thin category it is a set, and for a univalent category it is a\ngroupoid.\n","idIdent":"The space of arrows\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Join.html#join-of-categories","idDesc":"The join of two categories is the category obtained by “bridging” the\ndisjoint union with a unique morphism between each object of and each\nobject of .\n","idIdent":"Join of categories\n","idType":null},{"idAnchor":"Cat.Instances.Shape.Parallel.html#the-parallel-arrows-category","idDesc":"The parallel arrows category is the category with two objects, and two\nparallel arrows between them. It is the shape of equaliser and\ncoequaliser diagrams.\n","idIdent":"The “parallel arrows” category\n","idType":null},{"idAnchor":"Cat.Instances.Slice.html#slice-categories","idDesc":"When working in , there is an evident notion of family indexed by a set:\na family of sets is equivalently a functor , where we have equipped the\nset with the discrete category structure. This works essentially because\nof the discrete category-global sections adjunction, but in general this\ncan not be applied to other categories, like . How, then, should we work\nwith “indexed families” in general categories?\n","idIdent":"Slice categories\n","idType":null},{"idAnchor":"Cat.Instances.Slice.html#limits","idDesc":"We discuss some limits in the slice of over . First, every slice\ncategory has a terminal object, given by the identity map .\n","idIdent":"Slice categories\n > Limits\n","idType":null},{"idAnchor":"Cat.Instances.Slice.html#slices-of-sets","idDesc":"We now prove the correspondence between slices of and functor categories\ninto , i.e. the corresponding between indexing and slicing mentioned in\nthe first paragraph.\n","idIdent":"Slices of Sets\n","idType":null},{"idAnchor":"Cat.Instances.Slice.html#slices-preserve-univalence","idDesc":"An important property of slice categories is that they preserve\nunivalence. This can be seen intuitively: If is a univalent category,\nthen let be some objects, with the pairs and objects in the slice . An\nisomorphism induces an identification , which extends to an\nidentification since .\n","idIdent":"Slices preserve univalence\n","idType":null},{"idAnchor":"Cat.Instances.Slice.html#arbitrary-limits-in-slices","idDesc":"Suppose we have some really weird diagram , like the one below. Well,\nalright, it’s not that weird, but it’s not a pullback or a terminal\nobject, so we don’t a priori know how to compute it.\n","idIdent":"Arbitrary limits in slices\n","idType":null},{"idAnchor":"Cat.Instances.Slice.Presheaf.html#slices-of-presheaf-categories","idDesc":"We prove that slices of a presheaf category are again presheaf\ncategories. Specifically, for a presheaf, we have an isomorphism , where\ndenotes the category of elements of .\n","idIdent":"Slices of presheaf categories\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.html#strict-precategories","idDesc":"We call a precategory strict if its space of objects is a Set. While\ngeneral precategories are too homotopically interesting to fit into a\n(because functor spaces will not, in general, be h-sets), the strict\ncategories do form a precategory, which we denote .\n","idIdent":"Strict precategories\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.html#products","idDesc":"We prove that has products. This is because is , and h-levels are closed\nunder products.\n","idIdent":"Strict precategories\n > Products\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#strict-cat-is-cohesive","idDesc":"We prove that the category admits an adjoint quadruple\n","idIdent":"Strict-Cat is “cohesive”\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#disc-γ","idDesc":"We begin by defining the object set functor.\n","idIdent":"Disc ⊣ Γ\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#γ-codisc","idDesc":"The codiscrete category on a set is the strict category with object\nspace , and all hom-spaces contractible. The assignment of codiscrete\ncategories extends to a functor , where we lift functions to act on\nobject parts and the action on morphisms is trivial.\n","idIdent":"Γ ⊣ Codisc\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#object-set-vs-global-sections","idDesc":"Above, we defined the functor by directly projecting the underlying set\nof each category. Normally in the definition of a cohesion structure, we\nuse the global sections functor which maps (where is the terminal\nobject). Here we prove that these functors are naturally isomorphic, so\nour abbreviation above is harmless.\n","idIdent":"Γ ⊣ Codisc\n > Object set vs global sections\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#connected-components","idDesc":"The set of connected components of a category is the quotient of the\nobject set by the “relation” generated by the sets. This is not a\nrelation because takes values in sets, not propositions; Thus the\nquotient forgets precisely how objects are connected. This is\nintentional!\n","idIdent":"Connected components\n","idType":null},{"idAnchor":"Cat.Instances.StrictCat.Cohesive.html#pieces-have-points","idDesc":"An important property of the cohesive quadruple defined above is that\nthe canonically-defined natural morphism is surjective, i.e. each piece\nhas at least one point.\n","idIdent":"Connected components\n > Pieces have points\n","idType":null},{"idAnchor":"Cat.Instances.Twisted.html#twisted-arrow-categories","idDesc":"The category of arrows of is the category which has objects given by\nmorphisms [1], and morphisms given by pairs as indicated making the\ndiagram below commute.\n\n[1] We will metonymically refer to the triple using simply .\n","idIdent":"Twisted arrow categories\n","idType":null},{"idAnchor":"Cat.Morphism.html#morphisms","idDesc":"This module defines the three most important classes of morphisms that\ncan be found in a category: monomorphisms, epimorphisms, and\nisomorphisms.\n","idIdent":"Morphisms\n","idType":null},{"idAnchor":"Cat.Morphism.html#monos","idDesc":"A morphism is said to be monic when it is left-cancellable. A\nmonomorphism from to , written , is a monic morphism.\n","idIdent":"Morphisms\n > Monos\n","idType":null},{"idAnchor":"Cat.Morphism.html#epis","idDesc":null,"idIdent":"Morphisms\n > Epis\n","idType":null},{"idAnchor":"Cat.Morphism.html#isos","idDesc":"Maps and are inverses when we have and both equal to the identity. A map\nis invertible (or is an isomorphism) when there exists a for which and\nare inverses. An isomorphism is a choice of map , together with a\nspecified inverse.\n","idIdent":"Morphisms\n > Isos\n","idType":null},{"idAnchor":"Cat.Reasoning.html#reasoning-combinators-for-categories","idDesc":"When doing category theory, we often have to perform many “trivial”\nalgebraic manipulations like reassociation, insertion of identity\nmorphisms, etc. On paper we can omit these steps, but Agda is a bit more\npicky! We could just do these steps in our proofs one after another, but\nthis clutters things up. Instead, we provide a series of reasoning\ncombinators to make writing (and reading) proofs easier.\n","idIdent":"Reasoning Combinators for Categories\n","idType":null},{"idAnchor":"Cat.Reasoning.html#identity-morphisms","idDesc":null,"idIdent":"Reasoning Combinators for Categories\n > Identity Morphisms\n","idType":null},{"idAnchor":"Cat.Reasoning.html#reassocations","idDesc":"We often find ourselves in situations where we have an equality\ninvolving the composition of 2 morphisms, but the association is a bit\noff. These combinators aim to address that situation.\n","idIdent":"Reasoning Combinators for Categories\n > Reassocations\n","idType":null},{"idAnchor":"Cat.Reasoning.html#cancellation","idDesc":"These lemmas do 2 things at once: rearrange parenthesis, and also remove\nthings that are equal to id.\n","idIdent":"Reasoning Combinators for Categories\n > Cancellation\n","idType":null},{"idAnchor":"Cat.Reasoning.html#isomorphisms","idDesc":"These lemmas are useful for proving that partial inverses to an\nisomorphism are unique. There’s a helper for proving uniqueness of left\ninverses, of right inverses, and for proving that any left inverse must\nmatch any right inverse.\n","idIdent":"Reasoning Combinators for Categories\n > Isomorphisms\n","idType":null},{"idAnchor":"Cat.Reasoning.html#notation","idDesc":"When doing equational reasoning, it’s often somewhat clumsy to have to\nwrite ap (f ∘_) p when proving that f ∘ g ≡ f ∘ h. To fix this, we\ndefine steal some cute mixfix notation from agda-categories which allows\nus to write ≡⟨ refl⟩∘⟨ p ⟩ instead, which is much more aesthetically\npleasing!\n","idIdent":"Reasoning Combinators for Categories\n > Notation\n","idType":null},{"idAnchor":"Cat.Solver.html#solver-for-categories","idDesc":"This module is split pretty cleanly into two halves: the first half\nimplements an algorithm for reducing, in a systematic way, problems\ninvolving associativity and identity of composition in a precategory.\nThe latter half, significantly more cursed, uses this infrastructure to\nautomatically solve equality goals of this form.\n","idIdent":"Solver for Categories\n","idType":null},{"idAnchor":"Cat.Solver.html#the-cursed-part","idDesc":"Now we hook up to an Agda macro. Like all metaprogramming, it’s not\npretty, but I’ve written comments around it to hopefully explain things\na bit.\n","idIdent":"The cursed part\n","idType":null},{"idAnchor":"Cat.Solver.html#demo","idDesc":"As a quick demonstration (and sanity check/future proofing/integration\ntesting/what have you):\n","idIdent":"The cursed part\n > Demo\n","idType":null},{"idAnchor":"Cat.Thin.html#thin-categories","idDesc":"A category is called thin if all of its hom-sets are propositions rather\nthan sets. Furthermore, we require that the space of objects be a set;\nIn other words, a thin category is necessarily strict.\n","idIdent":"Thin categories\n","idType":null},{"idAnchor":"Cat.Thin.html#posets","idDesc":"We refer to a [univalent] category as a poset, short for\npartially-ordered set. Recall that a category is univalent when the type\nis contractible for any fixed or (more useful here) we have a function\nsending the identity isomorphism to .\n","idIdent":"Posets\n","idType":null},{"idAnchor":"Cat.Thin.html#making-posets","idDesc":"Rijke’s theorem says that any type equipped with a reflexive relation\nwhich implies is automatically a set. If is a reflexive, antisymmetric\nrelation, we can take the relation , which is evidently reflexive and,\nby antisymmetry, implies .\n","idIdent":"Posets\n > Making posets\n","idType":null},{"idAnchor":"Cat.Thin.html#monotone-maps","idDesc":"Rather than considering functors between posets, we can consider\nmonotone maps between them. This is because, since each hom-set is a\nproposition, the functor identities are automatically satisfied:\n","idIdent":"Posets\n > Monotone maps\n","idType":null},{"idAnchor":"Cat.Thin.html#prosetal-reflection","idDesc":"There is an evident functor from to given by forgetting the thinness\ndata. This functor is ff., since maps between prosets are functors\nbetween strict categories: it acts on morphisms literally by the\nidentity function.\n","idIdent":"Prosetal reflection\n","idType":null},{"idAnchor":"Cat.Thin.html#poset-completions","idDesc":"It’s also possible to freely turn a proset into a poset. We do this in a\nseparate module: Cat.Thin.Completion.\n","idIdent":"Prosetal reflection\n > Poset completions\n","idType":null},{"idAnchor":"Cat.Thin.Completion.html#poset-completion","idDesc":"We construct a universal completion of a proset to a poset. Initially,\nrecall the terms. A proset (which is how we refer to strict, thin\ncategories) is a set equipped with a relation which is both reflexive\nand transitive, but not necessarily antisymmetric. A poset augments this\nwith the requirement that is antisymmetric: It’s a univalent thin\ncategory.\n","idIdent":"Poset completion\n","idType":null},{"idAnchor":"Cat.Thin.Completion.html#embedding","idDesc":"There is a functor between the underlying category of a proset and the\nunderlying category of its completion , with object part given by the\nquotient map .\n","idIdent":"Poset completion\n > Embedding\n","idType":null},{"idAnchor":"Cat.Thin.Completion.html#lifting-functors","idDesc":"We prove that any functor lifts to a functor between the respective\nposet completions. The hardest part of the construction is showing that\n, i.e. the action of on the objects of , respects the quotient which\ndefines .\n","idIdent":"Poset completion\n > Lifting functors\n","idType":null},{"idAnchor":"Cat.Thin.Instances.Sub.html#preorders-of-subobjects","idDesc":"Let be a category (like the category ), and be an object. We know that\nthe monomorphisms into correspond to embeddings (though often we’re\ninterested in the regular subobjects instead) of into . In , we have a\ntype — not an object of the category due to size reasons — which\nclassifies these embeddings, so we can either look at or as the family\nit generates. In other categories, such as Groups, we’re not so lucky:\nthere’s no such thing as a “subgroup classifier”.\n","idIdent":"Preorders of Subobjects\n","idType":null},{"idAnchor":"Cat.Thin.Instances.Sub.html#constructions-on-subobjects","idDesc":null,"idIdent":"Preorders of Subobjects\n > Constructions on subobjects\n","idType":null},{"idAnchor":"Cat.Thin.Limits.html#limits-in-prosets","idDesc":"Suppose a proset admits all indexed products. Then it also admits all\nlimits, where the limit of an arbitrary is taken to be the indexed\nproduct over the space of objects of .\n","idIdent":"Limits in prosets\n","idType":null},{"idAnchor":"Cat.Thin.Limits.html#limits-for-less","idDesc":"The data of an indexed product can be made a lot less verbose when\ndealing with a thin category, since the commutativity data is free:\n","idIdent":"Limits in prosets\n > Limits for less\n","idType":null},{"idAnchor":"Cat.Thin.Limits.html#colimits-in-prosets","idDesc":"Dualising the discussion above, colimits in prosets correspond to\nindexed coproducts. I won’t comment on this part of the code since it is\nentirely given by flipping arrows around and fixing names of record\nfields.\n","idIdent":"Colimits in prosets\n","idType":null},{"idAnchor":"Cat.Univalent.html#univalent-categories","idDesc":"In much the same way that a partial order is a preorder where , a\ncategory is a precategory where isomorphic objects are identified. This\nis a generalisation of the univalence axiom to arbitrary categories,\nand, indeed, it’s phrased in the same way: asking for a canonically\ndefined map to be an equivalence.\n","idIdent":"(Univalent) Categories\n","idType":null},{"idAnchor":"Cat.Univalent.Instances.Algebra.html#eilenberg-moore-categories","idDesc":"Given a base univalent category , we can consider a monad on , and its\nassociated Eilenberg-Moore category , as a standard way of constructing\ncategories of “algebraic gadgets” backed by objects of . A concrete\nexample is given by the category of monoids: A monoid (in sets) is\nequivalent to an algebra for the list monad.\n","idIdent":"Eilenberg-Moore Categories\n","idType":null},{"idAnchor":"Cat.Univalent.Rezk.html#the-rezk-completion","idDesc":"In the same way that we can freely complete a proset into a poset, it is\npossible to, in a universal way, replace any precategory by a category ,\nsuch that there is a weak equivalence (a fully faithful, essentially\nsurjective functor) , such that any map from to a univalent category\nfactors uniquely through .\n","idIdent":"The Rezk completion\n","idType":null},{"idAnchor":"Data.Bool.html#the-booleans","idDesc":"The type of booleans is interesting in homotopy type theory because it\nis the simplest type where its automorphisms in are non-trivial. In\nparticular, there are two: negation, and the identity.\n","idIdent":"The Booleans\n","idType":null},{"idAnchor":"Data.Bool.html#basic-algebraic-properties","idDesc":"The booleans form a Boolean algebra, as one might already expect, given\nits name. The operations required to define such a structure are\nstraightforward to define using pattern matching:\n","idIdent":"The Booleans\n > Basic algebraic properties\n","idType":null},{"idAnchor":"Data.Bool.html#discreteness","idDesc":"Using pattern matching, and the fact that , one can write an algorithm\nto tell whether or not two booleans are the same:\n","idIdent":"The Booleans\n > Discreteness\n","idType":null},{"idAnchor":"Data.Bool.html#the-not-equivalence","idDesc":"The construction of as an equivalence factors through showing that not\nis an isomorphism. In particular, is its own inverse, so we need a proof\nthat it’s involutive, as is proven in . With this, we can get a proof\nthat it’s an equivalence:\n","idIdent":"The Booleans\n > The “not” equivalence\n","idType":null},{"idAnchor":"Data.Bool.html#autbool","idDesc":"We characterise the type Bool ≡ Bool. There are exactly two paths, and\nwe can decide which path we’re looking at by seeing how it acts on the\nelement .\n","idIdent":"The Booleans\n > Aut(Bool)\n","idType":null},{"idAnchor":"Data.Fin.html#finite-sets---index","idDesc":"The natural numbers are constructed in the module Data.Fin.Base. Their\narithmetical properties are proved in Data.Fin.Properties.\n","idIdent":"Finite Sets - Index\n","idType":null},{"idAnchor":"Data.Fin.Base.html#finite-sets","idDesc":"The type is the type of size n. These are defined as an inductive family\nover , such that Fin 0 has 0 elements, Fin 1 has 1 element, and so on.\n","idIdent":"Finite Sets\n","idType":null},{"idAnchor":"Data.Fin.Base.html#discreteness","idDesc":"The proof here mirrors the one found in Data.Nat.Base, just with some\nslight tweaks required to handle the indexing.\n","idIdent":"Finite Sets\n > Discreteness\n","idType":null},{"idAnchor":"Data.Fin.Base.html#ordering","idDesc":"Keeping with the view that represents the type of bounded natural\nnumbers, we can re-use the ordering on to induce an ordering on . This\nlets us repurpose any lemmas on ≤ to also operate on .\n","idIdent":"Finite Sets\n > Ordering\n","idType":null},{"idAnchor":"Data.Fin.Base.html#as-a-subset","idDesc":"While is very conveniently defined as an indexed family of types, it can\nalso be defined as a subset of the natural numbers: Namely, the finite\nordinal is the same type as as . This makes sense! Any set with elements\nis equivalent to any other set with elements, and a very canonical\nchoice is the first values of .\n","idIdent":"Finite Sets\n > As a subset\n","idType":null},{"idAnchor":"Data.Fin.Base.html#arithmetic","idDesc":null,"idIdent":"Finite Sets\n > Arithmetic\n","idType":null},{"idAnchor":"Data.Fin.Closure.html#closure-of-finite-sets","idDesc":"In this module, we prove that the finite sets are closed under “typal\narithmetic”: The initial and terminal objects are finite (they have 1\nand 0 elements respectively), products of finite sets are finite,\ncoproducts of finite sets are finite, and functions between finite sets\nare finite. Moreover, these operations all correspond to arithmetic\noperations on the natural number indices: , etc.\n","idIdent":"Closure of finite sets\n","idType":null},{"idAnchor":"Data.Fin.Closure.html#zero-one-successors","idDesc":"The finite set is an initial object, and the finite set is a terminal\nobject:\n","idIdent":"Closure of finite sets\n > Zero, one, successors\n","idType":null},{"idAnchor":"Data.Fin.Closure.html#addition","idDesc":"For binary coproducts, we prove the correspondence with addition in\nsteps, to make the proof clearer:\n","idIdent":"Closure of finite sets\n > Addition\n","idType":null},{"idAnchor":"Data.Fin.Closure.html#sums","idDesc":"We also have a correspondence between “coproducts” and “addition” in the\niterated case: If you have a family of finite types (represented by a\nmap to their cardinalities), the dependent sum of that family is\nequivalent to the iterated binary of the cardinalities:\n","idIdent":"Closure of finite sets\n > Addition\n > Sums\n","idType":null},{"idAnchor":"Data.Fin.Closure.html#multiplication","idDesc":"Recall (from middle school) that the product is the same thing as\nsumming together copies of the number . Correspondingly, we can use the\ntheorem above for general sums to establish the case of binary products:\n","idIdent":"Closure of finite sets\n > Multiplication\n","idType":null},{"idAnchor":"Data.Fin.Properties.html#finite-sets---properties","idDesc":null,"idIdent":"Finite Sets - Properties\n","idType":null},{"idAnchor":"Data.Fin.Properties.html#ordering","idDesc":"As noted in Data.Fin.Base, we’ve set up the ordering on Fin so that we\ncan re-use all the proofs about the ordering on Nat.\n","idIdent":"Finite Sets - Properties\n > Ordering\n","idType":null},{"idAnchor":"Data.Int.html#integers","idDesc":"The integers are what you get when you complete the additive monoid\nstructure on the naturals into a group. In non-cubical Agda, a\nrepresentation of the integers as a coproduct with one of the factors\noffset (to avoid having two zeroes) is adopted. In Cubical Agda we can\nadopt a representation much closer to a “classical” construction of the\nintegers:\n","idIdent":"Integers\n","idType":null},{"idAnchor":"Data.Int.html#canonical-representatives","idDesc":"Initially, we note that the type of integers admits a surjection from\nthe type , given by sending each pair of naturals to their difference.\n","idIdent":"Integers\n > Canonical representatives\n","idType":null},{"idAnchor":"Data.Int.html#recursion","idDesc":"If we want to define a map , it suffices to give a function which\nrespects the quotient, in the following sense:\n","idIdent":"Recursion\n","idType":null},{"idAnchor":"Data.Int.html#algebra","idDesc":"With these recursion and elimination helpers, it becomes routine to lift\nthe algebraic operations from naturals to integers:\n","idIdent":"Algebra\n","idType":null},{"idAnchor":"Data.Int.html#successors","idDesc":"The simplest “algebraic operation” on an integer is taking its\nsuccessor. In fact, the integers are characterised by being the free\ntype with an equivalence - that equivalence being “successor”.\n","idIdent":"Algebra\n > Successors\n","idType":null},{"idAnchor":"Data.Int.html#addition","idDesc":null,"idIdent":"Algebra\n > Addition\n","idType":null},{"idAnchor":"Data.Int.html#inverses","idDesc":"Every integer has an additive inverse, denoted , which is obtained by\nswapping the components of the pair. Since the definition of is very\nsimple, it can be written conveniently without using :\n","idIdent":"Algebra\n > Inverses\n","idType":null},{"idAnchor":"Data.Int.html#multiplication","idDesc":"We now prove that the integers are a ring, i.e. that there is a\nmultiplication operation with 1 as a left/right identity, which is\nassociative, and additionally distributes over addition on both the left\nand the right. It’s also commutative — so is a commutative ring.\n","idIdent":"Algebra\n > Multiplication\n","idType":null},{"idAnchor":"Data.Int.Inductive.html#inductive-integers","idDesc":"The inductive integers (or built-in integers) are the type generated by\nthe two constructors and , as below, but without the primes:\n","idIdent":"Inductive Integers\n","idType":null},{"idAnchor":"Data.List.html#lists","idDesc":"A list is a finite, ordered sequence of elements of some type. Lists are\nan inductive type, as an Agda builtin. Here, we echo the definition for\nclarity:\n","idIdent":"Lists\n","idType":null},{"idAnchor":"Data.List.html#path-space","idDesc":"We begin by characteristing the behaviour of paths of lists. For\ninstance, is injective in both its arguments:\n","idIdent":"Lists\n > Path Space\n","idType":null},{"idAnchor":"Data.List.html#lemmas","idDesc":"Continuing with the useful lemmas, if the heads and tails of two lists\nare identified, then the lists themselves are identified:\n","idIdent":"Lists\n > Lemmas\n","idType":null},{"idAnchor":"Data.Nat.html#natural-numbers---index","idDesc":"The natural numbers are constructed in the module Data.Nat.Base. Their\narithmetical properties are proved in Data.Nat.Properties.\n","idIdent":"Natural Numbers - Index\n","idType":null},{"idAnchor":"Data.Nat.Base.html#natural-numbers","idDesc":"The natural numbers are the inductive type generated by and closed under\ntaking cessors. Thus, they satisfy the following induction principle,\nwhich is familiar:\n","idIdent":"Natural Numbers\n","idType":null},{"idAnchor":"Data.Nat.Base.html#discreteness","idDesc":"An interesting property of the natural numbers, type-theoretically, is\nthat they are discrete: given any pair of natural numbers, there is an\nalgorithm that can tell you whether or not they are equal. First,\nobserve that we can zero from successor:\n","idIdent":"Natural Numbers\n > Discreteness\n","idType":null},{"idAnchor":"Data.Nat.Base.html#arithmetic","idDesc":null,"idIdent":"Natural Numbers\n > Arithmetic\n","idType":null},{"idAnchor":"Data.Nat.Base.html#ordering","idDesc":"We define the order relation on the natural numbers by recursion:\n","idIdent":"Natural Numbers\n > Ordering\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#natural-numbers---properties","idDesc":"This module contains proofs of arithmetic identities for the natural\nnumbers. Since they’re mostly simple inductive arguments written in\nequational reasoning style, they are very lightly commented:\n","idIdent":"Natural Numbers - Properties\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#addition","idDesc":null,"idIdent":"Natural Numbers - Properties\n > Addition\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#multiplication","idDesc":null,"idIdent":"Natural Numbers - Properties\n > Multiplication\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#exponentiation","idDesc":null,"idIdent":"Natural Numbers - Properties\n > Exponentiation\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#ordering","idDesc":"The ordering relation on the natural numbers is a partial order:\n","idIdent":"Natural Numbers - Properties\n > Ordering\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#compatibility","idDesc":"The order relation on the natural numbers is also compatible with the\narithmetic operators:\n","idIdent":"Natural Numbers - Properties\n > Ordering\n > Compatibility\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#maximum","idDesc":null,"idIdent":"Natural Numbers - Properties\n > Ordering\n > Maximum\n","idType":null},{"idAnchor":"Data.Nat.Properties.html#minimum","idDesc":null,"idIdent":"Natural Numbers - Properties\n > Ordering\n > Minimum\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#the-nat-solver","idDesc":"This module defines a solver for equations in the commutative semiring\nof natural numbers. Our approach splits cleanly into 3 distinct parts:\n","idIdent":"The Nat Solver\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#horner-normal-forms","idDesc":"If we ignore the and constructors, and their respective equations, the\ncore problem at hand is trying to compute normal forms for polynomials.\nLuckily, like most problems involving polynomials, this has been\nthoroughly studied! There are many possible normal forms to choose from,\nbut the most useful for our task is Horner normal form, as it admits a\nparticularly nice inductive characterization.\n","idIdent":"The Nat Solver\n > Horner Normal Forms\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#operations-on-horner-normal-forms","idDesc":"Now, let’s define a handful of functions for constructing and combining\npolynomials. The naming here can get a bit confusing, so let’s stick\nwith the convention of adding a subscript p to denote an operation on\npolynomials. As a further note, the entire following section could be\ngeneralized work over an arbitrary semiring, but this would complicate\nthe dependency graph somewhat, so we stick to natural numbers.\n","idIdent":"The Nat Solver\n > Horner Normal Forms\n > Operations on Horner Normal Forms\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#evaluation-of-horner-normal-forms","idDesc":"Multivariate polynomials represent functions , so we should be able to\ninterpret them as such. Luckily, Horner Normal Forms are extremely easy\nto evaluate. As a historical note, this is why this representation was\ncreated in first place! In this light, they should probably be called\n“Sharaf al-Din al-Tusi normal forms”.\n","idIdent":"The Nat Solver\n > Horner Normal Forms\n > Evaluation of Horner Normal Forms\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#soundness-of-the-operations","idDesc":"Now, it’s important that the operations we defined actually denote the\ncorrect operations on natural numbers. As a warm up, let’s show that the\nzero polynomial really represents the function .\n","idIdent":"The Nat Solver\n > Horner Normal Forms\n > Soundness of the Operations\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#evaluation-into-polynomials","idDesc":"Now that we’ve gotten the first phase of the solver done, let’s move on\nto expressions in the language of natural numbers. Our first move shall\nbe defining expressions in the equational theory of natural numbers.\n","idIdent":"The Nat Solver\n > Evaluation into Polynomials\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#soundness-of-evaluation","idDesc":"With all of that machinery in place, our final proof shall be to show\nthat evaluating an expression into a polynomial has the same semantics\nas the original expression. Luckily, most of the legwork is already\ndone, so we can sit back and enjoy the fruits of our labour.\n","idIdent":"The Nat Solver\n > Evaluation into Polynomials\n > Soundness of Evaluation\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#reflection","idDesc":"Now, for the truly difficult part: the reflection interface. We begin by\ndefining some pattern synonyms for expressions we want to reflect into\nour type.\n","idIdent":"The Nat Solver\n > Reflection\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#the-actual-macros","idDesc":"Now, the actual reflection API calls. In order to keep drawing this file\nout, we start by defining some useful debugging macros. As we noted a\nlooong time ago, we don’t want to unfold the or functions, so let’s make\na list of those names so that we can call more easily.\n","idIdent":"The Nat Solver\n > Reflection\n > The Actual Macros\n","idType":null},{"idAnchor":"Data.Nat.Solver.html#examples","idDesc":"Congratulations! We now have a solver. Let’s marvel at all of our hard\nwork for a moment.\n","idIdent":"Examples\n","idType":null},{"idAnchor":"Data.Power.html#power-sets","idDesc":"The power set of a type is the collection of all maps from into the\nuniverse of . Since the universe of all -types is a -type (by\nn-Type-is-hlevel), and function types have the same h-level as their\ncodomain (by fun-is-hlevel), the power set of a type is always . We\ndenote the power set of by .\n","idIdent":"Power Sets\n","idType":null},{"idAnchor":"Data.Power.html#lattice-structure","idDesc":"The type has a lattice structure, with the order given by . We call the\nmeets and the joins .\n","idIdent":"Power Sets\n > Lattice Structure\n","idType":null},{"idAnchor":"Data.Power.Lattice.html#lattice-of-subobjects","idDesc":"The of a type can be organised into a lattice, where the meets of two\nsubsets are given by their intersection and the joins are given by their\nunion . Furthermore, we prove that the ordering induced by this lattice\nis the same as the subset inclusion ordering.\n","idIdent":"Lattice of Subobjects\n","idType":null},{"idAnchor":"Data.Power.Lattice.html#completeness","idDesc":"The lattice of powersets of a type is complete, since it admits\narbitrary meets. The meet of a family is the subset represented by ,\ni.e., the set of elements present in all the subsets in the family.\n","idIdent":"Lattice of Subobjects\n > Completeness\n","idType":null},{"idAnchor":"Data.Set.Coequaliser.html#set-coequalisers","idDesc":"In their most general form, colimits can be pictured as taking disjoint\nunions and then “gluing together” some parts. The “gluing together” part\nof that definition is where coequalisers come in: If you have parallel\nmaps , then the coequaliser can be thought of as “, with the images of\nand identified”.\n","idIdent":"Set Coequalisers\n","idType":null},{"idAnchor":"Data.Set.Coequaliser.html#elimination","idDesc":"Above, we defined what it means to define a dependent function when is a\nfamily of propositions, and what it means to define a non-dependent\nfunction . Now, we combine the two notions, and allow dependent\nelimination into families of sets:\n","idIdent":"Elimination\n","idType":null},{"idAnchor":"Data.Set.Coequaliser.html#quotients","idDesc":"With dependent sums, we can recover quotients as a special case of\ncoequalisers. Observe that, by taking the total space of a relation , we\nobtain two projection maps which have as image all of the possible\nrelated elements in . By coequalising these projections, we obtain a\nspace where any related objects are identified: The quotient .\n","idIdent":"Quotients\n","idType":null},{"idAnchor":"Data.Set.Coequaliser.html#effectivity","idDesc":"The most well-behaved case of quotients is when takes values in\npropositions, is reflexive, transitive and symmetric (an equivalence\nrelation). In this case, we have that the quotient is effective: The map\nis an equivalence.\n","idIdent":"Quotients\n > Effectivity\n","idType":null},{"idAnchor":"Data.Set.Truncation.html#set-truncation","idDesc":"Exactly analogously to the construction of propositional truncations, we\ncan construct the set truncation of a type, reflecting it onto the\nsubcategory of sets. Just like the propositional truncation is\nconstructed by attaching enough lines to a type to hide away all\ninformation other than “is the type inhabited”, the set truncation is\nconstructed by attaching enough square to kill off all homotopy groups.\n","idIdent":"Set truncation\n","idType":null},{"idAnchor":"Data.Sum.html#sum-types","idDesc":"Sum types are one of the fundamental ingredients of type theory. They\nplay a dual role to the product type; if products allow us to state that\nwe have elements of two types simultaneously, sum types allow us to\nstate that we have an element of one of two types.\n","idIdent":"Sum Types\n","idType":null},{"idAnchor":"Data.Sum.html#universal-properties","idDesc":"One of the most important things about sum types is the following\nproperty: given two functions A → C and B → C, we can construct a\nfunction A ⊎ B → C.\n","idIdent":"Sum Types\n > Universal Properties\n","idType":null},{"idAnchor":"Data.Sum.html#transformations","idDesc":"Let’s move away from the abstract nonsense of universal properties for a\nbit, and cleanse our pallate with some small helper functions for\nmapping between sum types.\n","idIdent":"Sum Types\n > Transformations\n","idType":null},{"idAnchor":"Data.Sum.html#decidablity","idDesc":"This type has a very similar structure to Dec, so we provide some\nhelpers to convert between the two.\n","idIdent":"Sum Types\n > Decidablity\n","idType":null},{"idAnchor":"Data.Sum.html#closure-under-h-levels","idDesc":"If and are -types, for , then so is their coproduct. The way we prove\nthis is by characterising the entire path space of A ⊎ B in terms of the\npath spaces for A and B, using a recursive definition:\n","idIdent":"Sum Types\n > Closure under h-levels\n","idType":null},{"idAnchor":"Data.Sum.html#closure-under-equivalences","idDesc":"Univalence automatically implies that all type formers respect\nequivalences. However, the proof using univalence is restricted to types\nof the same universe level. Thus, : Coproducts respect equivalences in\nboth arguments, across levels.\n","idIdent":"Sum Types\n > Closure under equivalences\n","idType":null},{"idAnchor":"Data.Sum.html#algebraic-properties","idDesc":"Considered as an algebraic operator on types, the coproduct satisfies\nmany of the same properties of addition. Specifically, when restricted\nto finite types, the coproduct is exactly the same as addition.\n","idIdent":"Sum Types\n > Algebraic properties\n","idType":null},{"idAnchor":"Relation.Order.html#order-relations","idDesc":"This module characterises different types of binary relations, and, in\nparticular, ordering relations.\n","idIdent":"Order relations\n","idType":null},{"idAnchor":"Relation.Order.html#partial-orders","idDesc":"A partial order is a preorder which, in addition, is antisymmetric:\n","idIdent":"Order relations\n > Partial Orders\n","idType":null},{"idAnchor":"Relation.Order.html#trichotomous-orders","idDesc":"We say a relation is trichotomous for all x,y if exactly one of R x y,\nx ≡ y, or R y x holds. We define this in two parts: First we define what\ntrichotomy means for 2 elements via Tri, then Trichotomous in terms of\nTri.\n","idIdent":"Order relations\n > Trichotomous orders\n","idType":null},{"idAnchor":"Relation.Order.Lexicographic.html#lexicographic-orderings","idDesc":"A Lexicographic Ordering can be thought of as a generalization of how we\nsort words. For instance, if we were to look up “math” in the\ndictionary, it would come before “mathematician”, but after “cube”. By\ngeneralizing the order in question, we can get a notion of ordering for\nany arbitrary list, instead of being restricted to lists of characters.\n","idIdent":"Lexicographic Orderings\n","idType":null},{"idAnchor":"Relation.Order.Lexicographic.html#lemmas","idDesc":"In order to prove further results, we are going to need a handful of\nlittle lemmas. First, let’s show that if the head xs is greater than the\nhead of ys, then then xs cannot be smaller than ys:\n","idIdent":"Lexicographic Orderings\n > Lemmas\n","idType":null},{"idAnchor":"Relation.Order.Lexicographic.html#trichotomy","idDesc":"Note that we have provided a non-strict version! This means the relation\nis irreflexive rather than reflexive. There’s a good reason for doing\nso: it makes the relation trichotomous.\n","idIdent":"Lexicographic Orderings\n > Trichotomy\n","idType":null},{"idAnchor":"Topoi.Base.html#grothendieck-topoi","idDesc":"Topoi are an abstraction introduced by Alexander Grothendieck in the\n1960s as a generalisation of topological spaces, suitable for his work\nin algebraic geometry. Later (in the work of William Lawvere, and even\nlater Myles Tierney), topoi found a new life as “categories with a nice\ninternal logic”, which mirrors that of the category . Perhaps\nsurprisingly, every Grothendieck topos is also a topos in their logical\nconception (called elementary); Since elementary topoi are very hard to\ncome by predicatively, we formalise a particular incarnation of\nGrothendieck’s notion here.\n","idIdent":"Grothendieck topoi\n","idType":null},{"idAnchor":"Topoi.Base.html#as-generalised-spaces","idDesc":"I’ll echo here the standard definition of topological space, but due to\npersonal failings I can’t motivate it. A topological space consists of a\nset of points , and a topology , a subset of its powerset which is\nclosed under arbitrary unions and finite intersections.\n","idIdent":"Grothendieck topoi\n > As generalised spaces\n","idType":null},{"idAnchor":"Topoi.Base.html#as-categories-of-spaces","idDesc":"Another perspective on topoi is that they are categories of spaces,\nrather than spaces themselves. We start by looking at presheaf topoi, .\nThe coyoneda lemma tells us that every presheaf is a colimit of\nrepresentables, which can be restated in less abstract terms by saying\nthat presheaves are instructions for gluing together objects of . The\nobjects of are then interpreted as “primitive shapes”, and the maps in\nare interpreted as “maps to glue against”.\n","idIdent":"Grothendieck topoi\n > As categories of spaces\n","idType":null},{"idAnchor":"Topoi.Base.html#as-logically-nice-categories","idDesc":"The definition of topos implies that any topos enjoys many of the same\ncategorical properties of the category (see below). Topoi are complete\nand cocomplete, cartesian closed (even locally so) — colimits are stable\nunder pullback, coproducts are disjoint, and equivalence relations are\neffective.\n","idIdent":"Grothendieck topoi\n > As “logically nice” categories\n","idType":null},{"idAnchor":"Topoi.Base.html#examples","idDesc":"The “trivial” example of topoi is the category , which is equivalently\nthe category of presheaves on the terminal category. This is, in fact,\nthe terminal object in the 2-category of topoi (morphisms are described\nbelow), so we denote it by 𝟙.\n","idIdent":"Examples\n","idType":null},{"idAnchor":"Topoi.Base.html#properties-of-topoi","idDesc":"The defining property of a topos is that it admits a geometric embedding\ninto a presheaf category, meaning the adjunction is very special indeed:\nSince the right adjoint is fully faithful, the adjunction is monadic,\nmeaning that it exhibits as the category of algebras for a (lex,\nidempotent) monad: the “sheafification monad”. This gives us\ncompleteness in for “free” (really, it’s because presheaf categories are\ncomplete, and those are complete because is.)\n","idIdent":"Properties of topoi\n","idType":null},{"idAnchor":"Topoi.Base.html#geometric-morphisms","idDesc":"The definition of a topos as a generalisation of topological space leads\nus to look for a categorification of “continuous map” to functors\nbetween topoi. In the same way that a continuous function may be seen as\na homomorphism of frames , with defining feature the preservation of\nfinite meets and arbitrary joins, we shall define a geometric morphism\nto be a functor which is left exact and admits a right adjoint.\n","idIdent":"Geometric morphisms\n","idType":null},{"idAnchor":"Topoi.Classifying.Diaconescu.html#diaconescus-theorem","idDesc":"Let be a signature consisting of sorts , function symbols , and relation\nsymbols . We can build a logical theory on top of this signature by\nimposing axioms of the form\n","idIdent":"Diaconescu’s theorem\n","idType":null},{"idAnchor":"Topoi.Reasoning.html#reasoning-in-topoi","idDesc":"As mentioned in the overture on topos theory, categories of sheaves are\nincredibly nice categories to work in logically, mirroring many of the\nsame properties of the category of Sets. This follows from the fact that\nthey are reflective subcategories of presheaf categories, and those\ncategories enjoy many of the exactness properties of by virtue of being\nfunctor categories.\n","idIdent":"Reasoning in topoi\n","idType":null},{"idAnchor":"Topoi.Reasoning.html#limits","idDesc":"Since the sheafification functor is left exact and the inclusion functor\nis fully faithful (thus the adjunction counit is an isomorphism, c.f. ),\nwe can compute limits directly in the presheaf category and sheafify.\nUnfolding the result of this procedure, rather than appealing to the\nequivalence , yields much better computational properties. We do it by\nhand for the terminal object, binary products, and binary pullbacks.\n","idIdent":"Reasoning in topoi\n > Limits\n","idType":null},{"idAnchor":"index.html#lab","idDesc":"A formalised, cross-linked reference resource for cubical methods in\nHomotopy Type Theory. Unlike the HoTT book, the 1lab is not a “linear”\nresource: Concepts are presented as a directed graph, with links\nindicating dependencies. For instance, the statement of the univalence\nprinciple depends on universes, identifications and equivalences. In\naddition to the hyperlinked “web of concepts” provided by the Agda code,\nthere is a short introduction to homotopy type theory: Start here.\n","idIdent":"1lab\n","idType":null},{"idAnchor":"index.html#technology","idDesc":"The 1Lab uses Iosevka as its monospace typeface. Iosevka is licensed\nunder the SIL Open Font License, v1.1, a copy of which can be found\nhere. As the sans-serif typeface, we use the Inria Sans webfont, and as\na serif typeface, EB Garamond. These fonts are both open-source, though\nrather than rehosting them, we use them from Google Fonts.\n","idIdent":"1lab\n > Technology\n","idType":null},{"idAnchor":"index.html#type-theory","idDesc":null,"idIdent":"Type Theory\n","idType":null},{"idAnchor":"index.html#data-types","idDesc":"The Data namespace contains definitions of oft-used data types, which\nare fundamental to the rest of the development but not “basic type\ntheory”. These modules contain (or re-export) the types themselves,\nuseful operations on them, characterisation of their path spaces, etc.\n","idIdent":"Type Theory\n > Data types\n","idType":null},{"idAnchor":"index.html#category-theory","idDesc":"In addition to providing a framework for the synthetic study of higher\ngroupoids, HoTT also provides a natural place to develop constructive,\npredicative category theory, while still being compatible with\nclassicality principles like the axiom of choice and/or the law of\nexcluded middle. Here, we do not assume any classicality principles.\n","idIdent":"Category Theory\n","idType":null},{"idAnchor":"index.html#basics","idDesc":"The main modules in the Cat namespace provide the foundation for the\nrest of the development, defining basic constructions like precategories\nthemselves, functors, natural transformations, etc.\n","idIdent":"Category Theory\n > Basics\n","idType":null},{"idAnchor":"index.html#diagrams","idDesc":"For convenience, we define a plethora of “concrete” universal diagrams,\nunpacking their definitions as limits or colimits. These are simpler to\nwork with since they provide the relevant data with fewer layers of\nindirection.\n","idIdent":"Category Theory\n > Basics\n > Diagrams\n","idType":null},{"idAnchor":"index.html#functors","idDesc":"This namespace has definitions of properties functors can have, utility\nmodules for working with functors, the definition of full subcategories,\nand adjoint functors.\n","idIdent":"Category Theory\n > Functors\n","idType":null},{"idAnchor":"index.html#univalent-categories","idDesc":"In HoTT/UF, the word “category” is reserved for the precategories (what\nthe rest of the world refers to as just “category”) in which isomorphic\nobjects are indistinguishable, i.e. the categories which satisfy a\nversion of the univalence axiom. Sometimes we also refer to these as\n“univalent categories” to make the distinction clear.\n","idIdent":"Category Theory\n > Univalent categories\n","idType":null},{"idAnchor":"index.html#category-instances","idDesc":"Here’s where we actually build some categories and prove that they have\ndesirable properties.\n","idIdent":"Category Theory\n > Category instances\n","idType":null},{"idAnchor":"index.html#thin-categories","idDesc":"Strict thin categories are a presentation of pre-ordered sets, i.e. sets\nequipped with a transitive and reflexive relation — so we call them\n“prosets”. When this relation is antisymmetric, we additionally have a\nunivalent thin strict category — so we call these “posets”.\n","idIdent":"Category Theory\n > Thin categories\n","idType":null},{"idAnchor":"index.html#displayed-categories","idDesc":"We also have a work-in-progress formalisation of Foundations of Relative\nCategory Theory, in which the core idea is thinking of “categories over\ncategories”.\n","idIdent":"Category Theory\n > Displayed categories\n","idType":null},{"idAnchor":"index.html#topos-theory","idDesc":"Grothendieck topos theory developed constructively and predicatively.\n","idIdent":"Topos theory\n","idType":null},{"idAnchor":"index.html#algebra","idDesc":"In the Algebra namespace, the theory of universal algebra is developed\nfrom a univalent perspective. Specifically, every definition of an\nalgebraic structure comes with an associated proof that it is univalent\n— concretely, identification of groups is group isomorphism (for\ninstance).\n","idIdent":"Algebra\n","idType":null}]